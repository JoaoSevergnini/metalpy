# -*- coding: mbcs -*-

from ctypes import *
import comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0
from comtypes import _check_version, BSTR, CoClass, COMMETHOD, dispid, GUID
from ctypes import HRESULT
from ctypes.wintypes import VARIANT_BOOL
from comtypes.automation import _midlSAFEARRAY
import comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4

_lcid = 0  # change this if required
typelib_path = 'C:\\Program Files\\Computers and Structures\\SAP2000 24\\SAP2000v1.tlb'



class cFunctionTH(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A996EFEE-E3D9-426D-980E-84DE84B2E9EE}')
    _idlflags_ = ['dual', 'oleautomation']


cFunctionTH._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetCosine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'CosineP'),
        (['in', 'out'], POINTER(c_int), 'CosineSteps'),
        (['in', 'out'], POINTER(c_int), 'CosineCycles'),
        (['in', 'out'], POINTER(c_double), 'CosineAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetFromFile',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(c_int), 'HeadLines'),
        (['in', 'out'], POINTER(c_int), 'PreChars'),
        (['in', 'out'], POINTER(c_int), 'PointsPerLine'),
        (['in', 'out'], POINTER(c_int), 'ValueType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat'),
        (['in', 'out'], POINTER(c_int), 'NumberFixed'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetFromFile_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(c_int), 'HeadLines'),
        (['in', 'out'], POINTER(c_int), 'PreChars'),
        (['in', 'out'], POINTER(c_int), 'PointsPerLine'),
        (['in', 'out'], POINTER(c_int), 'ValueType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat'),
        (['in', 'out'], POINTER(c_int), 'NumberFixed'),
        (['in', 'out'], POINTER(c_double), 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetRamp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'RampTime'),
        (['in', 'out'], POINTER(c_double), 'RampAmp'),
        (['in', 'out'], POINTER(c_double), 'RampMaxTime'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetSawtooth',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'SawP'),
        (['in', 'out'], POINTER(c_double), 'SawTime'),
        (['in', 'out'], POINTER(c_int), 'SawCycles'),
        (['in', 'out'], POINTER(c_double), 'SawAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetSine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'SineP'),
        (['in', 'out'], POINTER(c_int), 'SineSteps'),
        (['in', 'out'], POINTER(c_int), 'SineCycles'),
        (['in', 'out'], POINTER(c_double), 'SineAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetTriangular',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'TriP'),
        (['in', 'out'], POINTER(c_int), 'TriCycles'),
        (['in', 'out'], POINTER(c_double), 'TriAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetUser',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetUserPeriodic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'UPCycles'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetCosine',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'CosineP'),
        (['in'], c_int, 'CosineSteps'),
        (['in'], c_int, 'CosineCycles'),
        (['in'], c_double, 'CosineAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetFromFile',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FileName'),
        (['in'], c_int, 'HeadLines'),
        (['in'], c_int, 'PreChars'),
        (['in'], c_int, 'PointsPerLine'),
        (['in'], c_int, 'ValueType'),
        (['in'], VARIANT_BOOL, 'FreeFormat'),
        (['in', 'optional'], c_int, 'NumberFixed', 10),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetFromFile_1',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FileName'),
        (['in'], c_int, 'HeadLines'),
        (['in'], c_int, 'PreChars'),
        (['in'], c_int, 'PointsPerLine'),
        (['in'], c_int, 'ValueType'),
        (['in'], VARIANT_BOOL, 'FreeFormat'),
        (['in', 'optional'], c_int, 'NumberFixed', 10),
        (['in', 'optional'], c_double, 'Dt', 0.02),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetRamp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'RampTime'),
        (['in'], c_double, 'RampAmp'),
        (['in'], c_double, 'RampMaxTime'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetSawtooth',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'SawP'),
        (['in'], c_double, 'SawTime'),
        (['in'], c_int, 'SawCycles'),
        (['in'], c_double, 'SawAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetSine',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'SineP'),
        (['in'], c_int, 'SineSteps'),
        (['in'], c_int, 'SineCycles'),
        (['in'], c_double, 'SineAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetTriangular',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'TriP'),
        (['in'], c_int, 'TriCycles'),
        (['in'], c_double, 'TriAmp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetUser',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetUserPeriodic',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'UPCycles'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cFunctionTH implementation
# class cFunctionTH_Impl(object):
#     def GetCosine(self, Name):
#         '-no docstring-'
#         #return CosineP, CosineSteps, CosineCycles, CosineAmp, pRetVal
#
#     def GetFromFile(self, Name):
#         '-no docstring-'
#         #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, pRetVal
#
#     def GetFromFile_1(self, Name):
#         '-no docstring-'
#         #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, Dt, pRetVal
#
#     def GetRamp(self, Name):
#         '-no docstring-'
#         #return RampTime, RampAmp, RampMaxTime, pRetVal
#
#     def GetSawtooth(self, Name):
#         '-no docstring-'
#         #return SawP, SawTime, SawCycles, SawAmp, pRetVal
#
#     def GetSine(self, Name):
#         '-no docstring-'
#         #return SineP, SineSteps, SineCycles, SineAmp, pRetVal
#
#     def GetTriangular(self, Name):
#         '-no docstring-'
#         #return TriP, TriCycles, TriAmp, pRetVal
#
#     def GetUser(self, Name):
#         '-no docstring-'
#         #return NumberItems, MyTime, Value, pRetVal
#
#     def GetUserPeriodic(self, Name):
#         '-no docstring-'
#         #return UPCycles, NumberItems, MyTime, Value, pRetVal
#
#     def SetCosine(self, Name, CosineP, CosineSteps, CosineCycles, CosineAmp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetFromFile(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetFromFile_1(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, Dt):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetRamp(self, Name, RampTime, RampAmp, RampMaxTime):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSawtooth(self, Name, SawP, SawTime, SawCycles, SawAmp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSine(self, Name, SineP, SineSteps, SineCycles, SineAmp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTriangular(self, Name, TriP, TriCycles, TriAmp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUser(self, Name, NumberItems):
#         '-no docstring-'
#         #return MyTime, Value, pRetVal
#
#     def SetUserPeriodic(self, Name, UPCycles, NumberItems):
#         '-no docstring-'
#         #return MyTime, Value, pRetVal
#


class cNamedAssign(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6EB8D1D1-56F5-4A48-92A6-8FD52DFE9E98}')
    _idlflags_ = ['dual', 'oleautomation']


class cModifierArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4F236E01-4020-4C27-A609-E05CDDC38606}')
    _idlflags_ = ['dual', 'oleautomation']


class cModifierCable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{95F459C1-AA2D-43FE-A59D-2168833BB39F}')
    _idlflags_ = ['dual', 'oleautomation']


class cModifierFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{916069A8-5C17-442B-95A1-592762C49381}')
    _idlflags_ = ['dual', 'oleautomation']


class cReleaseFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E50144CD-A32C-4448-A4C9-E6E6E4F8A09D}')
    _idlflags_ = ['dual', 'oleautomation']


cNamedAssign._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ModifierArea',
        (['out', 'retval'], POINTER(POINTER(cModifierArea)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'ModifierCable',
        (['out', 'retval'], POINTER(POINTER(cModifierCable)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'ModifierFrame',
        (['out', 'retval'], POINTER(POINTER(cModifierFrame)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ReleaseFrame',
        (['out', 'retval'], POINTER(POINTER(cReleaseFrame)), 'pRetVal')
    ),
]

################################################################
# code template for cNamedAssign implementation
# class cNamedAssign_Impl(object):
#     @property
#     def ModifierArea(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ModifierCable(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ModifierFrame(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ReleaseFrame(self):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eItemTypeElm'
eItemTypeElm_ObjectElm = 0
eItemTypeElm_Element = 1
eItemTypeElm_GroupElm = 2
eItemTypeElm_SelectionElm = 3
eItemTypeElm = c_int  # enum


class cDStAISC360_05_IBC2006(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5756E8C2-2E4F-4083-95DA-3912A4FB8C4B}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eItemType'
eItemType_Objects = 0
eItemType_Group = 1
eItemType_SelectedObjects = 2
eItemType = c_int  # enum

cDStAISC360_05_IBC2006._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAISC360_05_IBC2006 implementation
# class cDStAISC360_05_IBC2006_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cCaseStaticNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9988B454-0CE4-4E7C-B1B3-DB0CCBD0E072}')
    _idlflags_ = ['dual', 'oleautomation']


cCaseStaticNonlinear._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetGeometricNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NLGeomType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetHingeUnloading',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'UnloadType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLoadApplication',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'LoadControl'),
        (['in', 'out'], POINTER(c_int), 'DispType'),
        (['in', 'out'], POINTER(c_double), 'Displ'),
        (['in', 'out'], POINTER(c_int), 'Monitor'),
        (['in', 'out'], POINTER(c_int), 'DOF'),
        (['in', 'out'], POINTER(BSTR), 'PointName'),
        (['in', 'out'], POINTER(BSTR), 'GDispl'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetModalCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetResultsSaved',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SaveMultipleSteps'),
        (['in', 'out'], POINTER(c_int), 'MinSavedStates'),
        (['in', 'out'], POINTER(c_int), 'MaxSavedStates'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'PositiveOnly'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MaxTotalSteps'),
        (['in', 'out'], POINTER(c_int), 'MaxFailedSubSteps'),
        (['in', 'out'], POINTER(c_int), 'MaxIterCS'),
        (['in', 'out'], POINTER(c_int), 'MaxIterNR'),
        (['in', 'out'], POINTER(c_double), 'TolConvD'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping'),
        (['in', 'out'], POINTER(c_double), 'TolEventD'),
        (['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter'),
        (['in', 'out'], POINTER(c_double), 'TolLineSearch'),
        (['in', 'out'], POINTER(c_double), 'LineSearchStepFact'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetTargetForceParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'TolConvF'),
        (['in', 'out'], POINTER(c_int), 'MaxIter'),
        (['in', 'out'], POINTER(c_double), 'AccelFact'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NoStop'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetGeometricNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NLGeomType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetHingeUnloading',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'UnloadType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetLoadApplication',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'LoadControl'),
        (['in'], c_int, 'DispType'),
        (['in'], c_double, 'Displ'),
        (['in'], c_int, 'Monitor'),
        (['in'], c_int, 'DOF'),
        (['in'], BSTR, 'PointName'),
        (['in'], BSTR, 'GDispl'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetModalCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetResultsSaved',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'SaveMultipleSteps'),
        (['in', 'optional'], c_int, 'MinSavedStates', 10),
        (['in', 'optional'], c_int, 'MaxSavedStates', 100),
        (['in', 'optional'], VARIANT_BOOL, 'PositiveOnly', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MaxTotalSteps'),
        (['in'], c_int, 'MaxFailedSubSteps'),
        (['in'], c_int, 'MaxIterCS'),
        (['in'], c_int, 'MaxIterNR'),
        (['in'], c_double, 'TolConvD'),
        (['in'], VARIANT_BOOL, 'UseEventStepping'),
        (['in'], c_double, 'TolEventD'),
        (['in'], c_int, 'MaxLineSearchPerIter'),
        (['in'], c_double, 'TolLineSearch'),
        (['in'], c_double, 'LineSearchStepFact'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetTargetForceParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'TolConvF'),
        (['in'], c_int, 'MaxIter'),
        (['in'], c_double, 'AccelFact'),
        (['in'], VARIANT_BOOL, 'NoStop'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetMassSource',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'mSource'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetMassSource',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'mSource'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseStaticNonlinear implementation
# class cCaseStaticNonlinear_Impl(object):
#     def GetGeometricNonlinearity(self, Name):
#         '-no docstring-'
#         #return NLGeomType, pRetVal
#
#     def GetHingeUnloading(self, Name):
#         '-no docstring-'
#         #return UnloadType, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoadApplication(self, Name):
#         '-no docstring-'
#         #return LoadControl, DispType, Displ, Monitor, DOF, PointName, GDispl, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, SF, pRetVal
#
#     def GetModalCase(self, Name):
#         '-no docstring-'
#         #return ModalCase, pRetVal
#
#     def GetResultsSaved(self, Name):
#         '-no docstring-'
#         #return SaveMultipleSteps, MinSavedStates, MaxSavedStates, PositiveOnly, pRetVal
#
#     def GetSolControlParameters(self, Name):
#         '-no docstring-'
#         #return MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
#
#     def GetTargetForceParameters(self, Name):
#         '-no docstring-'
#         #return TolConvF, MaxIter, AccelFact, NoStop, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGeometricNonlinearity(self, Name, NLGeomType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetHingeUnloading(self, Name, UnloadType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadApplication(self, Name, LoadControl, DispType, Displ, Monitor, DOF, PointName, GDispl):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, SF, pRetVal
#
#     def SetModalCase(self, Name, ModalCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetResultsSaved(self, Name, SaveMultipleSteps, MinSavedStates, MaxSavedStates, PositiveOnly):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSolControlParameters(self, Name, MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTargetForceParameters(self, Name, TolConvF, MaxIter, AccelFact, NoStop):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetMassSource(self, Name):
#         '-no docstring-'
#         #return mSource, pRetVal
#
#     def SetMassSource(self, Name, mSource):
#         '-no docstring-'
#         #return pRetVal
#


class cLinkObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AB61CD86-EFA8-468E-B88F-1C17C6BDE8DE}')
    _idlflags_ = ['dual', 'oleautomation']


cLinkObj._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddByCoord',
        (['in'], c_double, 'XI'),
        (['in'], c_double, 'YI'),
        (['in'], c_double, 'ZI'),
        (['in'], c_double, 'XJ'),
        (['in'], c_double, 'YJ'),
        (['in'], c_double, 'ZJ'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'IsSingleJoint', False),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddByPoint',
        (['in'], BSTR, 'Point1'),
        (['in'], BSTR, 'Point2'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'IsSingleJoint', False),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Elm'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['in', 'out'], POINTER(c_int), 'AxVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in', 'out'], POINTER(c_int), 'Plane2'),
        (['in', 'out'], POINTER(c_int), 'PlVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Point1'),
        (['in', 'out'], POINTER(BSTR), 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Ang'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Active'),
        (['in'], c_int, 'AxVectOpt'),
        (['in'], BSTR, 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in'], c_int, 'Plane2'),
        (['in'], c_int, 'PlVectOpt'),
        (['in'], BSTR, 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'DeleteLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'DeleteLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'DeleteLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetPropertyFD',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetPropertyFD',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cLinkObj implementation
# class cLinkObj_Impl(object):
#     def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, IsSingleJoint, PropName, UserName, CSys):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def AddByPoint(self, Point1, Point2, IsSingleJoint, PropName, UserName):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return Elm, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, Advanced, pRetVal
#
#     def GetLocalAxesAdvanced(self, Name):
#         '-no docstring-'
#         #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point1, Point2, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxes(self, Name, Ang, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
#         '-no docstring-'
#         #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
#
#     def SetProperty(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadGravity(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTargetForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadDeformation(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetLoadGravity(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, LinkName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadTargetForce(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
#
#     def GetPropertyFD(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def SetLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return DOF, D, pRetVal
#
#     def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTargetForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return DOF, F, Rd, pRetVal
#
#     def SetPropertyFD(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#


class cCoordSys(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DB8AD5F4-6973-4AEA-88B7-5E5B4FE90F5C}')
    _idlflags_ = ['dual', 'oleautomation']


cCoordSys._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetCoordSys',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'out'], POINTER(c_double), 'RZ'),
        (['in', 'out'], POINTER(c_double), 'RY'),
        (['in', 'out'], POINTER(c_double), 'RX'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetCoordSys',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in'], c_double, 'RZ'),
        (['in'], c_double, 'RY'),
        (['in'], c_double, 'RX'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetCoordSys_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'out'], POINTER(c_double), 'RZ'),
        (['in', 'out'], POINTER(c_double), 'RY'),
        (['in', 'out'], POINTER(c_double), 'RX'),
        (['in', 'out'], POINTER(c_int), 'NumXLines'),
        (['in', 'out'], POINTER(c_int), 'NumYLines'),
        (['in', 'out'], POINTER(c_int), 'NumZLines'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetCoordSysCylindrical',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'out'], POINTER(c_double), 'RZ'),
        (['in', 'out'], POINTER(c_double), 'RY'),
        (['in', 'out'], POINTER(c_double), 'RX'),
        (['in', 'out'], POINTER(c_int), 'NumRLines'),
        (['in', 'out'], POINTER(c_int), 'NumTLines'),
        (['in', 'out'], POINTER(c_int), 'NumZLines'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDR'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GridLineIDZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateR'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CoordinateZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeR'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineTypeZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleR'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'VisibleZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocR'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BubbleLocZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorR'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ColorZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetCoordSysType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GridSysType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCoordSys implementation
# class cCoordSys_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCoordSys(self, Name):
#         '-no docstring-'
#         #return X, Y, Z, RZ, RY, RX, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetCoordSys(self, Name, X, Y, Z, RZ, RY, RX):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCoordSys_2(self, Name):
#         '-no docstring-'
#         #return X, Y, Z, RZ, RY, RX, NumXLines, NumYLines, NumZLines, GridLineIDX, GridLineIDY, GridLineIDZ, CoordinateX, CoordinateY, CoordinateZ, LineTypeX, LineTypeY, LineTypeZ, VisibleX, VisibleY, VisibleZ, BubbleLocX, BubbleLocY, BubbleLocZ, ColorX, ColorY, ColorZ, pRetVal
#
#     def GetCoordSysCylindrical(self, Name):
#         '-no docstring-'
#         #return X, Y, Z, RZ, RY, RX, NumRLines, NumTLines, NumZLines, GridLineIDR, GridLineIDT, GridLineIDZ, CoordinateR, CoordinateT, CoordinateZ, LineTypeR, LineTypeT, LineTypeZ, VisibleR, VisibleT, VisibleZ, BubbleLocR, BubbleLocT, BubbleLocZ, ColorR, ColorT, ColorZ, pRetVal
#
#     def GetCoordSysType(self, Name):
#         '-no docstring-'
#         #return GridSysType, pRetVal
#

cModifierArea._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cModifierArea implementation
# class cModifierArea_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#


class cCaseStaticLinearMultistep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AC848C70-00DE-4C2A-A08C-14A1DB8A2003}')
    _idlflags_ = ['dual', 'oleautomation']


cCaseStaticLinearMultistep._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoads_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetLoads_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseStaticLinearMultistep implementation
# class cCaseStaticLinearMultistep_Impl(object):
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, SF, pRetVal
#
#     def GetLoads_1(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, SF, pRetVal
#
#     def SetLoads_1(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
#
# values for enumeration 'eReturnCode'
eReturnCode_NotApplicable = -100
eReturnCode_NotImplemented = -99
eReturnCode_NoError = 0
eReturnCode_UnspecifiedError = 1
eReturnCode_Deprecated = -98
eReturnCode_TableIsObsolete = -97
eReturnCode_TableDoesNotExist = -96
eReturnCode = c_int  # enum


class cLoadCases(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AAF8B04F-5C37-40E2-9822-6C006C4279C4}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseBuckling(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{190CB141-2403-4560-B1D0-C607B7DD7F7D}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eLoadCaseType'
eLoadCaseType_LinearStatic = 1
eLoadCaseType_NonlinearStatic = 2
eLoadCaseType_Modal = 3
eLoadCaseType_ResponseSpectrum = 4
eLoadCaseType_LinearHistory = 5
eLoadCaseType_NonlinearHistory = 6
eLoadCaseType_LinearDynamic = 7
eLoadCaseType_NonlinearDynamic = 8
eLoadCaseType_MovingLoad = 9
eLoadCaseType_Buckling = 10
eLoadCaseType_SteadyState = 11
eLoadCaseType_PowerSpectralDensity = 12
eLoadCaseType_LinearStaticMultiStep = 13
eLoadCaseType_HyperStatic = 14
eLoadCaseType_ExternalResults = 15
eLoadCaseType_StagedConstruction = 16
eLoadCaseType_NonlinearStaticMultiStep = 17
eLoadCaseType = c_int  # enum


class cCaseDirectHistoryLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C0D0BC6E-DAD3-4FB7-828A-EE6C9D26C37B}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseDirectHistoryNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D23E71A9-BBE2-4CC8-A839-1459FBBD9BCF}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eLoadPatternType'
eLoadPatternType_Dead = 1
eLoadPatternType_SuperDead = 2
eLoadPatternType_Live = 3
eLoadPatternType_ReduceLive = 4
eLoadPatternType_Quake = 5
eLoadPatternType_Wind = 6
eLoadPatternType_Snow = 7
eLoadPatternType_Other = 8
eLoadPatternType_Move = 9
eLoadPatternType_Temperature = 10
eLoadPatternType_Rooflive = 11
eLoadPatternType_Notional = 12
eLoadPatternType_PatternLive = 13
eLoadPatternType_Wave = 14
eLoadPatternType_Braking = 15
eLoadPatternType_Centrifugal = 16
eLoadPatternType_Friction = 17
eLoadPatternType_Ice = 18
eLoadPatternType_WindOnLiveLoad = 19
eLoadPatternType_HorizontalEarthPressure = 20
eLoadPatternType_VerticalEarthPressure = 21
eLoadPatternType_EarthSurcharge = 22
eLoadPatternType_DownDrag = 23
eLoadPatternType_VehicleCollision = 24
eLoadPatternType_VesselCollision = 25
eLoadPatternType_TemperatureGradient = 26
eLoadPatternType_Settlement = 27
eLoadPatternType_Shrinkage = 28
eLoadPatternType_Creep = 29
eLoadPatternType_WaterloadPressure = 30
eLoadPatternType_LiveLoadSurcharge = 31
eLoadPatternType_LockedInForces = 32
eLoadPatternType_PedestrianLL = 33
eLoadPatternType_Prestress = 34
eLoadPatternType_Hyperstatic = 35
eLoadPatternType_Bouyancy = 36
eLoadPatternType_StreamFlow = 37
eLoadPatternType_Impact = 38
eLoadPatternType_Construction = 39
eLoadPatternType_DeadWearing = 40
eLoadPatternType_DeadWater = 41
eLoadPatternType_DeadManufacture = 42
eLoadPatternType_EarthHydrostatic = 43
eLoadPatternType_PassiveEarthPressure = 44
eLoadPatternType_ActiveEarthPressure = 45
eLoadPatternType_PedestrianLLReduced = 46
eLoadPatternType_SnowHighAltitude = 47
eLoadPatternType_EuroLm1Char = 48
eLoadPatternType_EuroLm1Freq = 49
eLoadPatternType_EuroLm2 = 50
eLoadPatternType_EuroLm3 = 51
eLoadPatternType_EuroLm4 = 52
eLoadPatternType_SeaState = 53
eLoadPatternType_Permit = 54
eLoadPatternType_MoveFatigue = 55
eLoadPatternType_MoveFatiguePermit = 56
eLoadPatternType_MoveDeflection = 57
eLoadPatternType_MoveTrain = 58
eLoadPatternType_PrestressTransfer = 59
eLoadPatternType_PatternAuto = 60
eLoadPatternType_QuakeDrift = 61
eLoadPatternType_QuakeVerticalOnly = 62
eLoadPatternType = c_int  # enum


class cCaseHyperStatic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E8049E19-2C05-4E23-B744-4EBFE75354E8}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseModalEigen(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EC38FFC6-AF39-47DB-9B31-397997A98747}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseModalRitz(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0E445571-D7BA-468A-A33E-095EA376B2C0}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseModalHistoryLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DCBB36F3-5C9E-400E-B43A-66D3ABD7E5CC}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseModalHistoryNonlinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{14EB7EE8-D25B-49BF-849C-44A9170FF144}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseResponseSpectrum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3EC1FFED-C859-4BA9-9DB2-6F8DF0124E5B}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseStaticLinear(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{16A33532-51C0-4F58-932C-2B6A1547F196}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseStaticNonlinearStaged(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6059DCCF-6021-4C41-911C-88CA7D780F02}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseExternalResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5538B5C8-8EB1-4E00-8552-26067168DD0E}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eDesignActionType'
eDesignActionType_NonComposite = 1
eDesignActionType_ShortTermComposite = 2
eDesignActionType_LongTermComposite = 3
eDesignActionType_Staged = 4
eDesignActionType_Other = 5
eDesignActionType = c_int  # enum


class cCaseMovingLoad(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{47924099-F72C-4435-8B4E-186F9F162E4A}')
    _idlflags_ = ['dual', 'oleautomation']


class cCasePowerSpectralDensity(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{57B7216A-313A-4DAC-8100-81C489B595E1}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseStaticNonlinearMultistep(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1C6BDDE6-5066-4125-A2C5-D46717BD9E6E}')
    _idlflags_ = ['dual', 'oleautomation']


class cCaseSteadyState(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{11326588-85C5-432E-B5DC-DE3C3051F1A1}')
    _idlflags_ = ['dual', 'oleautomation']


cLoadCases._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Buckling',
        (['out', 'retval'], POINTER(POINTER(cCaseBuckling)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['in', 'optional'], eLoadCaseType, 'CaseType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'DirHistLinear',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseDirectHistoryLinear)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'DirHistNonlinear',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseDirectHistoryNonlinear)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], eLoadCaseType, 'CaseType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetTypeOAPI_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eLoadCaseType), 'CaseType'),
        (['in', 'out'], POINTER(c_int), 'SubType'),
        (['in', 'out'], POINTER(eLoadPatternType), 'DesignType'),
        (['in', 'out'], POINTER(c_int), 'DesignTypeOption'),
        (['in', 'out'], POINTER(c_int), 'Auto'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'HyperStatic',
        (['out', 'retval'], POINTER(POINTER(cCaseHyperStatic)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'ModalEigen',
        (['out', 'retval'], POINTER(POINTER(cCaseModalEigen)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'ModalRitz',
        (['out', 'retval'], POINTER(POINTER(cCaseModalRitz)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'ModHistLinear',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseModalHistoryLinear)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'ModHistNonlinear',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseModalHistoryNonlinear)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'ResponseSpectrum',
        (['out', 'retval'], POINTER(POINTER(cCaseResponseSpectrum)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetDesignType',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DesignTypeOption'),
        (['in', 'optional'], eLoadPatternType, 'DesignType', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18), 'propget'],
        HRESULT,
        'StaticLinear',
        (['out', 'retval'], POINTER(POINTER(cCaseStaticLinear)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19), 'propget'],
        HRESULT,
        'StaticNonlinear',
        (['out', 'retval'], POINTER(POINTER(cCaseStaticNonlinear)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20), 'propget'],
        HRESULT,
        'StaticNonlinearStaged',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseStaticNonlinearStaged)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eLoadCaseType), 'CaseType'),
        (['in', 'out'], POINTER(c_int), 'SubType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28), 'propget'],
        HRESULT,
        'ExternalResults',
        (['out', 'retval'], POINTER(POINTER(cCaseExternalResults)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetDesignAction',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DesignActionOption'),
        (['in', 'out'], POINTER(eDesignActionType), 'DesignAction'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22), 'propget'],
        HRESULT,
        'Moving',
        (['out', 'retval'], POINTER(POINTER(cCaseMovingLoad)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23), 'propget'],
        HRESULT,
        'PSD',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCasePowerSpectralDensity)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetDesignAction',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DesignActionOption'),
        (['in', 'optional'], eDesignActionType, 'DesignAction', 3),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24), 'propget'],
        HRESULT,
        'StaticLinearMultistep',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseStaticLinearMultistep)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(31), 'propget'],
        HRESULT,
        'StaticNonlinearMultistep',
        (
            ['out', 'retval'],
            POINTER(POINTER(cCaseStaticNonlinearMultistep)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(25), 'propget'],
        HRESULT,
        'SteadyState',
        (['out', 'retval'], POINTER(POINTER(cCaseSteadyState)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetScheduleName',
        (['in'], BSTR, 'LoadName'),
        (['in', 'out'], POINTER(BSTR), 'ScheduleName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetScheduleName',
        (['in'], BSTR, 'LoadName'),
        (['in'], BSTR, 'ScheduleName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'GetTypeOAPI_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eLoadCaseType), 'CaseType'),
        (['in', 'out'], POINTER(c_int), 'SubType'),
        (['in', 'out'], POINTER(eLoadPatternType), 'DesignType'),
        (['in', 'out'], POINTER(c_int), 'DesignTypeOption'),
        (['in', 'out'], POINTER(c_int), 'Auto'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'GetNameList_1',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], eLoadCaseType, 'CaseType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cLoadCases implementation
# class cLoadCases_Impl(object):
#     @property
#     def Buckling(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, CaseType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DirHistLinear(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DirHistNonlinear(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self, CaseType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetTypeOAPI_1(self, Name):
#         '-no docstring-'
#         #return CaseType, SubType, DesignType, DesignTypeOption, Auto, pRetVal
#
#     @property
#     def HyperStatic(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ModalEigen(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ModalRitz(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ModHistLinear(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ModHistNonlinear(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ResponseSpectrum(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDesignType(self, Name, DesignTypeOption, DesignType):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def StaticLinear(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def StaticNonlinear(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def StaticNonlinearStaged(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return CaseType, SubType, pRetVal
#
#     @property
#     def ExternalResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDesignAction(self, Name):
#         '-no docstring-'
#         #return DesignActionOption, DesignAction, pRetVal
#
#     @property
#     def Moving(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PSD(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDesignAction(self, Name, DesignActionOption, DesignAction):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def StaticLinearMultistep(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def StaticNonlinearMultistep(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SteadyState(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetScheduleName(self, LoadName):
#         '-no docstring-'
#         #return ScheduleName, pRetVal
#
#     def SetScheduleName(self, LoadName, ScheduleName):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetTypeOAPI_2(self, Name):
#         '-no docstring-'
#         #return CaseType, SubType, DesignType, DesignTypeOption, Auto, pRetVal
#
#     def GetNameList_1(self, CaseType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
# values for enumeration 'eHingeLocationType'
eHingeLocationType_RelativeDistance = 1
eHingeLocationType_OffsetFromIEnd = 2
eHingeLocationType_OffsetFromJEnd = 3
eHingeLocationType = c_int  # enum


class cDesignConcrete(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8474103D-D34B-4B86-8394-EE7A356BB268}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoACI318_08_IBC2009(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{32D98E3B-3881-4A84-B684-A7E7AECEE281}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoEurocode_2_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{FFBEB887-E057-415F-AB91-897F8FC9072C}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoSP63133302011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A27A1874-306B-4515-9147-48E233A7FF74}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoACI318_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{25B8E5CD-BBE4-4CDA-B3AA-F9C5A1F31843}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoACI318_19(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{68F9D410-8FD8-4661-8CFA-40946BFA872E}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoCSA_A23_3_04(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3991DA43-03B0-4960-B33B-44D971C8CA59}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoCSA_A23_3_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5492F555-F4FA-4D1A-9CF3-E3E50DE488C1}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoCSA_A23_3_19(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A6E4CF20-5895-46D2-BE25-7A3EDCDD80F3}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoACI318_11(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{337B9D0E-0FF4-4BC7-9F94-EB33E4884C54}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoAS_3600_09(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{81BE5D6A-C1A9-4039-BB8F-B28EAB5C0F79}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoBS8110_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{421C908E-8940-4776-939A-8D9FC5CD0274}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoChinese_2010(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0D975BBE-2363-4471-A71E-98F9439BC6F4}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoIndian_IS_456_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BAB8D7E7-9AE2-434B-AC03-AA657F437855}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoSingapore_CP_65_99(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B1D20384-F3BC-426F-A0AC-BAF49F90A67B}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoKCI_1999(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{65520603-984E-405F-91E4-1988E4E0919F}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoChinese_2002(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DFF5078B-8C5A-45FD-B9EE-ED4FAA620EFB}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoTS_500_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{94CE61FE-DF0C-44C8-AE5D-9F291C72A189}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoItalianNTC2008C(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D1CCEB3A-F262-447B-A9A2-4AA57D1F84B7}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoNZS_3101_2006(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{47C8F4E6-6504-470A-B919-5981A0BF1773}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoMexican_RCDF_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{90B81CD7-C084-483B-9D41-C5E0A6D1BAD7}')
    _idlflags_ = ['dual', 'oleautomation']


class cDCoHong_Kong_CP_2013(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{10E7628C-D59D-4B8D-B279-86630F2B4F53}')
    _idlflags_ = ['dual', 'oleautomation']


cDesignConcrete._methods_ = [
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'ACI318_08_IBC2009',
        (['out', 'retval'], POINTER(POINTER(cDCoACI318_08_IBC2009)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'Eurocode_2_2004',
        (['out', 'retval'], POINTER(POINTER(cDCoEurocode_2_2004)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetCode',
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'GetResultsAvailable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetSummaryResultsBeam',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TopCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TopArea'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'BotCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BotArea'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMajorArea'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TLCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TLArea'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TTCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TTArea'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetSummaryResultsColumn',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyOption'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PMMCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMArea'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PMMRatio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMajorCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVMajor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VMinorCombo'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AVMinor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetSummaryResultsJoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCJSRatioMajor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'JSRatioMajor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCJSRatioMinor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'JSRatioMinor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCBCCRatioMajor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BCCRatioMajor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LCBCCRatioMinor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'BCCRatioMinor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetCode',
        (['in'], BSTR, 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], VARIANT_BOOL, 'LastAnalysis'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'StartDesign',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51), 'propget'],
        HRESULT,
        'SP63_13330_2012',
        (['out', 'retval'], POINTER(POINTER(cDCoSP63133302011)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52), 'propget'],
        HRESULT,
        'ACI318_14',
        (['out', 'retval'], POINTER(POINTER(cDCoACI318_14)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54), 'propget'],
        HRESULT,
        'ACI318_19',
        (['out', 'retval'], POINTER(POINTER(cDCoACI318_19)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'CSA_A23_3_04',
        (['out', 'retval'], POINTER(POINTER(cDCoCSA_A23_3_04)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(60), 'propget'],
        HRESULT,
        'CSA_A23_3_14',
        (['out', 'retval'], POINTER(POINTER(cDCoCSA_A23_3_14)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(61), 'propget'],
        HRESULT,
        'CSA_A23_3_19',
        (['out', 'retval'], POINTER(POINTER(cDCoCSA_A23_3_19)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38), 'propget'],
        HRESULT,
        'ACI318_11',
        (['out', 'retval'], POINTER(POINTER(cDCoACI318_11)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'DeleteResults',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'GetComboAutoGenerate',
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetComboStrength',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetComboAutoGenerate',
        (['in'], VARIANT_BOOL, 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetComboStrength',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'VerifyPassed',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(c_int), 'N1'),
        (['in', 'out'], POINTER(c_int), 'N2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'VerifySections',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'ResetOverwrites',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'AS_3600_09',
        (['out', 'retval'], POINTER(POINTER(cDCoAS_3600_09)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'BS8110_97',
        (['out', 'retval'], POINTER(POINTER(cDCoBS8110_97)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'Chinese_2010',
        (['out', 'retval'], POINTER(POINTER(cDCoChinese_2010)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24), 'propget'],
        HRESULT,
        'Indian_IS_456_2000',
        (['out', 'retval'], POINTER(POINTER(cDCoIndian_IS_456_2000)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33), 'propget'],
        HRESULT,
        'Singapore_CP_65_99',
        (['out', 'retval'], POINTER(POINTER(cDCoSingapore_CP_65_99)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26), 'propget'],
        HRESULT,
        'KCI_1999',
        (['out', 'retval'], POINTER(POINTER(cDCoKCI_1999)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'Chinese_2002',
        (['out', 'retval'], POINTER(POINTER(cDCoChinese_2002)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43), 'propget'],
        HRESULT,
        'TS_500_2000',
        (['out', 'retval'], POINTER(POINTER(cDCoTS_500_2000)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40), 'propget'],
        HRESULT,
        'Italian_NTC_2008',
        (['out', 'retval'], POINTER(POINTER(cDCoItalianNTC2008C)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42), 'propget'],
        HRESULT,
        'NZS_3101_2006',
        (['out', 'retval'], POINTER(POINTER(cDCoNZS_3101_2006)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41), 'propget'],
        HRESULT,
        'Mexican_RCDF_2004',
        (['out', 'retval'], POINTER(POINTER(cDCoMexican_RCDF_2004)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39), 'propget'],
        HRESULT,
        'Hong_Kong_CP_2013',
        (['out', 'retval'], POINTER(POINTER(cDCoHong_Kong_CP_2013)), 'pRetVal')
    ),
]

################################################################
# code template for cDesignConcrete implementation
# class cDesignConcrete_Impl(object):
#     @property
#     def ACI318_08_IBC2009(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Eurocode_2_2004(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCode(self):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def GetDesignSection(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetResultsAvailable(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSummaryResultsBeam(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, Location, TopCombo, TopArea, BotCombo, BotArea, VMajorCombo, VMajorArea, TLCombo, TLArea, TTCombo, TTArea, ErrorSummary, WarningSummary, pRetVal
#
#     def GetSummaryResultsColumn(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, MyOption, Location, PMMCombo, PMMArea, PMMRatio, VMajorCombo, AVMajor, VMinorCombo, AVMinor, ErrorSummary, WarningSummary, pRetVal
#
#     def GetSummaryResultsJoint(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LCJSRatioMajor, JSRatioMajor, LCJSRatioMinor, JSRatioMinor, LCBCCRatioMajor, BCCRatioMajor, LCBCCRatioMinor, BCCRatioMinor, ErrorSummary, WarningSummary, pRetVal
#
#     def SetCode(self, CodeName):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def StartDesign(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SP63_13330_2012(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ACI318_14(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ACI318_19(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def CSA_A23_3_04(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def CSA_A23_3_14(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def CSA_A23_3_19(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ACI318_11(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetComboAutoGenerate(self):
#         '-no docstring-'
#         #return AutoGenerate, pRetVal
#
#     def GetComboStrength(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def SetComboAutoGenerate(self, AutoGenerate):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboStrength(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def VerifyPassed(self):
#         '-no docstring-'
#         #return NumberItems, N1, N2, MyName, pRetVal
#
#     def VerifySections(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def ResetOverwrites(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AS_3600_09(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def BS8110_97(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Chinese_2010(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Indian_IS_456_2000(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Singapore_CP_65_99(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def KCI_1999(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Chinese_2002(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def TS_500_2000(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Italian_NTC_2008(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def NZS_3101_2006(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Mexican_RCDF_2004(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Hong_Kong_CP_2013(self):
#         '-no docstring-'
#         #return pRetVal
#

cReleaseFrame._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetReleases',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetReleases',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cReleaseFrame implementation
# class cReleaseFrame_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetReleases(self, Name):
#         '-no docstring-'
#         #return II, JJ, StartValue, EndValue, pRetVal
#
#     def SetReleases(self, Name):
#         '-no docstring-'
#         #return II, JJ, StartValue, EndValue, pRetVal
#

cDCoItalianNTC2008C._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoItalianNTC2008C implementation
# class cDCoItalianNTC2008C_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDStASCE_10_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2C79409C-4E43-4732-8A7F-25CBD5155129}')
    _idlflags_ = ['dual', 'oleautomation']


cDStASCE_10_97._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStASCE_10_97 implementation
# class cDStASCE_10_97_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cAreaObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{60A6CEC0-B77A-407A-AEA2-5F4E613EE6AB}')
    _idlflags_ = ['dual', 'oleautomation']


cAreaObj._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddByCoord',
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddByPoint',
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DeleteLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'DeleteLoadUniform',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'DeleteLoadUniformToFrame',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'DeleteLoadWindPressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'DeleteMass',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'DeleteModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'DeleteSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetEdgeConstraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ConstraintExists'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetLoadUniform',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetLoadUniformToFrame',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DistType'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetLoadWindPressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'cp'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'MassOverL2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'GetOpening',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsOpening'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'GetSelectedEdge',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberEdges'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetEdgeConstraint',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'ConstraintExists'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetLoadUniform',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Value'),
        (['in'], c_int, 'Dir'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetLoadUniformToFrame',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Value'),
        (['in'], c_int, 'Dir'),
        (['in'], c_int, 'DistType'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetLoadWindPressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'cp'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Ang'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetMass',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'MassOverL2'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'SetOpening',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'IsOpening'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetSelectedEdge',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'EdgeNum'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(89)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetAutoMesh',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MeshType'),
        (['in', 'out'], POINTER(c_int), 'N1'),
        (['in', 'out'], POINTER(c_int), 'N2'),
        (['in', 'out'], POINTER(c_double), 'MaxSize1'),
        (['in', 'out'], POINTER(c_double), 'MaxSize2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'PointOnEdgeFromLine'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'PointOnEdgeFromPoint'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ExtendCookieCutLines'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(c_double), 'MaxSizeGeneral'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LocalAxesOnEdge'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LocalAxesOnFace'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnEdge'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnFace'),
        (['in', 'out'], POINTER(BSTR), 'Group'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SubMesh'),
        (['in', 'out'], POINTER(c_double), 'SubMeshSize'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetOffsets',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'OffsetType'),
        (['in', 'out'], POINTER(BSTR), 'OffsetPattern'),
        (['in', 'out'], POINTER(c_double), 'OffsetPatternSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(94)],
        HRESULT,
        'GetLoadWindPressure_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'cp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DistributionType'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['in', 'out'], POINTER(c_int), 'Plane2'),
        (['in', 'out'], POINTER(c_int), 'PlVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'GetSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberSprings'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SimpleSpringType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpringLocalOneType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Outward'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'GetThickness',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ThicknessType'),
        (['in', 'out'], POINTER(BSTR), 'ThicknessPattern'),
        (['in', 'out'], POINTER(c_double), 'ThicknessPatternSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetAutoMesh',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MeshType'),
        (['in', 'optional'], c_int, 'N1', 2),
        (['in', 'optional'], c_int, 'N2', 2),
        (['in', 'optional'], c_double, 'MaxSize1', 0.0),
        (['in', 'optional'], c_double, 'MaxSize2', 0.0),
        (['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromLine', False),
        (['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromPoint', False),
        (['in', 'optional'], VARIANT_BOOL, 'ExtendCookieCutLines', False),
        (['in', 'optional'], c_double, 'Rotation', 0.0),
        (['in', 'optional'], c_double, 'MaxSizeGeneral', 0.0),
        (['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnEdge', False),
        (['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnFace', False),
        (['in', 'optional'], VARIANT_BOOL, 'RestraintsOnEdge', False),
        (['in', 'optional'], VARIANT_BOOL, 'RestraintsOnFace', False),
        (['in', 'optional'], BSTR, 'Group', 'ALL'),
        (['in', 'optional'], VARIANT_BOOL, 'SubMesh', False),
        (['in', 'optional'], c_double, 'SubMeshSize', 0.0),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(95)],
        HRESULT,
        'SetLoadWindPressure_1',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'cp'),
        (['in'], c_int, 'DistributionType'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Active'),
        (['in'], c_int, 'Plane2'),
        (['in'], c_int, 'PlVectOpt'),
        (['in'], BSTR, 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetOffsets',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'OffsetType'),
        (['in'], BSTR, 'OffsetPattern'),
        (['in'], c_double, 'OffsetPatternSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'SetSpring',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'S'),
        (['in'], c_int, 'SimpleSpringType'),
        (['in'], BSTR, 'LinkProp'),
        (['in'], c_int, 'Face'),
        (['in'], c_int, 'SpringLocalOneType'),
        (['in'], c_int, 'Dir'),
        (['in'], VARIANT_BOOL, 'Outward'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vec'),
        (['in'], c_double, 'Ang'),
        (['in'], VARIANT_BOOL, 'Replace'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'SetThickness',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ThicknessType'),
        (['in'], BSTR, 'ThicknessPattern'),
        (['in'], c_double, 'ThicknessPatternSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(60)],
        HRESULT,
        'DeleteLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(61)],
        HRESULT,
        'DeleteLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(62)],
        HRESULT,
        'DeleteLoadRotate',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'DeleteLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'Component'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'DeleteLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66)],
        HRESULT,
        'GetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67)],
        HRESULT,
        'GetLoadRotate',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69)],
        HRESULT,
        'GetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(70)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(71)],
        HRESULT,
        'SetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(72)],
        HRESULT,
        'SetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(73)],
        HRESULT,
        'SetLoadRotate',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(74)],
        HRESULT,
        'SetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'Component'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(75)],
        HRESULT,
        'SetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'Face'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(76)],
        HRESULT,
        'SetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Temp'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAreaObj implementation
# class cAreaObj_Impl(object):
#     def AddByCoord(self, NumberPoints, PropName, UserName, CSys):
#         '-no docstring-'
#         #return X, Y, Z, Name, pRetVal
#
#     def AddByPoint(self, NumberPoints, PropName, UserName):
#         '-no docstring-'
#         #return Point, Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadUniform(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadUniformToFrame(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadWindPressure(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteMass(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteModifiers(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteSpring(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetEdgeConstraint(self, Name):
#         '-no docstring-'
#         #return ConstraintExists, pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return NElm, Elm, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, MyType, Value, PatternName, pRetVal
#
#     def GetLoadUniform(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, pRetVal
#
#     def GetLoadUniformToFrame(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, DistType, pRetVal
#
#     def GetLoadWindPressure(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, MyType, cp, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, Advanced, pRetVal
#
#     def GetMass(self, Name):
#         '-no docstring-'
#         #return MassOverL2, pRetVal
#
#     def GetMaterialOverwrite(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetOpening(self, Name):
#         '-no docstring-'
#         #return IsOpening, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return NumberPoints, Point, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetSelectedEdge(self, Name):
#         '-no docstring-'
#         #return NumberEdges, Selected, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetEdgeConstraint(self, Name, ConstraintExists, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTemperature(self, Name, LoadPat, MyType, Value, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadUniform(self, Name, LoadPat, Value, Dir, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadUniformToFrame(self, Name, LoadPat, Value, Dir, DistType, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadWindPressure(self, Name, LoadPat, MyType, cp, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxes(self, Name, Ang, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMass(self, Name, MassOverL2, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMaterialOverwrite(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModifiers(self, Name, ItemType):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOpening(self, Name, IsOpening, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetProperty(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelectedEdge(self, Name, EdgeNum, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def GetAutoMesh(self, Name):
#         '-no docstring-'
#         #return MeshType, N1, N2, MaxSize1, MaxSize2, PointOnEdgeFromLine, PointOnEdgeFromPoint, ExtendCookieCutLines, Rotation, MaxSizeGeneral, LocalAxesOnEdge, LocalAxesOnFace, RestraintsOnEdge, RestraintsOnFace, Group, SubMesh, SubMeshSize, pRetVal
#
#     def GetOffsets(self, Name):
#         '-no docstring-'
#         #return OffsetType, OffsetPattern, OffsetPatternSF, Offset, pRetVal
#
#     def GetLoadWindPressure_1(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, MyType, cp, DistributionType, pRetVal
#
#     def GetLocalAxesAdvanced(self, Name):
#         '-no docstring-'
#         #return Active, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
#
#     def GetSpring(self, Name):
#         '-no docstring-'
#         #return NumberSprings, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, VecX, VecY, VecZ, CSys, Ang, pRetVal
#
#     def GetThickness(self, Name):
#         '-no docstring-'
#         #return ThicknessType, ThicknessPattern, ThicknessPatternSF, Thickness, pRetVal
#
#     def SetAutoMesh(self, Name, MeshType, N1, N2, MaxSize1, MaxSize2, PointOnEdgeFromLine, PointOnEdgeFromPoint, ExtendCookieCutLines, Rotation, MaxSizeGeneral, LocalAxesOnEdge, LocalAxesOnFace, RestraintsOnEdge, RestraintsOnFace, Group, SubMesh, SubMeshSize, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadWindPressure_1(self, Name, LoadPat, MyType, cp, DistributionType, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxesAdvanced(self, Name, Active, Plane2, PlVectOpt, PlCSys, ItemType):
#         '-no docstring-'
#         #return PlDir, PlPt, PlVect, pRetVal
#
#     def SetOffsets(self, Name, OffsetType, OffsetPattern, OffsetPatternSF, ItemType):
#         '-no docstring-'
#         #return Offset, pRetVal
#
#     def SetSpring(self, Name, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, Ang, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return Vec, pRetVal
#
#     def SetThickness(self, Name, ThicknessType, ThicknessPattern, ThicknessPatternSF, ItemType):
#         '-no docstring-'
#         #return Thickness, pRetVal
#
#     def DeleteLoadGravity(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadPorePressure(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadRotate(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadStrain(self, Name, LoadPat, Component, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadSurfacePressure(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadGravity(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadPorePressure(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLoadRotate(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Value, pRetVal
#
#     def GetLoadStrain(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Component, Value, PatternName, pRetVal
#
#     def GetLoadSurfacePressure(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Face, Value, PatternName, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadPorePressure(self, Name, LoadPat, Value, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadRotate(self, Name, LoadPat, Value, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadStrain(self, Name, LoadPat, Component, Value, Replace, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadSurfacePressure(self, Name, LoadPat, Face, Value, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMatTemp(self, Name, Temp, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eBridgeObjectType'
eBridgeObjectType_General = 0
eBridgeObjectType_Segmental = 1
eBridgeObjectType = c_int  # enum

cCaseModalRitz._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RitzMaxCyc'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetNumberModes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MaxModes'),
        (['in', 'out'], POINTER(c_int), 'MinModes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RitzMaxCyc'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetNumberModes',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MaxModes'),
        (['in'], c_int, 'MinModes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseModalRitz implementation
# class cCaseModalRitz_Impl(object):
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, RitzMaxCyc, TargetPar, pRetVal
#
#     def GetNumberModes(self, Name):
#         '-no docstring-'
#         #return MaxModes, MinModes, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, RitzMaxCyc, TargetPar, pRetVal
#
#     def SetNumberModes(self, Name, MaxModes, MinModes):
#         '-no docstring-'
#         #return pRetVal
#

cCaseStaticNonlinearStaged._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetGeometricNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NLGeomType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetHingeUnloading',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'UnloadType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetMaterialNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'TimeDepMatProp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetResultsSaved',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'StagedSaveOption'),
        (['in', 'out'], POINTER(c_int), 'StagedMinSteps'),
        (['in', 'out'], POINTER(c_int), 'StagedMinStepsTD'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MaxTotalSteps'),
        (['in', 'out'], POINTER(c_int), 'MaxFailedSubSteps'),
        (['in', 'out'], POINTER(c_int), 'MaxIterCS'),
        (['in', 'out'], POINTER(c_int), 'MaxIterNR'),
        (['in', 'out'], POINTER(c_double), 'TolConvD'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping'),
        (['in', 'out'], POINTER(c_double), 'TolEventD'),
        (['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter'),
        (['in', 'out'], POINTER(c_double), 'TolLineSearch'),
        (['in', 'out'], POINTER(c_double), 'LineSearchStepFact'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetStageData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Stage'),
        (['in', 'out'], POINTER(c_int), 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GroupName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetStageData_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Stage'),
        (['in', 'out'], POINTER(c_int), 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetStageDefinitions',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberStages'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetStageDefinitions_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberStages'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetTargetForceParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'TolConvF'),
        (['in', 'out'], POINTER(c_int), 'MaxIter'),
        (['in', 'out'], POINTER(c_double), 'AccelFact'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NoStop'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetGeometricNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NLGeomType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetHingeUnloading',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'UnloadType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetMaterialNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'TimeDepMatProp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetResultsSaved',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'StagedSaveOption'),
        (['in', 'optional'], c_int, 'StagedMinSteps', 1),
        (['in', 'optional'], c_int, 'StagedMinStepsTD', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MaxTotalSteps'),
        (['in'], c_int, 'MaxFailedSubSteps'),
        (['in'], c_int, 'MaxIterCS'),
        (['in'], c_int, 'MaxIterNR'),
        (['in'], c_double, 'TolConvD'),
        (['in'], VARIANT_BOOL, 'UseEventStepping'),
        (['in'], c_double, 'TolEventD'),
        (['in'], c_int, 'MaxLineSearchPerIter'),
        (['in'], c_double, 'TolLineSearch'),
        (['in'], c_double, 'LineSearchStepFact'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetStageData',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Stage'),
        (['in'], c_int, 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GroupName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetStageData_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Stage'),
        (['in'], c_int, 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetStageDefinitions',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberStages'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetStageDefinitions_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberStages'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetTargetForceParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'TolConvF'),
        (['in'], c_int, 'MaxIter'),
        (['in'], c_double, 'AccelFact'),
        (['in'], VARIANT_BOOL, 'NoStop'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetMassSource',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'mSource'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetMassSource',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'mSource'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetStageData_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Stage'),
        (['in', 'out'], POINTER(c_int), 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetStageDefinitions_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberStages'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetStageData_2',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Stage'),
        (['in'], c_int, 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetStageDefinitions_2',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberStages'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Output'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetValidOperations',
        (['in', 'out'], POINTER(c_int), 'NumberOperations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'OperationFlag'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseStaticNonlinearStaged implementation
# class cCaseStaticNonlinearStaged_Impl(object):
#     def GetGeometricNonlinearity(self, Name):
#         '-no docstring-'
#         #return NLGeomType, pRetVal
#
#     def GetHingeUnloading(self, Name):
#         '-no docstring-'
#         #return UnloadType, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetMaterialNonlinearity(self, Name):
#         '-no docstring-'
#         #return TimeDepMatProp, pRetVal
#
#     def GetResultsSaved(self, Name):
#         '-no docstring-'
#         #return StagedSaveOption, StagedMinSteps, StagedMinStepsTD, pRetVal
#
#     def GetSolControlParameters(self, Name):
#         '-no docstring-'
#         #return MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
#
#     def GetStageData(self, Name):
#         '-no docstring-'
#         #return Stage, NumberOperations, operation, GroupName, Age, LoadType, LoadName, SF, pRetVal
#
#     def GetStageData_1(self, Name):
#         '-no docstring-'
#         #return Stage, NumberOperations, operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
#
#     def GetStageDefinitions(self, Name):
#         '-no docstring-'
#         #return NumberStages, Duration, Comment, pRetVal
#
#     def GetStageDefinitions_1(self, Name):
#         '-no docstring-'
#         #return NumberStages, Duration, Output, OutputName, Comment, pRetVal
#
#     def GetTargetForceParameters(self, Name):
#         '-no docstring-'
#         #return TolConvF, MaxIter, AccelFact, NoStop, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGeometricNonlinearity(self, Name, NLGeomType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetHingeUnloading(self, Name, UnloadType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMaterialNonlinearity(self, Name, TimeDepMatProp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetResultsSaved(self, Name, StagedSaveOption, StagedMinSteps, StagedMinStepsTD):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSolControlParameters(self, Name, MaxTotalSteps, MaxFailedSubSteps, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetStageData(self, Name, Stage, NumberOperations):
#         '-no docstring-'
#         #return operation, GroupName, Age, LoadType, LoadName, SF, pRetVal
#
#     def SetStageData_1(self, Name, Stage, NumberOperations):
#         '-no docstring-'
#         #return operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
#
#     def SetStageDefinitions(self, Name, NumberStages):
#         '-no docstring-'
#         #return Duration, Comment, pRetVal
#
#     def SetStageDefinitions_1(self, Name, NumberStages):
#         '-no docstring-'
#         #return Duration, Output, OutputName, Comment, pRetVal
#
#     def SetTargetForceParameters(self, Name, TolConvF, MaxIter, AccelFact, NoStop):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetMassSource(self, Name):
#         '-no docstring-'
#         #return mSource, pRetVal
#
#     def SetMassSource(self, Name, mSource):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetStageData_2(self, Name):
#         '-no docstring-'
#         #return Stage, NumberOperations, operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
#
#     def GetStageDefinitions_2(self, Name):
#         '-no docstring-'
#         #return NumberStages, Duration, Output, OutputName, Comment, pRetVal
#
#     def SetStageData_2(self, Name, Stage, NumberOperations):
#         '-no docstring-'
#         #return operation, ObjectType, ObjectName, Age, MyType, MyName, SF, pRetVal
#
#     def SetStageDefinitions_2(self, Name, NumberStages):
#         '-no docstring-'
#         #return Duration, Output, OutputName, Comment, pRetVal
#
#     def GetValidOperations(self):
#         '-no docstring-'
#         #return NumberOperations, OperationFlag, pRetVal
#


class cPlaneElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6C2E2EFE-2436-4CD4-BF66-EBF051A0264A}')
    _idlflags_ = ['dual', 'oleautomation']


cPlaneElm._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLoadRotate',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetLoadUniform',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlaneName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetObj',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Obj'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPlaneElm implementation
# class cPlaneElm_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadGravity(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadPorePressure(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLoadRotate(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, Value, pRetVal
#
#     def GetLoadStrain(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, Component, Value, PatternName, pRetVal
#
#     def GetLoadSurfacePressure(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, Face, Value, PatternName, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, MyType, Value, PatternName, pRetVal
#
#     def GetLoadUniform(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PlaneName, LoadPat, CSys, Dir, Value, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetObj(self, Name):
#         '-no docstring-'
#         #return Obj, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return NumberPoints, Point, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#


class cCableObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{40DDC402-6732-4220-ADC7-50A3B95AC79B}')
    _idlflags_ = ['dual', 'oleautomation']


cCableObj._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddByCoord',
        (['in'], c_double, 'XI'),
        (['in'], c_double, 'YI'),
        (['in'], c_double, 'ZI'),
        (['in'], c_double, 'XJ'),
        (['in'], c_double, 'YJ'),
        (['in'], c_double, 'ZJ'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddByPoint',
        (['in'], BSTR, 'Point1'),
        (['in'], BSTR, 'Point2'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DeleteLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'DeleteLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'DeleteLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'DeleteLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'DeleteLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'DeleteLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'DeleteMass',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'DeleteModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetCableData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'CableType'),
        (['in', 'out'], POINTER(c_int), 'NumSegs'),
        (['in', 'out'], POINTER(c_double), 'Weight'),
        (['in', 'out'], POINTER(c_double), 'ProjectedLoad'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseDeformedGeom'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ModelUsingFrames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Parameter'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetCableGeometry',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Sag'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetInsertionPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'MassOverL'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'GetOutputStations',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'MaxSegSize'),
        (['in', 'out'], POINTER(c_int), 'MinSections'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtElementEnds'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtPointLoads'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Point1'),
        (['in', 'out'], POINTER(BSTR), 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetCableData',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'CableType'),
        (['in'], c_int, 'NumSegs'),
        (['in'], c_double, 'Weight'),
        (['in'], c_double, 'ProjectedLoad'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'UseDeformedGeom', False),
        (['in', 'optional'], VARIANT_BOOL, 'ModelUsingFrames', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetInsertionPoint',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'StiffTransform'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(c_double), 'D'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Strain'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(c_double), 'P'),
        (['in', 'out'], POINTER(c_double), 'Rd'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Val'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetMass',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'MassOverL'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Temp'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetOutputStations',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'MaxSegSize'),
        (['in'], c_int, 'MinSections'),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'NoOutPutAndDesignAtElementEnds',
            False
        ),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'NoOutPutAndDesignAtPointLoads',
            False
        ),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'GetLoadDistributedWithGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'SetLoadDistributedWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Value'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'DeleteLoadDistributedWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCableObj implementation
# class cCableObj_Impl(object):
#     def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def AddByPoint(self, Point1, Point2, PropName, UserName):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadDistributed(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadGravity(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadStrain(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTargetForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteMass(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteModifiers(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCableData(self, Name):
#         '-no docstring-'
#         #return CableType, NumSegs, Weight, ProjectedLoad, UseDeformedGeom, ModelUsingFrames, Parameter, pRetVal
#
#     def GetCableGeometry(self, Name, CSys):
#         '-no docstring-'
#         #return NumberPoints, X, Y, Z, Sag, Dist, Rd, pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return NElm, Elm, RDI, RDJ, pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetInsertionPoint(self, Name):
#         '-no docstring-'
#         #return StiffTransform, Offset1, Offset2, CSys, pRetVal
#
#     def GetLoadDeformation(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, U1, pRetVal
#
#     def GetLoadDistributed(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, MyType, CSys, Dir, Value, pRetVal
#
#     def GetLoadGravity(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadStrain(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, Strain, PatternName, pRetVal
#
#     def GetLoadTargetForce(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, P, Rd, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, Val, PatternName, pRetVal
#
#     def GetMass(self, Name):
#         '-no docstring-'
#         #return MassOverL, pRetVal
#
#     def GetMaterialOverwrite(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetOutputStations(self, Name):
#         '-no docstring-'
#         #return MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point1, Point2, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetCableData(self, Name, CableType, NumSegs, Weight, ProjectedLoad, Value, UseDeformedGeom, ModelUsingFrames):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInsertionPoint(self, Name, StiffTransform, CSys, ItemType):
#         '-no docstring-'
#         #return Offset1, Offset2, pRetVal
#
#     def SetLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return D, pRetVal
#
#     def SetLoadDistributed(self, Name, LoadPat, MyType, Dir, Value, CSys, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadStrain(self, Name, LoadPat, Strain, Replace, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTargetForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return P, Rd, pRetVal
#
#     def SetLoadTemperature(self, Name, LoadPat, Val, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMass(self, Name, MassOverL, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMaterialOverwrite(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMatTemp(self, Name, Temp, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModifiers(self, Name, ItemType):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOutputStations(self, Name, MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetProperty(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadDistributedWithGUID(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, CableName, LoadPat, MyType, CSys, Dir, Value, GUID, pRetVal
#
#     def SetLoadDistributedWithGUID(self, Name, LoadPat, MyType, Dir, Value, CSys, Replace):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def DeleteLoadDistributedWithGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#


class cConstraint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5F9B968E-B35C-4A02-9CF5-6114E6EA1285}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eConstraintAxis'
eConstraintAxis_X = 1
eConstraintAxis_Y = 2
eConstraintAxis_Z = 3
eConstraintAxis_AutoAxis = 4
eConstraintAxis = c_int  # enum
# values for enumeration 'eConstraintType'
eConstraintType_Body = 1
eConstraintType_Diaphragm = 2
eConstraintType_Plate = 3
eConstraintType_Rod = 4
eConstraintType_Beam = 5
eConstraintType_Equal = 6
eConstraintType_Local = 7
eConstraintType_Weld = 8
eConstraintType_Line = 13
eConstraintType = c_int  # enum

cConstraint._methods_ = [
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetDiaphragm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eConstraintAxis), 'Axis'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetDiaphragm',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eConstraintAxis, 'Axis', 4),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['in', 'optional'], eConstraintType, 'ConstraintType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetBeam',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eConstraintAxis), 'Axis'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetBody',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetConstraintType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eConstraintType), 'ConstraintType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetEqual',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetLine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetLocal',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetPlate',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eConstraintAxis), 'Axis'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetRod',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eConstraintAxis), 'Axis'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetSpecialRigidDiaphragmList',
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetWeld',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'out'], POINTER(c_double), 'Tolerance'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetBeam',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eConstraintAxis, 'Axis', 4),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetBody',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetEqual',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetLine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetLocal',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetPlate',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eConstraintAxis, 'Axis', 4),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetRod',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eConstraintAxis, 'Axis', 4),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'SetWeld',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in'], c_double, 'Tolerance'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cConstraint implementation
# class cConstraint_Impl(object):
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDiaphragm(self, Name):
#         '-no docstring-'
#         #return Axis, CSys, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetDiaphragm(self, Name, Axis, CSys):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, ConstraintType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetBeam(self, Name):
#         '-no docstring-'
#         #return Axis, CSys, pRetVal
#
#     def GetBody(self, Name):
#         '-no docstring-'
#         #return Value, CSys, pRetVal
#
#     def GetConstraintType(self, Name):
#         '-no docstring-'
#         #return ConstraintType, pRetVal
#
#     def GetEqual(self, Name):
#         '-no docstring-'
#         #return Value, CSys, pRetVal
#
#     def GetLine(self, Name):
#         '-no docstring-'
#         #return Value, CSys, pRetVal
#
#     def GetLocal(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetPlate(self, Name):
#         '-no docstring-'
#         #return Axis, CSys, pRetVal
#
#     def GetRod(self, Name):
#         '-no docstring-'
#         #return Axis, CSys, pRetVal
#
#     def GetSpecialRigidDiaphragmList(self):
#         '-no docstring-'
#         #return Num, Diaph, pRetVal
#
#     def GetWeld(self, Name):
#         '-no docstring-'
#         #return Value, Tolerance, CSys, pRetVal
#
#     def SetBeam(self, Name, Axis, CSys):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBody(self, Name, CSys):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetEqual(self, Name, CSys):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetLine(self, Name, CSys):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetLocal(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetPlate(self, Name, Axis, CSys):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetRod(self, Name, Axis, CSys):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetWeld(self, Name, Tolerance, CSys):
#         '-no docstring-'
#         #return Value, pRetVal
#
# values for enumeration 'eMatTypeAluminum'
eMatTypeAluminum_SubType_6061_T6 = 1
eMatTypeAluminum_SubType_6063_T6 = 2
eMatTypeAluminum_SubType_5052_H34 = 3
eMatTypeAluminum = c_int  # enum


class cPluginCallback(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{38CE749F-B62B-4339-B3C8-B3C2D928631E}')
    _idlflags_ = ['dual', 'oleautomation']


cPluginCallback._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'ErrorFlag',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Finish',
        (['in'], c_int, 'iVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'Finished',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
]

################################################################
# code template for cPluginCallback implementation
# class cPluginCallback_Impl(object):
#     @property
#     def ErrorFlag(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Finish(self, iVal):
#         '-no docstring-'
#         #return 
#
#     @property
#     def Finished(self):
#         '-no docstring-'
#         #return pRetVal
#


class cDStSP16_13330_2011(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7D1A416B-FE56-4D8F-9D0D-86B47DBA1150}')
    _idlflags_ = ['dual', 'oleautomation']


cDStSP16_13330_2011._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStSP16_13330_2011 implementation
# class cDStSP16_13330_2011_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cPropLink(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E4804F82-E17B-42CD-A839-FAA8E19823A4}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eLinkPropType'
eLinkPropType_Linear = 1
eLinkPropType_Damper = 2
eLinkPropType_Gap = 3
eLinkPropType_Hook = 4
eLinkPropType_PlasticWen = 5
eLinkPropType_Isolator1 = 6
eLinkPropType_Isolator2 = 7
eLinkPropType_MultilinearElastic = 8
eLinkPropType_MultilinearPlastic = 9
eLinkPropType_Isolator3 = 10
eLinkPropType_Isolator4 = 11
eLinkPropType_DamperLinearExponential = 12
eLinkPropType_DamperBilinear = 13
eLinkPropType_DamperFrictionSpring = 14
eLinkPropType = c_int  # enum

cPropLink._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['in', 'optional'], eLinkPropType, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetDamper',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetFrictionIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetGap',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetHook',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetLinear',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'KeCoupled'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'CeCoupled'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetMultiLinearElastic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetMultiLinearPlastic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetMultiLinearPoints',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DOF'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'A1'),
        (['in', 'out'], POINTER(c_double), 'A2'),
        (['in', 'out'], POINTER(c_double), 'B1'),
        (['in', 'out'], POINTER(c_double), 'B2'),
        (['in', 'out'], POINTER(c_double), 'Eta'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], eLinkPropType, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetPDelta',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetPlasticWen',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Exp'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetRubberIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetSpringData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'DefinedForThisLength'),
        (['in', 'out'], POINTER(c_double), 'DefinedForThisArea'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetTCFrictionIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlowT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FastT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RateT'),
        (['in', 'out'], POINTER(c_double), 'Kt'),
        (['in', 'out'], POINTER(c_double), 'Dis'),
        (['in', 'out'], POINTER(c_double), 'Dist'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eLinkPropType), 'PropType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetWeightAndMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'M'),
        (['in', 'out'], POINTER(c_double), 'R1'),
        (['in', 'out'], POINTER(c_double), 'R2'),
        (['in', 'out'], POINTER(c_double), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetDamper',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetFrictionIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in'], c_double, 'Damping'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetGap',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetHook',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dis'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'SetLinear',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], VARIANT_BOOL, 'KeCoupled', False),
        (['in', 'optional'], VARIANT_BOOL, 'CeCoupled', False),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'SetMultiLinearElastic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetMultiLinearPlastic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetMultiLinearPoints',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DOF'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'optional'], c_int, 'MyType', 1),
        (['in', 'optional'], c_double, 'A1', 0.0),
        (['in', 'optional'], c_double, 'A2', 0.0),
        (['in', 'optional'], c_double, 'B1', 0.0),
        (['in', 'optional'], c_double, 'B2', 0.0),
        (['in', 'optional'], c_double, 'Eta', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetPDelta',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetPlasticWen',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Exp'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetRubberIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Yield'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetSpringData',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'DefinedForThisLength'),
        (['in'], c_double, 'DefinedForThisArea'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetTCFrictionIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SlowT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FastT'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RateT'),
        (['in'], c_double, 'Kt'),
        (['in'], c_double, 'Dis'),
        (['in'], c_double, 'Dist'),
        (['in'], c_double, 'Damping'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetWeightAndMass',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'W'),
        (['in'], c_double, 'M'),
        (['in'], c_double, 'R1'),
        (['in'], c_double, 'R2'),
        (['in'], c_double, 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'GetDamperBilinear',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'GetDamperFrictionSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'u0'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Us'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Direction'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetDamperBilinear',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetDamperFrictionSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'u0'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Us'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Direction'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'GetDamperLinearExponential',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'GetTriplePendulumIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(c_double), 'K1'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StopDist'),
        (['in', 'out'], POINTER(c_double), 'HeightOut'),
        (['in', 'out'], POINTER(c_double), 'HeightIn'),
        (['in', 'out'], POINTER(c_double), 'DJ2'),
        (['in', 'out'], POINTER(c_double), 'DJ3'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetDamperLinearExponential',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CExp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ForceLimit'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetTriplePendulumIsolator',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Fixed'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ke'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ce'),
        (['in'], c_double, 'K1'),
        (['in'], c_double, 'Damping'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Slow'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Fast'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StopDist'),
        (['in'], c_double, 'HeightOut'),
        (['in'], c_double, 'HeightIn'),
        (['in'], c_double, 'DJ2'),
        (['in'], c_double, 'DJ3'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropLink implementation
# class cPropLink_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, PropType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDamper(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetFrictionIsolator(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, Damping, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetGap(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetHook(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetLinear(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Ke, Ce, DJ2, DJ3, KeCoupled, CeCoupled, Notes, GUID, pRetVal
#
#     def GetMultiLinearElastic(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetMultiLinearPlastic(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetMultiLinearPoints(self, Name, DOF):
#         '-no docstring-'
#         #return NumberPoints, F, D, MyType, A1, A2, B1, B2, Eta, pRetVal
#
#     def GetNameList(self, PropType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetPDelta(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetPlasticWen(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, Exp, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetRubberIsolator(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetSpringData(self, Name):
#         '-no docstring-'
#         #return DefinedForThisLength, DefinedForThisArea, pRetVal
#
#     def GetTCFrictionIsolator(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, SlowT, FastT, RateT, Kt, Dis, Dist, Damping, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return PropType, pRetVal
#
#     def GetWeightAndMass(self, Name):
#         '-no docstring-'
#         #return W, M, R1, R2, R3, pRetVal
#
#     def SetDamper(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, pRetVal
#
#     def SetFrictionIsolator(self, Name, Damping, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, pRetVal
#
#     def SetGap(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, pRetVal
#
#     def SetHook(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Dis, pRetVal
#
#     def SetLinear(self, Name, DJ2, DJ3, KeCoupled, CeCoupled, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Ke, Ce, pRetVal
#
#     def SetMultiLinearElastic(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, pRetVal
#
#     def SetMultiLinearPlastic(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, pRetVal
#
#     def SetMultiLinearPoints(self, Name, DOF, NumberPoints, MyType, A1, A2, B1, B2, Eta):
#         '-no docstring-'
#         #return F, D, pRetVal
#
#     def SetPDelta(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetPlasticWen(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, Exp, pRetVal
#
#     def SetRubberIsolator(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Yield, Ratio, pRetVal
#
#     def SetSpringData(self, Name, DefinedForThisLength, DefinedForThisArea):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTCFrictionIsolator(self, Name, Kt, Dis, Dist, Damping, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, SlowT, FastT, RateT, pRetVal
#
#     def SetWeightAndMass(self, Name, W, M, R1, R2, R3):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDamperBilinear(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CY, ForceLimit, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetDamperFrictionSpring(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, K1, K2, u0, Us, Direction, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def SetDamperBilinear(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CY, ForceLimit, pRetVal
#
#     def SetDamperFrictionSpring(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, K1, K2, u0, Us, Direction, pRetVal
#
#     def GetDamperLinearExponential(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, ForceLimit, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def GetTriplePendulumIsolator(self, Name):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K1, Damping, K, Slow, Fast, Rate, Radius, StopDist, HeightOut, HeightIn, DJ2, DJ3, Notes, GUID, pRetVal
#
#     def SetDamperLinearExponential(self, Name, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, C, CExp, ForceLimit, pRetVal
#
#     def SetTriplePendulumIsolator(self, Name, K1, Damping, HeightOut, HeightIn, DJ2, DJ3, Notes, GUID):
#         '-no docstring-'
#         #return DOF, Fixed, Nonlinear, Ke, Ce, K, Slow, Fast, Rate, Radius, StopDist, pRetVal
#
# values for enumeration 'eBridgeObjectUserPointType'
eBridgeObjectUserPointType_General = 0
eBridgeObjectUserPointType_SegmentalTendon = 1
eBridgeObjectUserPointType = c_int  # enum


class cFrameObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F2956B7C-C2BC-4C61-B999-14A65D402967}')
    _idlflags_ = ['dual', 'oleautomation']


cFrameObj._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddByCoord',
        (['in'], c_double, 'XI'),
        (['in'], c_double, 'YI'),
        (['in'], c_double, 'ZI'),
        (['in'], c_double, 'XJ'),
        (['in'], c_double, 'YJ'),
        (['in'], c_double, 'ZJ'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddByPoint',
        (['in'], BSTR, 'Point1'),
        (['in'], BSTR, 'Point2'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['in', 'optional'], BSTR, 'MyType', 'All'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'DeleteLateralBracing',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], c_int, 'MyType', 3),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'DeleteLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'DeleteLoadPoint',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'DeleteLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'DeleteMass',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'DeleteModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'DeleteSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetDesignProcedure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetEndLengthOffset',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoOffset'),
        (['in', 'out'], POINTER(c_double), 'Length1'),
        (['in', 'out'], POINTER(c_double), 'Length2'),
        (['in', 'out'], POINTER(c_double), 'RZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetHingeAssigns',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberHinges'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'HingeNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Prop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Behavior'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Source'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(122)],
        HRESULT,
        'GetHingeAssigns_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberHinges'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'HingeNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Prop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Behavior'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Source'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(eHingeLocationType)), 'LocType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AD'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetInsertionPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'CardinalPoint'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetLateralBracing',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Loc'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetLoadPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'GetMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'MassOverL'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'GetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'GetOutputStations',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'MaxSegSize'),
        (['in', 'out'], POINTER(c_int), 'MinSections'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtElementEnds'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NoOutPutAndDesignAtPointLoads'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Point1'),
        (['in', 'out'], POINTER(BSTR), 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'GetReleases',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'GetSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(BSTR), 'SAuto'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'GetSectionNonPrismatic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_double), 'SVarTotalLength'),
        (['in', 'out'], POINTER(c_double), 'SVarRelStartLoc'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'GetTCLimits',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists'),
        (['in', 'out'], POINTER(c_double), 'LimitCompression'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists'),
        (['in', 'out'], POINTER(c_double), 'LimitTension'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(71)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetDesignProcedure',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetEndLengthOffset',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'AutoOffset'),
        (['in'], c_double, 'Length1'),
        (['in'], c_double, 'Length2'),
        (['in'], c_double, 'RZ'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'SetInsertionPoint',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'CardinalPoint'),
        (['in'], VARIANT_BOOL, 'Mirror2'),
        (['in'], VARIANT_BOOL, 'StiffTransform'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'SetLateralBracing',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Loc'),
        (['in'], c_double, 'MyDist1'),
        (['in'], c_double, 'MyDist2'),
        (['in', 'optional'], VARIANT_BOOL, 'RelDist', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'SetLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Dist1'),
        (['in'], c_double, 'Dist2'),
        (['in'], c_double, 'Val1'),
        (['in'], c_double, 'Val2'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'RelDist', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'SetLoadPoint',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Dist'),
        (['in'], c_double, 'Val'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'RelDist', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'SetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'Val'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(58)],
        HRESULT,
        'SetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Ang'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(60)],
        HRESULT,
        'SetMass',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'MassOverL'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(61)],
        HRESULT,
        'SetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(62)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'SetOutputStations',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'MaxSegSize'),
        (['in'], c_int, 'MinSections'),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'NoOutPutAndDesignAtElementEnds',
            False
        ),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'NoOutPutAndDesignAtPointLoads',
            False
        ),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'SetReleases',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'SetSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], c_double, 'SVarRelStartLoc', 0.0),
        (['in', 'optional'], c_double, 'SVarTotalLength', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69)],
        HRESULT,
        'SetTCLimits',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'LimitCompressionExists'),
        (['in'], c_double, 'LimitCompression'),
        (['in'], VARIANT_BOOL, 'LimitTensionExists'),
        (['in'], c_double, 'LimitTension'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(116)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DeleteFireproofing',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetEndSkew',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'SkewI'),
        (['in', 'out'], POINTER(c_double), 'SkewJ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetFireproofing',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Perimeter'),
        (['in', 'out'], POINTER(c_double), 'Density'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Tf'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetEndSkew',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'SkewI'),
        (['in'], c_double, 'SkewJ'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetFireproofing',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Perimeter'),
        (['in'], c_double, 'Density'),
        (['in'], VARIANT_BOOL, 'Tf'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetAutoMesh',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoMesh'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoMeshAtPoints'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoMeshAtLines'),
        (['in', 'out'], POINTER(c_int), 'NumSegs'),
        (['in', 'out'], POINTER(c_double), 'AutoMeshMaxLength'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetCurved',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumSegs'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(104)],
        HRESULT,
        'GetCurved_1',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'GZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumSegs'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetAutoMesh',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'AutoMesh'),
        (['in'], VARIANT_BOOL, 'AutoMeshAtPoints'),
        (['in'], VARIANT_BOOL, 'AutoMeshAtLines'),
        (['in'], c_int, 'NumSegs'),
        (['in'], c_double, 'AutoMeshMaxLength'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetCurved',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in'], BSTR, 'PointName'),
        (['in'], c_double, 'Radius'),
        (['in'], c_int, 'NumSegs'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'GetSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberSprings'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SimpleSpringType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpringLocalOneType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Plane23Angle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['in', 'out'], POINTER(c_int), 'Plane2'),
        (['in', 'out'], POINTER(c_int), 'PlVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(59)],
        HRESULT,
        'SetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Active'),
        (['in'], c_int, 'Plane2'),
        (['in'], c_int, 'PlVectOpt'),
        (['in'], BSTR, 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67)],
        HRESULT,
        'SetSpring',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'S'),
        (['in'], c_int, 'SimpleSpringType'),
        (['in'], BSTR, 'LinkProp'),
        (['in'], c_int, 'SpringLocalOneType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Plane23Angle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vec'),
        (['in'], c_double, 'Ang'),
        (['in'], VARIANT_BOOL, 'Replace'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68)],
        HRESULT,
        'SetStraight',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(72)],
        HRESULT,
        'DeleteLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(73)],
        HRESULT,
        'DeleteLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(74)],
        HRESULT,
        'DeleteLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'DOF'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(75)],
        HRESULT,
        'DeleteLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(76)],
        HRESULT,
        'DeletePDeltaForce',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(77)],
        HRESULT,
        'GetDAMModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'EAModifier'),
        (['in', 'out'], POINTER(c_double), 'EIModifier'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(78)],
        HRESULT,
        'GetFireproofing_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Perimeter'),
        (['in', 'out'], POINTER(c_double), 'Density'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Tf'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeInSelfWeight'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeInGravityLoads'),
        (['in', 'out'], POINTER(BSTR), 'IncludeInThisLoadPattern'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(79)],
        HRESULT,
        'GetInsertionPoint_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'CardinalPoint'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Mirror3'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'StiffTransform'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(80)],
        HRESULT,
        'GetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(81)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(82)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(83)],
        HRESULT,
        'GetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(84)],
        HRESULT,
        'GetLoadTransfer',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Val'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(85)],
        HRESULT,
        'GetPDeltaForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberForces'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PDeltaForce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(86)],
        HRESULT,
        'SetFireproofing_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Perimeter'),
        (['in'], c_double, 'Density'),
        (['in'], VARIANT_BOOL, 'Tf'),
        (['in'], VARIANT_BOOL, 'IncludeInSelfWeight'),
        (['in'], VARIANT_BOOL, 'IncludeInGravityLoads'),
        (['in', 'optional'], BSTR, 'IncludeInThisLoadPattern', 'None'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(87)],
        HRESULT,
        'SetInsertionPoint_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'CardinalPoint'),
        (['in'], VARIANT_BOOL, 'Mirror2'),
        (['in'], VARIANT_BOOL, 'Mirror3'),
        (['in'], VARIANT_BOOL, 'StiffTransform'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(88)],
        HRESULT,
        'SetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(89)],
        HRESULT,
        'SetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(90)],
        HRESULT,
        'SetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'DOF'),
        (['in'], c_double, 'Val'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(91)],
        HRESULT,
        'SetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Rd'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(92)],
        HRESULT,
        'SetLoadTransfer',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Val'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(93)],
        HRESULT,
        'SetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Temp'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(94)],
        HRESULT,
        'SetPDeltaForce',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'PDeltaForce'),
        (['in'], c_int, 'Dir'),
        (['in'], VARIANT_BOOL, 'Replace'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(98)],
        HRESULT,
        'GetLoadDistributedWithGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(99)],
        HRESULT,
        'SetLoadDistributedWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Dist1'),
        (['in'], c_double, 'Dist2'),
        (['in'], c_double, 'Val1'),
        (['in'], c_double, 'Val2'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'RelDist', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(100)],
        HRESULT,
        'DeleteLoadDistributedWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(101)],
        HRESULT,
        'GetLoadPointWithGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(102)],
        HRESULT,
        'SetLoadPointWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'MyType'),
        (['in'], c_int, 'Dir'),
        (['in'], c_double, 'Dist'),
        (['in'], c_double, 'Val'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'RelDist', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(103)],
        HRESULT,
        'DeleteLoadPointWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cFrameObj implementation
# class cFrameObj_Impl(object):
#     def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def AddByPoint(self, Point1, Point2, PropName, UserName):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, MyType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLateralBracing(self, Name, MyType, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadDistributed(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadPoint(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteMass(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteModifiers(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteSpring(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDesignProcedure(self, Name):
#         '-no docstring-'
#         #return MyType, pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return NElm, Elm, RDI, RDJ, pRetVal
#
#     def GetEndLengthOffset(self, Name):
#         '-no docstring-'
#         #return AutoOffset, Length1, Length2, RZ, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetHingeAssigns(self, Name):
#         '-no docstring-'
#         #return NumberHinges, HingeNum, Prop, MyType, Behavior, Source, Rd, pRetVal
#
#     def GetHingeAssigns_1(self, Name):
#         '-no docstring-'
#         #return NumberHinges, HingeNum, Prop, MyType, Behavior, Source, LocType, Rd, AD, pRetVal
#
#     def GetInsertionPoint(self, Name):
#         '-no docstring-'
#         #return CardinalPoint, Mirror2, StiffTransform, Offset1, Offset2, CSys, pRetVal
#
#     def GetLateralBracing(self, Name):
#         '-no docstring-'
#         #return NumberItems, FrameName, MyType, Loc, RD1, RD2, Dist1, Dist2, pRetVal
#
#     def GetLoadDistributed(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, pRetVal
#
#     def GetLoadPoint(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, MyType, Val, PatternName, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, Advanced, pRetVal
#
#     def GetMass(self, Name):
#         '-no docstring-'
#         #return MassOverL, pRetVal
#
#     def GetMaterialOverwrite(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetOutputStations(self, Name):
#         '-no docstring-'
#         #return MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point1, Point2, pRetVal
#
#     def GetReleases(self, Name):
#         '-no docstring-'
#         #return II, JJ, StartValue, EndValue, pRetVal
#
#     def GetSection(self, Name):
#         '-no docstring-'
#         #return PropName, SAuto, pRetVal
#
#     def GetSectionNonPrismatic(self, Name):
#         '-no docstring-'
#         #return PropName, SVarTotalLength, SVarRelStartLoc, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetTCLimits(self, Name):
#         '-no docstring-'
#         #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return MyType, pRetVal
#
#     def SetDesignProcedure(self, Name, MyType, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEndLengthOffset(self, Name, AutoOffset, Length1, Length2, RZ, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInsertionPoint(self, Name, CardinalPoint, Mirror2, StiffTransform, CSys, ItemType):
#         '-no docstring-'
#         #return Offset1, Offset2, pRetVal
#
#     def SetLateralBracing(self, Name, MyType, Loc, MyDist1, MyDist2, RelDist, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadDistributed(self, Name, LoadPat, MyType, Dir, Dist1, Dist2, Val1, Val2, CSys, RelDist, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadPoint(self, Name, LoadPat, MyType, Dir, Dist, Val, CSys, RelDist, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTemperature(self, Name, LoadPat, MyType, Val, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxes(self, Name, Ang, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMass(self, Name, MassOverL, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMaterialOverwrite(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModifiers(self, Name, ItemType):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOutputStations(self, Name, MyType, MaxSegSize, MinSections, NoOutPutAndDesignAtElementEnds, NoOutPutAndDesignAtPointLoads, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetReleases(self, Name, ItemType):
#         '-no docstring-'
#         #return II, JJ, StartValue, EndValue, pRetVal
#
#     def SetSection(self, Name, PropName, ItemType, SVarRelStartLoc, SVarTotalLength):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTCLimits(self, Name, LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def DeleteFireproofing(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetEndSkew(self, Name):
#         '-no docstring-'
#         #return SkewI, SkewJ, pRetVal
#
#     def GetFireproofing(self, Name):
#         '-no docstring-'
#         #return MyType, Thickness, Perimeter, Density, Tf, pRetVal
#
#     def SetEndSkew(self, Name, SkewI, SkewJ, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetFireproofing(self, Name, MyType, Thickness, Perimeter, Density, Tf, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAutoMesh(self, Name):
#         '-no docstring-'
#         #return AutoMesh, AutoMeshAtPoints, AutoMeshAtLines, NumSegs, AutoMeshMaxLength, pRetVal
#
#     def GetCurved(self):
#         '-no docstring-'
#         #return NumberItems, MyType, GX, GY, GZ, PointName, Radius, NumSegs, pRetVal
#
#     def GetCurved_1(self):
#         '-no docstring-'
#         #return NumberItems, MyName, MyType, GX, GY, GZ, PointName, Radius, NumSegs, pRetVal
#
#     def SetAutoMesh(self, Name, AutoMesh, AutoMeshAtPoints, AutoMeshAtLines, NumSegs, AutoMeshMaxLength, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCurved(self, Name, MyType, X, Y, Z, PointName, Radius, NumSegs, CSys):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSpring(self, Name):
#         '-no docstring-'
#         #return NumberSprings, MyType, S, SimpleSpringType, LinkProp, SpringLocalOneType, Dir, Plane23Angle, VecX, VecY, VecZ, CSys, Ang, pRetVal
#
#     def GetLocalAxesAdvanced(self, Name):
#         '-no docstring-'
#         #return Active, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
#
#     def SetLocalAxesAdvanced(self, Name, Active, Plane2, PlVectOpt, PlCSys, ItemType):
#         '-no docstring-'
#         #return PlDir, PlPt, PlVect, pRetVal
#
#     def SetSpring(self, Name, MyType, S, SimpleSpringType, LinkProp, SpringLocalOneType, Dir, Plane23Angle, Ang, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return Vec, pRetVal
#
#     def SetStraight(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadGravity(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadStrain(self, Name, LoadPat, DOF, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTargetForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeletePDeltaForce(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDAMModifiers(self, Name):
#         '-no docstring-'
#         #return EAModifier, EIModifier, pRetVal
#
#     def GetFireproofing_1(self, Name):
#         '-no docstring-'
#         #return MyType, Thickness, Perimeter, Density, Tf, IncludeInSelfWeight, IncludeInGravityLoads, IncludeInThisLoadPattern, pRetVal
#
#     def GetInsertionPoint_1(self, Name):
#         '-no docstring-'
#         #return CardinalPoint, Mirror2, Mirror3, StiffTransform, Offset1, Offset2, CSys, pRetVal
#
#     def GetLoadDeformation(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetLoadGravity(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadStrain(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, DOF, Val, PatternName, pRetVal
#
#     def GetLoadTargetForce(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
#
#     def GetLoadTransfer(self, Name):
#         '-no docstring-'
#         #return Val, pRetVal
#
#     def GetPDeltaForce(self, Name):
#         '-no docstring-'
#         #return NumberForces, PDeltaForce, Dir, CSys, pRetVal
#
#     def SetFireproofing_1(self, Name, MyType, Thickness, Perimeter, Density, Tf, IncludeInSelfWeight, IncludeInGravityLoads, IncludeInThisLoadPattern, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInsertionPoint_1(self, Name, CardinalPoint, Mirror2, Mirror3, StiffTransform, CSys, ItemType):
#         '-no docstring-'
#         #return Offset1, Offset2, pRetVal
#
#     def SetLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return DOF, D, pRetVal
#
#     def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadStrain(self, Name, LoadPat, DOF, Val, Replace, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTargetForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return DOF, F, Rd, pRetVal
#
#     def SetLoadTransfer(self, Name, Val, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMatTemp(self, Name, Temp, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPDeltaForce(self, Name, PDeltaForce, Dir, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadDistributedWithGUID(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, GUID, pRetVal
#
#     def SetLoadDistributedWithGUID(self, Name, LoadPat, MyType, Dir, Dist1, Dist2, Val1, Val2, CSys, RelDist, Replace):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def DeleteLoadDistributedWithGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadPointWithGUID(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, GUID, pRetVal
#
#     def SetLoadPointWithGUID(self, Name, LoadPat, MyType, Dir, Dist, Val, CSys, RelDist, Replace):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def DeleteLoadPointWithGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#

cCaseDirectHistoryNonlinear._methods_ = [
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_double), 'DampA'),
        (['in', 'out'], POINTER(c_double), 'DampB'),
        (['in', 'out'], POINTER(c_double), 'DampF1'),
        (['in', 'out'], POINTER(c_double), 'DampF2'),
        (['in', 'out'], POINTER(c_double), 'DampD1'),
        (['in', 'out'], POINTER(c_double), 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetGeometricNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NLGeomType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'DTMax'),
        (['in', 'out'], POINTER(c_double), 'DTMin'),
        (['in', 'out'], POINTER(c_int), 'MaxIterCS'),
        (['in', 'out'], POINTER(c_int), 'MaxIterNR'),
        (['in', 'out'], POINTER(c_double), 'TolConvD'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseEventStepping'),
        (['in', 'out'], POINTER(c_double), 'TolEventD'),
        (['in', 'out'], POINTER(c_int), 'MaxLineSearchPerIter'),
        (['in', 'out'], POINTER(c_double), 'TolLineSearch'),
        (['in', 'out'], POINTER(c_double), 'LineSearchStepFact'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetTimeIntegration',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'IntegrationType'),
        (['in', 'out'], POINTER(c_double), 'Alpha'),
        (['in', 'out'], POINTER(c_double), 'Beta'),
        (['in', 'out'], POINTER(c_double), 'Gamma'),
        (['in', 'out'], POINTER(c_double), 'Theta'),
        (['in', 'out'], POINTER(c_double), 'M'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NStep'),
        (['in', 'out'], POINTER(c_double), 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_double, 'DampA'),
        (['in'], c_double, 'DampB'),
        (['in'], c_double, 'DampF1'),
        (['in'], c_double, 'DampF2'),
        (['in'], c_double, 'DampD1'),
        (['in'], c_double, 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetGeometricNonlinearity',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NLGeomType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'DTMax'),
        (['in'], c_double, 'DTMin'),
        (['in'], c_int, 'MaxIterCS'),
        (['in'], c_int, 'MaxIterNR'),
        (['in'], c_double, 'TolConvD'),
        (['in'], VARIANT_BOOL, 'UseEventStepping'),
        (['in'], c_double, 'TolEventD'),
        (['in'], c_int, 'MaxLineSearchPerIter'),
        (['in'], c_double, 'TolLineSearch'),
        (['in'], c_double, 'LineSearchStepFact'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetTimeIntegration',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'IntegrationType'),
        (['in'], c_double, 'Alpha'),
        (['in'], c_double, 'Beta'),
        (['in'], c_double, 'Gamma'),
        (['in'], c_double, 'Theta'),
        (['in', 'optional'], c_double, 'M', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NStep'),
        (['in'], c_double, 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetMassSource',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'mSource'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetMassSource',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'mSource'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseDirectHistoryNonlinear implementation
# class cCaseDirectHistoryNonlinear_Impl(object):
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def GetDampProportional(self, Name):
#         '-no docstring-'
#         #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
#
#     def GetGeometricNonlinearity(self, Name):
#         '-no docstring-'
#         #return NLGeomType, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetSolControlParameters(self, Name):
#         '-no docstring-'
#         #return DTMax, DTMin, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact, pRetVal
#
#     def GetTimeIntegration(self, Name):
#         '-no docstring-'
#         #return IntegrationType, Alpha, Beta, Gamma, Theta, M, pRetVal
#
#     def GetTimeStep(self, Name):
#         '-no docstring-'
#         #return NStep, Dt, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGeometricNonlinearity(self, Name, NLGeomType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def SetSolControlParameters(self, Name, DTMax, DTMin, MaxIterCS, MaxIterNR, TolConvD, UseEventStepping, TolEventD, MaxLineSearchPerIter, TolLineSearch, LineSearchStepFact):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTimeIntegration(self, Name, IntegrationType, Alpha, Beta, Gamma, Theta, M):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTimeStep(self, Name, NStep, Dt):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetMassSource(self, Name):
#         '-no docstring-'
#         #return mSource, pRetVal
#
#     def SetMassSource(self, Name, mSource):
#         '-no docstring-'
#         #return pRetVal
#


class cNamedDisplay(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2485873A-DC6D-417B-A29E-B159B740D892}')
    _idlflags_ = ['dual', 'oleautomation']


cNamedDisplay._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SaveToFile',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FilePath'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cNamedDisplay implementation
# class cNamedDisplay_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SaveToFile(self, Name, FilePath):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eBridgeResponsePart'
eBridgeResponsePart_Entire_Bridge_Section = 1
eBridgeResponsePart_Girder = 2
eBridgeResponsePart_Beam = 3
eBridgeResponsePart_Web = 4
eBridgeResponsePart_Slab = 5
eBridgeResponsePart_All_Girders = 6
eBridgeResponsePart_All_Beams = 7
eBridgeResponsePart_All_Webs = 8
eBridgeResponsePart_All_Slabs = 9
eBridgeResponsePart_Entire_Section_Plus_All_Girders = 10
eBridgeResponsePart = c_int  # enum
# values for enumeration 'eBridgeResponseForce'
eBridgeResponseForce_Axial_Force_P = 1
eBridgeResponseForce_Shear_Vertical_V2 = 2
eBridgeResponseForce_Shear_Horizontal_V3 = 3
eBridgeResponseForce_Torsion_T = 4
eBridgeResponseForce_Moment_About_Vertical_Axis_M2 = 5
eBridgeResponseForce_Moment_About_Horizontal_Axis_M3 = 6
eBridgeResponseForce = c_int  # enum
# values for enumeration 'eSuperObjectClass'
eSuperObjectClass_None = 0
eSuperObjectClass_SuperObject = 1
eSuperObjectClass_Foundation = 2
eSuperObjectClass_BridgeFoundation = 3
eSuperObjectClass = c_int  # enum

cDCoCSA_A23_3_04._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoCSA_A23_3_04 implementation
# class cDCoCSA_A23_3_04_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCaseHyperStatic._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetBaseCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'HyperStaticCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'SetBaseCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'HyperStaticCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseHyperStatic implementation
# class cCaseHyperStatic_Impl(object):
#     def GetBaseCase(self, Name):
#         '-no docstring-'
#         #return HyperStaticCase, pRetVal
#
#     def SetBaseCase(self, Name, HyperStaticCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#


class cAnalysisResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1C3E65A9-7B5F-425C-8641-41BC0B0D301B}')
    _idlflags_ = ['dual', 'oleautomation']


class cAnalysisResultsSetup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{7345247C-2223-44C2-BA7B-2DF093974C9D}')
    _idlflags_ = ['dual', 'oleautomation']


cAnalysisResults._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AreaForceShell',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FVM'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V13'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V23'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VAngle'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AreaJointForceShell',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'AreaStressShell',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11Top'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22Top'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12Top'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxTop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMinTop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleTop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVMTop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11Bot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22Bot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12Bot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxBot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMinBot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleBot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVMBot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13Avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23Avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxAvg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleAvg'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'AreaStressShellLayered',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IntPtNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IntPtLoc'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13Avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23Avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMaxAvg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngleAvg'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'AssembledJointMass',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'BaseReact',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ParamMy'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ'),
        (['in', 'out'], POINTER(c_double), 'GX'),
        (['in', 'out'], POINTER(c_double), 'GY'),
        (['in', 'out'], POINTER(c_double), 'GZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'BaseReactWithCentroid',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ParamMy'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ'),
        (['in', 'out'], POINTER(c_double), 'GX'),
        (['in', 'out'], POINTER(c_double), 'GY'),
        (['in', 'out'], POINTER(c_double), 'GZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'XCentroidForFZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'YCentroidForFZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ZCentroidForFZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'BucklingFactor',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Factor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'FrameForce',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ElmSta'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'FrameJointForce',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GeneralizedDispl',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GD'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'DType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'JointAcc',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'JointAccAbs',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'JointDispl',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'JointDisplAbs',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'JointReact',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'JointVel',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'JointVelAbs',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'LinkDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'LinkForce',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'LinkJointForce',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'ModalLoadParticipationRatios',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Item'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dyn'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'ModalParticipatingMassRatios',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumUZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SumRZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'ModalParticipationFactors',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ModalMass'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ModalStiff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'ModalPeriod',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CircFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EigenValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'ModeShape',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'PanelZoneDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'PanelZoneForce',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SectionCutAnalysis',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SCut'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SectionCutDesign',
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SCut'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31), 'propget'],
        HRESULT,
        'Setup',
        (['out', 'retval'], POINTER(POINTER(cAnalysisResultsSetup)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'AreaStrainShell',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e11top'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e22top'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g12top'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emaxtop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emintop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eangletop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'evmtop'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e11bot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'e22bot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g12bot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'emaxbot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eminbot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'eanglebot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'evmbot'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g13avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g23avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gmaxavg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gangleavg'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'AreaStrainShellLayered',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Layer'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IntPtNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'IntPtLoc'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EVM'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g13avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'g23avg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gmaxavg'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'gangleavg'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'AreaJointForcePlane',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'AreaStressPlane',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S33'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'AssembledJointMass_1',
        (['in'], BSTR, 'MassSourceName'),
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MassSource'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SolidJointForce',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SolidStress',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S33'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S13'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S23'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMid'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SVM'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'StepLabel',
        (['in'], BSTR, 'LoadCase'),
        (['in'], c_double, 'StepNum'),
        (['in', 'out'], POINTER(BSTR), 'Label'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'JointRespSpec',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in'], BSTR, 'NamedSet'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CoordSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damping'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SpecWidening'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AbscissaValue'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'OrdinateValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'SolidStrain',
        (['in'], BSTR, 'Name'),
        (['in'], eItemTypeElm, 'ItemTypeElm'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Obj'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StepType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E11'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E22'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E33'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G12'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G13'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G23'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMax'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMid'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EMin'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EVM'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMax3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMid3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DirCosMin3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAnalysisResults implementation
# class cAnalysisResults_Impl(object):
#     def AreaForceShell(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F11, F22, F12, FMax, FMin, FAngle, FVM, M11, M22, M12, MMax, MMin, MAngle, V13, V23, VMax, VAngle, pRetVal
#
#     def AreaJointForceShell(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def AreaStressShell(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11Top, S22Top, S12Top, SMaxTop, SMinTop, SAngleTop, SVMTop, S11Bot, S22Bot, S12Bot, SMaxBot, SMinBot, SAngleBot, SVMBot, S13Avg, S23Avg, SMaxAvg, SAngleAvg, pRetVal
#
#     def AreaStressShellLayered(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, Layer, IntPtNum, IntPtLoc, PointElm, LoadCase, StepType, StepNum, S11, S22, S12, SMax, SMin, SAngle, SVM, S13Avg, S23Avg, SMaxAvg, SAngleAvg, pRetVal
#
#     def AssembledJointMass(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, PointElm, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def BaseReact(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, StepType, StepNum, FX, FY, FZ, MX, ParamMy, MZ, GX, GY, GZ, pRetVal
#
#     def BaseReactWithCentroid(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, StepType, StepNum, FX, FY, FZ, MX, ParamMy, MZ, GX, GY, GZ, XCentroidForFX, YCentroidForFX, ZCentroidForFX, XCentroidForFY, YCentroidForFY, ZCentroidForFY, XCentroidForFZ, YCentroidForFZ, ZCentroidForFZ, pRetVal
#
#     def BucklingFactor(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, StepType, StepNum, Factor, pRetVal
#
#     def FrameForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, ObjSta, Elm, ElmSta, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
#
#     def FrameJointForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def GeneralizedDispl(self, Name):
#         '-no docstring-'
#         #return NumberResults, GD, LoadCase, StepType, StepNum, DType, Value, pRetVal
#
#     def JointAcc(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def JointAccAbs(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def JointDispl(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def JointDisplAbs(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def JointReact(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def JointVel(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def JointVelAbs(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def LinkDeformation(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def LinkForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
#
#     def LinkJointForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def ModalLoadParticipationRatios(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, ItemType, Item, Stat, Dyn, pRetVal
#
#     def ModalParticipatingMassRatios(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, StepType, StepNum, Period, UX, UY, UZ, SumUX, SumUY, SumUZ, RX, RY, RZ, SumRX, SumRY, SumRZ, pRetVal
#
#     def ModalParticipationFactors(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, StepType, StepNum, Period, UX, UY, UZ, RX, RY, RZ, ModalMass, ModalStiff, pRetVal
#
#     def ModalPeriod(self):
#         '-no docstring-'
#         #return NumberResults, LoadCase, StepType, StepNum, Period, Frequency, CircFreq, EigenValue, pRetVal
#
#     def ModeShape(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def PanelZoneDeformation(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Elm, LoadCase, StepType, StepNum, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def PanelZoneForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Elm, PointElm, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
#
#     def SectionCutAnalysis(self):
#         '-no docstring-'
#         #return NumberResults, SCut, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def SectionCutDesign(self):
#         '-no docstring-'
#         #return NumberResults, SCut, LoadCase, StepType, StepNum, P, V2, V3, T, M2, M3, pRetVal
#
#     @property
#     def Setup(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def AreaStrainShell(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, e11top, e22top, g12top, emaxtop, emintop, eangletop, evmtop, e11bot, e22bot, g12bot, emaxbot, eminbot, eanglebot, evmbot, g13avg, g23avg, gmaxavg, gangleavg, pRetVal
#
#     def AreaStrainShellLayered(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, Layer, IntPtNum, IntPtLoc, PointElm, LoadCase, StepType, StepNum, E11, E22, G12, EMax, EMin, EAngle, EVM, g13avg, g23avg, gmaxavg, gangleavg, pRetVal
#
#     def AreaJointForcePlane(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def AreaStressPlane(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11, S22, S33, S12, SMax, SMin, SAngle, SVM, pRetVal
#
#     def AssembledJointMass_1(self, MassSourceName, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, PointElm, MassSource, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def SolidJointForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def SolidStress(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, S11, S22, S33, S12, S13, S23, SMax, SMid, SMin, SVM, DirCosMax1, DirCosMax2, DirCosMax3, DirCosMid1, DirCosMid2, DirCosMid3, DirCosMin1, DirCosMin2, DirCosMin3, pRetVal
#
#     def StepLabel(self, LoadCase, StepNum):
#         '-no docstring-'
#         #return Label, pRetVal
#
#     def JointRespSpec(self, Name, ItemTypeElm, NamedSet):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, LoadCase, CoordSys, Dir, Damping, SpecWidening, AbscissaValue, OrdinateValue, pRetVal
#
#     def SolidStrain(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberResults, Obj, Elm, PointElm, LoadCase, StepType, StepNum, E11, E22, E33, G12, G13, G23, EMax, EMid, EMin, EVM, DirCosMax1, DirCosMax2, DirCosMax3, DirCosMid1, DirCosMid2, DirCosMid3, DirCosMin1, DirCosMin2, DirCosMin3, pRetVal
#


class cDStItalianNTC2008S(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{261984F1-9B25-4633-B282-3265EE078827}')
    _idlflags_ = ['dual', 'oleautomation']


cDStItalianNTC2008S._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStItalianNTC2008S implementation
# class cDStItalianNTC2008S_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eCNameType'
eCNameType_LoadCase = 0
eCNameType_LoadCombo = 1
eCNameType = c_int  # enum
# values for enumeration 'eBridgeTendonCategory'
eBridgeTendonCategory_General = 0
eBridgeTendonCategory_Cantilever = 1
eBridgeTendonCategory_BottomSpan = 2
eBridgeTendonCategory_TopSpan = 3
eBridgeTendonCategory_Continuity = 4
eBridgeTendonCategory = c_int  # enum
# values for enumeration 'eMatTypeColdFormed'
eMatTypeColdFormed_ASTM_A653SQGr33 = 1
eMatTypeColdFormed_ASTM_A653SQGr50 = 2
eMatTypeColdFormed = c_int  # enum


class cDStAISC_ASD89(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E24113D8-9B6B-489A-B409-4EF7A7D0BE7C}')
    _idlflags_ = ['dual', 'oleautomation']


cDStAISC_ASD89._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAISC_ASD89 implementation
# class cDStAISC_ASD89_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDCoACI318_11._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoACI318_11 implementation
# class cDCoACI318_11_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cLinkElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{96B8FB5E-FE7E-43A8-99E7-90A4DAD66785}')
    _idlflags_ = ['dual', 'oleautomation']


cLinkElm._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetObj',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Obj'),
        (['in', 'out'], POINTER(c_int), 'ObjType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Point1'),
        (['in', 'out'], POINTER(BSTR), 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetPropertyFD',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cLinkElm implementation
# class cLinkElm_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetObj(self, Name):
#         '-no docstring-'
#         #return Obj, ObjType, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point1, Point2, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetLoadDeformation(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetLoadGravity(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LinkName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadTargetForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LinkName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
#
#     def GetPropertyFD(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#


class cDesignResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BB6AA06A-B633-4160-8748-DE5BB9B44838}')
    _idlflags_ = ['dual', 'oleautomation']


class cDesignForces(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9AF227C2-DF21-4D73-A344-D02286B2481F}')
    _idlflags_ = ['dual', 'oleautomation']


cDesignResults._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'DesignForces',
        (['out', 'retval'], POINTER(POINTER(cDesignForces)), 'pRetVal')
    ),
]

################################################################
# code template for cDesignResults implementation
# class cDesignResults_Impl(object):
#     @property
#     def DesignForces(self):
#         '-no docstring-'
#         #return pRetVal
#


class cSapModel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{47B18D8E-51AB-4F71-A344-07995912EA1E}')
    _idlflags_ = ['dual', 'oleautomation']


class cAnalyze(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{42BE2C97-F084-459E-B36A-A5DD0F5D8044}')
    _idlflags_ = ['dual', 'oleautomation']


class cAreaElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ECD83207-DF75-4205-A2CD-873D11FB58EC}')
    _idlflags_ = ['dual', 'oleautomation']


class cDesignSteel(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{C0E80664-B6CA-4D8B-B35C-F48ADF52541A}')
    _idlflags_ = ['dual', 'oleautomation']


class cEditArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5CD6C7F6-5F40-4A8B-9527-9A555E70780F}')
    _idlflags_ = ['dual', 'oleautomation']


class cEditFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AD38C513-1A45-43A7-B49E-B19E3D5F306F}')
    _idlflags_ = ['dual', 'oleautomation']


class cEditGeneral(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{07ABFF4C-7210-4E07-AC02-15A77D6204CA}')
    _idlflags_ = ['dual', 'oleautomation']


class cEditPoint(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8F5ECFDE-5DBE-4079-946F-34B340E832A6}')
    _idlflags_ = ['dual', 'oleautomation']


class cFile(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{19D4AD23-7CAE-4A34-8E66-43B22C680B87}')
    _idlflags_ = ['dual', 'oleautomation']


class cFunction(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1C5FB0E9-BBD3-4613-9762-82B4004AEA6A}')
    _idlflags_ = ['dual', 'oleautomation']


class cGenDispl(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5A09F7FD-59EE-48EC-AD86-4A9124AB3C13}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eUnits'
eUnits_lb_in_F = 1
eUnits_lb_ft_F = 2
eUnits_kip_in_F = 3
eUnits_kip_ft_F = 4
eUnits_kN_mm_C = 5
eUnits_kN_m_C = 6
eUnits_kgf_mm_C = 7
eUnits_kgf_m_C = 8
eUnits_N_mm_C = 9
eUnits_N_m_C = 10
eUnits_Ton_mm_C = 11
eUnits_Ton_m_C = 12
eUnits_kN_cm_C = 13
eUnits_kgf_cm_C = 14
eUnits_N_cm_C = 15
eUnits_Ton_cm_C = 16
eUnits = c_int  # enum


class cGroup(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CD0C9E33-A5F7-4D2B-960A-3BC9A469B9FC}')
    _idlflags_ = ['dual', 'oleautomation']


class cLineElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{63D78F87-7689-46FF-8EBB-ADA5B4526B64}')
    _idlflags_ = ['dual', 'oleautomation']


class cLoadPatterns(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{43C04FBB-1139-4BAD-BBE6-A232136FDE29}')
    _idlflags_ = ['dual', 'oleautomation']


class cOptions(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2A93B6CB-4D3E-484E-A4E6-A48A631C7D51}')
    _idlflags_ = ['dual', 'oleautomation']


class cPattern(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3E883F28-0BD0-42EC-9EC6-1CDF6CF2FD42}')
    _idlflags_ = ['dual', 'oleautomation']


class cPointElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EFBF93F3-3B61-4C76-97E6-723F2B4EE567}')
    _idlflags_ = ['dual', 'oleautomation']


class cPointObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8C2B957E-89B7-4455-A171-FC53FB3D64D2}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropArea(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A0DD6220-0BEE-4775-898B-1A212EBA4D05}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropFrame(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F39453AF-2E6A-4384-9F04-F8942B382C3B}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropMaterial(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{083EA16A-5236-498D-85DC-2227CF68E94F}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropRebar(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{591D3F24-6DB9-4DA7-9DE2-311C1602D270}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropTendon(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{500C72A2-6B3B-4285-9175-62B90EEF4957}')
    _idlflags_ = ['dual', 'oleautomation']


class cCombo(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8FA7C590-CC79-490B-AFEC-16701E213B12}')
    _idlflags_ = ['dual', 'oleautomation']


class cSelect(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{92A5AE6E-5560-46BD-AA4A-83A3AAAADB3E}')
    _idlflags_ = ['dual', 'oleautomation']


class cTendonObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D4687043-09CD-410C-BD8B-FFE42B5E612E}')
    _idlflags_ = ['dual', 'oleautomation']


class cView(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1D03B492-00C4-4169-BD52-C6A759D30E27}')
    _idlflags_ = ['dual', 'oleautomation']


class cDatabaseTables(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D9BEC2C4-E03B-4FEC-BFED-BCEEB0512065}')
    _idlflags_ = ['dual', 'oleautomation']


class cEditSolid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4AE677FC-3C85-4E2E-9B44-8A74350EF085}')
    _idlflags_ = ['dual', 'oleautomation']


class cExternalAnalysisResults(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F97360C2-96CC-4567-A1FF-4917538CD48E}')
    _idlflags_ = ['dual', 'oleautomation']


class cGenRefLine(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{759D7B70-77DA-4965-B53D-A8715E470007}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropCable(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{D336EEBD-B776-466A-BF72-578CE4EB6499}')
    _idlflags_ = ['dual', 'oleautomation']


class cPropSolid(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{4E3B298E-A977-45A6-BC55-C9A4ED027FC5}')
    _idlflags_ = ['dual', 'oleautomation']


class cSectionCut(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{500EA36B-BE12-4622-BEE1-54497A239ACA}')
    _idlflags_ = ['dual', 'oleautomation']


class cSolidElm(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8FED7B3B-8CBF-48E4-999C-7E69D3B5E72F}')
    _idlflags_ = ['dual', 'oleautomation']


class cSolidObj(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E3197247-2DC0-4CCD-B0D4-E325AEBCD093}')
    _idlflags_ = ['dual', 'oleautomation']


class cMassSource(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{80165C25-3586-4CAA-8041-D5E79DA73DA3}')
    _idlflags_ = ['dual', 'oleautomation']


class cScheduler(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8709D16A-5183-4BBD-8375-51BC55350F0B}')
    _idlflags_ = ['dual', 'oleautomation']


class cNamedSet(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F5C94717-00F9-4280-9C50-B50A1EF8FAF4}')
    _idlflags_ = ['dual', 'oleautomation']


class cDesignConcreteShell(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{795AE2ED-7D9B-4D9A-9D99-5E1000480B3A}')
    _idlflags_ = ['dual', 'oleautomation']


class cDesignAluminum(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CFE7C51F-B6F5-40F7-8762-3DCDC595BACC}')
    _idlflags_ = ['dual', 'oleautomation']


class cDesignColdFormed(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{29C26129-6457-4D84-A4BB-87C581C82672}')
    _idlflags_ = ['dual', 'oleautomation']


cSapModel._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Analyze',
        (['out', 'retval'], POINTER(POINTER(cAnalyze)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AreaElm',
        (['out', 'retval'], POINTER(POINTER(cAreaElm)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'AreaObj',
        (['out', 'retval'], POINTER(POINTER(cAreaObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4), 'propget'],
        HRESULT,
        'ConstraintDef',
        (['out', 'retval'], POINTER(POINTER(cConstraint)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'DesignConcrete',
        (['out', 'retval'], POINTER(POINTER(cDesignConcrete)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'DesignSteel',
        (['out', 'retval'], POINTER(POINTER(cDesignSteel)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'EditArea',
        (['out', 'retval'], POINTER(POINTER(cEditArea)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'EditFrame',
        (['out', 'retval'], POINTER(POINTER(cEditFrame)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'EditGeneral',
        (['out', 'retval'], POINTER(POINTER(cEditGeneral)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12), 'propget'],
        HRESULT,
        'EditPoint',
        (['out', 'retval'], POINTER(POINTER(cEditPoint)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'File',
        (['out', 'retval'], POINTER(POINTER(cFile)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'FrameObj',
        (['out', 'retval'], POINTER(POINTER(cFrameObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'Func',
        (['out', 'retval'], POINTER(POINTER(cFunction)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16), 'propget'],
        HRESULT,
        'GDispl',
        (['out', 'retval'], POINTER(POINTER(cGenDispl)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetDatabaseUnits',
        (['out', 'retval'], POINTER(eUnits), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetMergeTol',
        (['in', 'out'], POINTER(c_double), 'MergeTol'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetModelFilename',
        (['in', 'optional'], VARIANT_BOOL, 'IncludePath', True),
        (['out', 'retval'], POINTER(BSTR), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetModelFilepath',
        (['out', 'retval'], POINTER(BSTR), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetModelIsLocked',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetPresentCoordSystem',
        (['out', 'retval'], POINTER(BSTR), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetPresentUnits',
        (['out', 'retval'], POINTER(eUnits), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(98)],
        HRESULT,
        'GetProgramInfo',
        (['in', 'out'], POINTER(BSTR), 'ProgramName'),
        (['in', 'out'], POINTER(BSTR), 'ProgramVersion'),
        (['in', 'out'], POINTER(BSTR), 'ProgramLevel'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetProjectInfo',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Item'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Data'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetVersion',
        (['in', 'out'], POINTER(BSTR), 'Version'),
        (['in', 'out'], POINTER(c_double), 'MyVersionNumber'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27), 'propget'],
        HRESULT,
        'GroupDef',
        (['out', 'retval'], POINTER(POINTER(cGroup)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'InitializeNewModel',
        (['in', 'optional'], eUnits, 'Units', 3),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29), 'propget'],
        HRESULT,
        'LineElm',
        (['out', 'retval'], POINTER(POINTER(cLineElm)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30), 'propget'],
        HRESULT,
        'LinkElm',
        (['out', 'retval'], POINTER(POINTER(cLinkElm)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31), 'propget'],
        HRESULT,
        'LinkObj',
        (['out', 'retval'], POINTER(POINTER(cLinkObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32), 'propget'],
        HRESULT,
        'LoadCases',
        (['out', 'retval'], POINTER(POINTER(cLoadCases)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33), 'propget'],
        HRESULT,
        'LoadPatterns',
        (['out', 'retval'], POINTER(POINTER(cLoadPatterns)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34), 'propget'],
        HRESULT,
        'Options',
        (['out', 'retval'], POINTER(POINTER(cOptions)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35), 'propget'],
        HRESULT,
        'PatternDef',
        (['out', 'retval'], POINTER(POINTER(cPattern)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36), 'propget'],
        HRESULT,
        'PointElm',
        (['out', 'retval'], POINTER(POINTER(cPointElm)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37), 'propget'],
        HRESULT,
        'PointObj',
        (['out', 'retval'], POINTER(POINTER(cPointObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38), 'propget'],
        HRESULT,
        'PropArea',
        (['out', 'retval'], POINTER(POINTER(cPropArea)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39), 'propget'],
        HRESULT,
        'PropFrame',
        (['out', 'retval'], POINTER(POINTER(cPropFrame)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40), 'propget'],
        HRESULT,
        'PropLink',
        (['out', 'retval'], POINTER(POINTER(cPropLink)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41), 'propget'],
        HRESULT,
        'PropMaterial',
        (['out', 'retval'], POINTER(POINTER(cPropMaterial)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42), 'propget'],
        HRESULT,
        'PropRebar',
        (['out', 'retval'], POINTER(POINTER(cPropRebar)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43), 'propget'],
        HRESULT,
        'PropTendon',
        (['out', 'retval'], POINTER(POINTER(cPropTendon)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44), 'propget'],
        HRESULT,
        'RespCombo',
        (['out', 'retval'], POINTER(POINTER(cCombo)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45), 'propget'],
        HRESULT,
        'Results',
        (['out', 'retval'], POINTER(POINTER(cAnalysisResults)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46), 'propget'],
        HRESULT,
        'SelectObj',
        (['out', 'retval'], POINTER(POINTER(cSelect)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetMergeTol',
        (['in'], c_double, 'MergeTol'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetModelIsLocked',
        (['in'], VARIANT_BOOL, 'Lockit'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetPresentUnits',
        (['in'], eUnits, 'Units'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetProjectInfo',
        (['in'], BSTR, 'Item'),
        (['in'], BSTR, 'Data'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53), 'propget'],
        HRESULT,
        'TendonObj',
        (['out', 'retval'], POINTER(POINTER(cTendonObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54), 'propget'],
        HRESULT,
        'View',
        (['out', 'retval'], POINTER(POINTER(cView)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(97), 'propget'],
        HRESULT,
        'DesignResults',
        (['out', 'retval'], POINTER(POINTER(cDesignResults)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(99), 'propget'],
        HRESULT,
        'DatabaseTables',
        (['out', 'retval'], POINTER(POINTER(cDatabaseTables)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetPresentCoordSystem',
        (['in'], BSTR, 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetUserComment',
        (['in', 'out'], POINTER(BSTR), 'Comment'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'SetUserComment',
        (['in'], BSTR, 'Comment'),
        (['in', 'optional'], c_int, 'NumLines', 1),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'CoordSys',
        (['out', 'retval'], POINTER(POINTER(cCoordSys)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65), 'propget'],
        HRESULT,
        'CableObj',
        (['out', 'retval'], POINTER(POINTER(cCableObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68), 'propget'],
        HRESULT,
        'EditSolid',
        (['out', 'retval'], POINTER(POINTER(cEditSolid)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69), 'propget'],
        HRESULT,
        'ExternalAnalysisResults',
        (
            ['out', 'retval'],
            POINTER(POINTER(cExternalAnalysisResults)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(70), 'propget'],
        HRESULT,
        'GenRefLine',
        (['out', 'retval'], POINTER(POINTER(cGenRefLine)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(71), 'propget'],
        HRESULT,
        'NamedAssign',
        (['out', 'retval'], POINTER(POINTER(cNamedAssign)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(91), 'propget'],
        HRESULT,
        'NamedDisplay',
        (['out', 'retval'], POINTER(POINTER(cNamedDisplay)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(72), 'propget'],
        HRESULT,
        'PlaneElm',
        (['out', 'retval'], POINTER(POINTER(cPlaneElm)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(73), 'propget'],
        HRESULT,
        'PropCable',
        (['out', 'retval'], POINTER(POINTER(cPropCable)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(74), 'propget'],
        HRESULT,
        'PropSolid',
        (['out', 'retval'], POINTER(POINTER(cPropSolid)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(75), 'propget'],
        HRESULT,
        'SectCut',
        (['out', 'retval'], POINTER(POINTER(cSectionCut)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(76), 'propget'],
        HRESULT,
        'SolidElm',
        (['out', 'retval'], POINTER(POINTER(cSolidElm)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(77), 'propget'],
        HRESULT,
        'SolidObj',
        (['out', 'retval'], POINTER(POINTER(cSolidObj)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(78), 'propget'],
        HRESULT,
        'SourceMass',
        (['out', 'retval'], POINTER(POINTER(cMassSource)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(83), 'propget'],
        HRESULT,
        'Scheduler',
        (['out', 'retval'], POINTER(POINTER(cScheduler)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(84)],
        HRESULT,
        'SetStringsExtendedEntityData',
        (['in'], BSTR, 'appName'),
        (['in'], BSTR, 'key'),
        (['in'], c_int, 'numberValues'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'values'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(85)],
        HRESULT,
        'GetKeysWithStringsExtendedEntityData',
        (['in'], BSTR, 'appName'),
        (['in', 'out'], POINTER(c_int), 'NumberKeys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyKeys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(86)],
        HRESULT,
        'GetKeyStringsExtendedEntityData',
        (['in'], BSTR, 'appName'),
        (['in'], BSTR, 'key'),
        (['in', 'out'], POINTER(c_int), 'numberValues'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'values'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(87), 'propget'],
        HRESULT,
        'NamedSet',
        (['out', 'retval'], POINTER(POINTER(cNamedSet)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(100), 'propget'],
        HRESULT,
        'DesignConcreteShell',
        (['out', 'retval'], POINTER(POINTER(cDesignConcreteShell)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66), 'propget'],
        HRESULT,
        'DesignAluminum',
        (['out', 'retval'], POINTER(POINTER(cDesignAluminum)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67), 'propget'],
        HRESULT,
        'DesignColdFormed',
        (['out', 'retval'], POINTER(POINTER(cDesignColdFormed)), 'pRetVal')
    ),
]

################################################################
# code template for cSapModel implementation
# class cSapModel_Impl(object):
#     @property
#     def Analyze(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AreaElm(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AreaObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ConstraintDef(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DesignConcrete(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DesignSteel(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def EditArea(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def EditFrame(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def EditGeneral(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def EditPoint(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def File(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def FrameObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Func(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def GDispl(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDatabaseUnits(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetMergeTol(self):
#         '-no docstring-'
#         #return MergeTol, pRetVal
#
#     def GetModelFilename(self, IncludePath):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModelFilepath(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModelIsLocked(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetPresentCoordSystem(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetPresentUnits(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetProgramInfo(self):
#         '-no docstring-'
#         #return ProgramName, ProgramVersion, ProgramLevel, pRetVal
#
#     def GetProjectInfo(self):
#         '-no docstring-'
#         #return NumberItems, Item, Data, pRetVal
#
#     def GetVersion(self):
#         '-no docstring-'
#         #return Version, MyVersionNumber, pRetVal
#
#     @property
#     def GroupDef(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def InitializeNewModel(self, Units):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def LineElm(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def LinkElm(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def LinkObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def LoadCases(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def LoadPatterns(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Options(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PatternDef(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PointElm(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PointObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropArea(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropFrame(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropLink(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropMaterial(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropRebar(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropTendon(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def RespCombo(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Results(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SelectObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMergeTol(self, MergeTol):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModelIsLocked(self, Lockit):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPresentUnits(self, Units):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetProjectInfo(self, Item, Data):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def TendonObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def View(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DesignResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DatabaseTables(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPresentCoordSystem(self, CSys):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetUserComment(self):
#         '-no docstring-'
#         #return Comment, pRetVal
#
#     def SetUserComment(self, Comment, NumLines, Replace):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def CoordSys(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def CableObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def EditSolid(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ExternalAnalysisResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def GenRefLine(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def NamedAssign(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def NamedDisplay(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PlaneElm(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropCable(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def PropSolid(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SectCut(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SolidElm(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SolidObj(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SourceMass(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Scheduler(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetStringsExtendedEntityData(self, appName, key, numberValues):
#         '-no docstring-'
#         #return values, pRetVal
#
#     def GetKeysWithStringsExtendedEntityData(self, appName):
#         '-no docstring-'
#         #return NumberKeys, MyKeys, pRetVal
#
#     def GetKeyStringsExtendedEntityData(self, appName, key):
#         '-no docstring-'
#         #return numberValues, values, pRetVal
#
#     @property
#     def NamedSet(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DesignConcreteShell(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DesignAluminum(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def DesignColdFormed(self):
#         '-no docstring-'
#         #return pRetVal
#


class cDAlEurocode_9_2007(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A8BC7428-1F1F-46C4-9B75-CAE8F1C4ED95}')
    _idlflags_ = ['dual', 'oleautomation']


cDAlEurocode_9_2007._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDAlEurocode_9_2007 implementation
# class cDAlEurocode_9_2007_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eWallSpandrelRebarLayerType'
eWallSpandrelRebarLayerType_Horizontal_Top_Total = 1
eWallSpandrelRebarLayerType_Horizontal_Bottom_Total = 2
eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface = 3
eWallSpandrelRebarLayerType_Vertical_Ties_Distributed = 4
eWallSpandrelRebarLayerType_Diagonal_Each = 5
eWallSpandrelRebarLayerType = c_int  # enum
# values for enumeration 'eMatTypeRebar'
eMatTypeRebar_ASTM_A615Gr40 = 1
eMatTypeRebar_ASTM_A615Gr60 = 2
eMatTypeRebar_ASTM_A615Gr75 = 3
eMatTypeRebar_ASTM_A706 = 4
eMatTypeRebar_Chinese_HPB235 = 5
eMatTypeRebar_Chinese_HRB335 = 6
eMatTypeRebar_Chinese_HRB400 = 7
eMatTypeRebar_Indian_Mild250 = 8
eMatTypeRebar_Indian_HYSD415 = 9
eMatTypeRebar_Indian_HYSD500 = 10
eMatTypeRebar_Indian_HYSD550 = 11
eMatTypeRebar = c_int  # enum


class cPropFrameSDShape(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{562A4D6C-8F64-428B-8A4C-DE1FD0E82E63}')
    _idlflags_ = ['dual', 'oleautomation']


cPropFrameSDShape._methods_ = [
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetAngle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'Bf'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetISection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'Bf'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Bfb'),
        (['in', 'out'], POINTER(c_double), 'Tfb'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetReinfCircle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Diameter'),
        (['in', 'out'], POINTER(c_int), 'NumBars'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(BSTR), 'RebarSize'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetReinfCorner',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetReinfEdge',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EdgeNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'RebarSize'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Spacing'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Cover'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetReinfLine',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_double), 'X1'),
        (['in', 'out'], POINTER(c_double), 'Y1'),
        (['in', 'out'], POINTER(c_double), 'X2'),
        (['in', 'out'], POINTER(c_double), 'Y2'),
        (['in', 'out'], POINTER(c_double), 'Spacing'),
        (['in', 'out'], POINTER(BSTR), 'RebarSize'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'EndBars'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetReinfRectangular',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetReinfSingle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(BSTR), 'RebarSize'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetSolidCircle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'SSOverwrite'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Diameter'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf'),
        (['in', 'out'], POINTER(c_int), 'NumberBars'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(c_double), 'Cover'),
        (['in', 'out'], POINTER(BSTR), 'RebarSize'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetSolidRect',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'SSOverwrite'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetTee',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'Bf'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'optional'], VARIANT_BOOL, 'All', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetChannel',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'Bf'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetDblAngle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Dis'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetPipe',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Diameter'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetPlate',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'GetPolygon',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'SSOverwrite'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Reinf'),
        (['in', 'out'], POINTER(BSTR), 'MatRebar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetRefCircle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Diameter'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetRefLine',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(c_double), 'X1'),
        (['in', 'out'], POINTER(c_double), 'Y1'),
        (['in', 'out'], POINTER(c_double), 'X2'),
        (['in', 'out'], POINTER(c_double), 'Y2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetSolidSector',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Angle'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetSolidSegment',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'Angle'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetTube',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ShapeName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(c_double), 'XCenter'),
        (['in', 'out'], POINTER(c_double), 'YCenter'),
        (['in', 'out'], POINTER(c_double), 'H'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Rotation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetAngle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'H', 24.0),
        (['in', 'optional'], c_double, 'Bf', 24.0),
        (['in', 'optional'], c_double, 'Tf', 2.4),
        (['in', 'optional'], c_double, 'Tw', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetChannel',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'H', 24.0),
        (['in', 'optional'], c_double, 'Bf', 24.0),
        (['in', 'optional'], c_double, 'Tf', 2.4),
        (['in', 'optional'], c_double, 'Tw', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'SetDblAngle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'H', 24.0),
        (['in', 'optional'], c_double, 'W', 24.0),
        (['in', 'optional'], c_double, 'Tf', 2.4),
        (['in', 'optional'], c_double, 'Tw', 2.4),
        (['in', 'optional'], c_double, 'Dis', 1.2),
        (['in', 'optional'], c_double, 'Tfb', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'SetISection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'H', 24.0),
        (['in', 'optional'], c_double, 'Bf', 24.0),
        (['in', 'optional'], c_double, 'Tf', 2.4),
        (['in', 'optional'], c_double, 'Tw', 2.4),
        (['in', 'optional'], c_double, 'Bfb', 24.0),
        (['in', 'optional'], c_double, 'Tfb', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetPipe',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'Diameter', 24.0),
        (['in', 'optional'], c_double, 'Thickness', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetPlate',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'Thickness', 2.4),
        (['in', 'optional'], c_double, 'W', 24.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetPolygon',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'SSOverwrite'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Radius'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], VARIANT_BOOL, 'Reinf', False),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetRefCircle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Diameter'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetRefLine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_double, 'X1'),
        (['in'], c_double, 'Y1'),
        (['in'], c_double, 'X2'),
        (['in'], c_double, 'Y2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetReinfCircle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Diameter'),
        (['in'], c_int, 'NumBars'),
        (['in'], c_double, 'Rotation'),
        (['in'], BSTR, 'RebarSize'),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetReinfCorner',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_int, 'PointNum'),
        (['in'], BSTR, 'RebarSize'),
        (['in', 'optional'], VARIANT_BOOL, 'All', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetReinfEdge',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_int, 'EdgeNum'),
        (['in'], BSTR, 'RebarSize'),
        (['in'], c_double, 'Spacing'),
        (['in'], c_double, 'Cover'),
        (['in', 'optional'], VARIANT_BOOL, 'All', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetReinfLine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_double, 'X1'),
        (['in'], c_double, 'Y1'),
        (['in'], c_double, 'X2'),
        (['in'], c_double, 'Y2'),
        (['in'], c_double, 'Spacing'),
        (['in'], BSTR, 'RebarSize'),
        (['in', 'optional'], VARIANT_BOOL, 'EndBars', False),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetReinfRectangular',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'H'),
        (['in'], c_double, 'W'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetReinfSingle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in', 'optional'], BSTR, 'RebarSize', ''),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetSolidCircle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'SSOverwrite'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Diameter'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], VARIANT_BOOL, 'Reinf', False),
        (['in', 'optional'], c_int, 'NumberBars', 8),
        (['in', 'optional'], c_double, 'Rotation', 0.0),
        (['in', 'optional'], c_double, 'Cover', 2.0),
        (['in', 'optional'], BSTR, 'RebarSize', ''),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetSolidRect',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'SSOverwrite'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'H'),
        (['in'], c_double, 'W'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], VARIANT_BOOL, 'Reinf', False),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetSolidSector',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Angle'),
        (['in'], c_double, 'Rotation'),
        (['in'], c_double, 'Radius'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetSolidSegment',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Angle'),
        (['in'], c_double, 'Rotation'),
        (['in'], c_double, 'Radius'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetTee',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'H', 24.0),
        (['in', 'optional'], c_double, 'Bf', 24.0),
        (['in', 'optional'], c_double, 'Tf', 2.4),
        (['in', 'optional'], c_double, 'Tw', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetTube',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'XCenter'),
        (['in'], c_double, 'YCenter'),
        (['in'], c_double, 'Rotation'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], c_double, 'H', 24.0),
        (['in', 'optional'], c_double, 'W', 24.0),
        (['in', 'optional'], c_double, 'Tf', 2.4),
        (['in', 'optional'], c_double, 'Tw', 2.4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetShapeReinforcement',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], VARIANT_BOOL, 'Reinf'),
        (['in', 'optional'], BSTR, 'MatRebar', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetShapeConcreteModel',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ShapeName'),
        (['in'], BSTR, 'ManderModel'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropFrameSDShape implementation
# class cPropFrameSDShape_Impl(object):
#     def GetAngle(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
#
#     def GetISection(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Bfb, Tfb, Rotation, pRetVal
#
#     def GetReinfCircle(self, Name, ShapeName):
#         '-no docstring-'
#         #return XCenter, YCenter, Diameter, NumBars, Rotation, RebarSize, MatRebar, pRetVal
#
#     def GetReinfCorner(self, Name, ShapeName):
#         '-no docstring-'
#         #return NumberItems, PointNum, RebarSize, pRetVal
#
#     def GetReinfEdge(self, Name, ShapeName):
#         '-no docstring-'
#         #return NumberItems, EdgeNum, RebarSize, Spacing, Cover, pRetVal
#
#     def GetReinfLine(self, Name, ShapeName):
#         '-no docstring-'
#         #return X1, Y1, X2, Y2, Spacing, RebarSize, EndBars, MatRebar, pRetVal
#
#     def GetReinfRectangular(self, Name, ShapeName):
#         '-no docstring-'
#         #return XCenter, YCenter, H, W, Rotation, MatRebar, pRetVal
#
#     def GetReinfSingle(self, Name, ShapeName):
#         '-no docstring-'
#         #return XCenter, YCenter, RebarSize, MatRebar, pRetVal
#
#     def GetSolidCircle(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, SSOverwrite, Color, XCenter, YCenter, Diameter, Reinf, NumberBars, Rotation, Cover, RebarSize, MatRebar, pRetVal
#
#     def GetSolidRect(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, SSOverwrite, Color, XCenter, YCenter, H, W, Rotation, Reinf, MatRebar, pRetVal
#
#     def GetTee(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
#
#     def Delete(self, Name, ShapeName, All):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetChannel(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, H, Bf, Tf, Tw, Rotation, pRetVal
#
#     def GetDblAngle(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, H, W, Tf, Tw, Dis, Rotation, pRetVal
#
#     def GetPipe(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, Diameter, Thickness, pRetVal
#
#     def GetPlate(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, Color, XCenter, YCenter, Thickness, W, Rotation, pRetVal
#
#     def GetPolygon(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, SSOverwrite, NumberPoints, X, Y, Radius, Color, Reinf, MatRebar, pRetVal
#
#     def GetRefCircle(self, Name, ShapeName):
#         '-no docstring-'
#         #return XCenter, YCenter, Diameter, pRetVal
#
#     def GetRefLine(self, Name, ShapeName):
#         '-no docstring-'
#         #return X1, Y1, X2, Y2, pRetVal
#
#     def GetSolidSector(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, Color, XCenter, YCenter, Angle, Rotation, Radius, pRetVal
#
#     def GetSolidSegment(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, Color, XCenter, YCenter, Angle, Rotation, Radius, pRetVal
#
#     def GetTube(self, Name, ShapeName):
#         '-no docstring-'
#         #return MatProp, PropName, Color, XCenter, YCenter, H, W, Tf, Tw, Rotation, pRetVal
#
#     def SetAngle(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetChannel(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetDblAngle(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, W, Tf, Tw, Dis, Tfb):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetISection(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw, Bfb, Tfb):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetPipe(self, Name, MatProp, PropName, XCenter, YCenter, Color, Diameter, Thickness):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetPlate(self, Name, MatProp, XCenter, YCenter, Rotation, Color, Thickness, W):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetPolygon(self, Name, MatProp, SSOverwrite, NumberPoints, Color, Reinf, MatRebar):
#         '-no docstring-'
#         #return ShapeName, X, Y, Radius, pRetVal
#
#     def SetRefCircle(self, Name, XCenter, YCenter, Diameter):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetRefLine(self, Name, X1, Y1, X2, Y2):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetReinfCircle(self, Name, XCenter, YCenter, Diameter, NumBars, Rotation, RebarSize, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetReinfCorner(self, Name, PointNum, RebarSize, All):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetReinfEdge(self, Name, EdgeNum, RebarSize, Spacing, Cover, All):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetReinfLine(self, Name, X1, Y1, X2, Y2, Spacing, RebarSize, EndBars, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetReinfRectangular(self, Name, XCenter, YCenter, H, W, Rotation, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetReinfSingle(self, Name, XCenter, YCenter, RebarSize, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetSolidCircle(self, Name, MatProp, SSOverwrite, XCenter, YCenter, Diameter, Color, Reinf, NumberBars, Rotation, Cover, RebarSize, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetSolidRect(self, Name, MatProp, SSOverwrite, XCenter, YCenter, H, W, Rotation, Color, Reinf, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetSolidSector(self, Name, MatProp, XCenter, YCenter, Angle, Rotation, Radius, Color):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetSolidSegment(self, Name, MatProp, XCenter, YCenter, Angle, Rotation, Radius, Color):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetTee(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, Bf, Tf, Tw):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetTube(self, Name, MatProp, PropName, XCenter, YCenter, Rotation, Color, H, W, Tf, Tw):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetShapeReinforcement(self, Name, Reinf, MatRebar):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#
#     def SetShapeConcreteModel(self, Name, ManderModel, Color):
#         '-no docstring-'
#         #return ShapeName, pRetVal
#


class cFunctionPSD(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{749E2211-F751-480C-924B-EE3DA16588D5}')
    _idlflags_ = ['dual', 'oleautomation']


cFunctionPSD._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetFromFile',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(c_int), 'HeadLines'),
        (['in', 'out'], POINTER(c_int), 'PreChars'),
        (['in', 'out'], POINTER(c_int), 'PointsPerLine'),
        (['in', 'out'], POINTER(c_int), 'ValueType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat'),
        (['in', 'out'], POINTER(c_int), 'NumberFixed'),
        (['in', 'out'], POINTER(c_int), 'FreqTypeInFile'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetUser',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetFromFile',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FileName'),
        (['in'], c_int, 'HeadLines'),
        (['in'], c_int, 'PreChars'),
        (['in'], c_int, 'PointsPerLine'),
        (['in'], c_int, 'ValueType'),
        (['in'], VARIANT_BOOL, 'FreeFormat'),
        (['in', 'optional'], c_int, 'NumberFixed', 10),
        (['in', 'optional'], c_int, 'FreqTypeInFile', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetUser',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cFunctionPSD implementation
# class cFunctionPSD_Impl(object):
#     def GetFromFile(self, Name):
#         '-no docstring-'
#         #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile, pRetVal
#
#     def GetUser(self, Name):
#         '-no docstring-'
#         #return NumberItems, Frequency, Value, pRetVal
#
#     def SetFromFile(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUser(self, Name, NumberItems):
#         '-no docstring-'
#         #return Frequency, Value, pRetVal
#

cDatabaseTables._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ApplyEditedTables',
        (['in'], VARIANT_BOOL, 'FillImportLog'),
        (['in', 'out'], POINTER(c_int), 'NumFatalErrors'),
        (['in', 'out'], POINTER(c_int), 'NumErrorMsgs'),
        (['in', 'out'], POINTER(c_int), 'NumWarnMsgs'),
        (['in', 'out'], POINTER(c_int), 'NumInfoMsgs'),
        (['in', 'out'], POINTER(BSTR), 'ImportLog'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'CancelTableEditing',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetAllFieldsInTable',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(c_int), 'NumberFields'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Description'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'UnitsString'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsImportable'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetAllTables',
        (['in', 'out'], POINTER(c_int), 'NumberTables'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ImportType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IsEmpty'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetAvailableTables',
        (['in', 'out'], POINTER(c_int), 'NumberTables'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ImportType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoadCasesSelectedForDisplay',
        (['in', 'out'], POINTER(c_int), 'NumberSelectedLoadCases'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCaseList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetLoadCombinationsSelectedForDisplay',
        (['in', 'out'], POINTER(c_int), 'NumberSelectedLoadCombinations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCombinationList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetLoadPatternsSelectedForDisplay',
        (['in', 'out'], POINTER(c_int), 'NumberSelectedLoadPatterns'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatternList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetTableForDisplayArray',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded'),
        (['in', 'out'], POINTER(c_int), 'NumberRecords'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetTableForDisplayCSVFile',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in'], BSTR, 'csvFilePath'),
        (['in', 'optional'], BSTR, 'sepChar', ','),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetTableForDisplayCSVString',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(BSTR), 'csvString'),
        (['in', 'optional'], BSTR, 'sepChar', ','),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetTableForDisplayXMLString',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldKeyList'),
        (['in'], BSTR, 'GroupName'),
        (['in'], VARIANT_BOOL, 'IncludeSchema'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(BSTR), 'XMLTableData'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetTableForEditingArray',
        (['in'], BSTR, 'TableKey'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded'),
        (['in', 'out'], POINTER(c_int), 'NumberRecords'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetTableForEditingCSVFile',
        (['in'], BSTR, 'TableKey'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in'], BSTR, 'csvFilePath'),
        (['in', 'optional'], BSTR, 'sepChar', ','),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetTableForEditingCSVString',
        (['in'], BSTR, 'TableKey'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(BSTR), 'csvString'),
        (['in', 'optional'], BSTR, 'sepChar', ','),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetLoadCasesSelectedForDisplay',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCaseList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetLoadCombinationsSelectedForDisplay',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCombinationList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetLoadPatternsSelectedForDisplay',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPatternList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetTableForEditingArray',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FieldsKeysIncluded'),
        (['in'], c_int, 'NumberRecords'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableData'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetTableForEditingCSVFile',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in'], BSTR, 'csvFilePath'),
        (['in', 'optional'], BSTR, 'sepChar', ','),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetTableForEditingCSVString',
        (['in'], BSTR, 'TableKey'),
        (['in', 'out'], POINTER(c_int), 'TableVersion'),
        (['in', 'out'], POINTER(BSTR), 'csvString'),
        (['in', 'optional'], BSTR, 'sepChar', ','),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'ShowTablesInExcel',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKeyList'),
        (['in'], c_int, 'WindowHandle'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'GetObsoleteTableKeyList',
        (['in', 'out'], POINTER(c_int), 'NumberTableKeys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TableKeyList'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NotesList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetTableOutputOptionsForDisplay',
        (['in', 'out'], POINTER(c_double), 'BaseReactionGX'),
        (['in', 'out'], POINTER(c_double), 'BaseReactionGY'),
        (['in', 'out'], POINTER(c_double), 'BaseReactionGZ'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsAllModes'),
        (['in', 'out'], POINTER(c_int), 'StartMode'),
        (['in', 'out'], POINTER(c_int), 'EndMode'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsAllBucklingModes'),
        (['in', 'out'], POINTER(c_int), 'StartBucklingMode'),
        (['in', 'out'], POINTER(c_int), 'EndBucklingMode'),
        (['in', 'out'], POINTER(c_int), 'ModalHistory'),
        (['in', 'out'], POINTER(c_int), 'DirectHistory'),
        (['in', 'out'], POINTER(c_int), 'NonlinearStatic'),
        (['in', 'out'], POINTER(c_int), 'MultistepStatic'),
        (['in', 'out'], POINTER(c_int), 'SteadyState'),
        (['in', 'out'], POINTER(c_int), 'SteadyStateOption'),
        (['in', 'out'], POINTER(c_int), 'PowerSpectralDensity'),
        (['in', 'out'], POINTER(c_int), 'Combo'),
        (['in', 'out'], POINTER(c_int), 'BridgeDesign'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetTableOutputOptionsForDisplay',
        (['in'], c_double, 'BaseReactionGX'),
        (['in'], c_double, 'BaseReactionGY'),
        (['in'], c_double, 'BaseReactionGZ'),
        (['in'], VARIANT_BOOL, 'IsAllModes'),
        (['in'], c_int, 'StartMode'),
        (['in'], c_int, 'EndMode'),
        (['in'], VARIANT_BOOL, 'IsAllBucklingModes'),
        (['in'], c_int, 'StartBucklingMode'),
        (['in'], c_int, 'EndBucklingMode'),
        (['in'], c_int, 'ModalHistory'),
        (['in'], c_int, 'DirectHistory'),
        (['in'], c_int, 'NonlinearStatic'),
        (['in'], c_int, 'MultistepStatic'),
        (['in'], c_int, 'SteadyState'),
        (['in'], c_int, 'SteadyStateOption'),
        (['in'], c_int, 'PowerSpectralDensity'),
        (['in'], c_int, 'Combo'),
        (['in'], c_int, 'BridgeDesign'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetGeneralizedDisplacementsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(c_int),
            'NumberSelectedGeneralizedDisplacements',
        ),
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'GeneralizedDisplacementList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetSectionCutsSelectedForDisplay',
        (['in', 'out'], POINTER(c_int), 'NumberSelectedSectionCuts'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectionCutList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetElementVirtualWorkNamedSetsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(c_int),
            'NumberSelectedElementVirtualWorkNamedSets',
        ),
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'ElementVirtualWorkNamedSetList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'GetPushoverNamedSetsSelectedForDisplay',
        (['in', 'out'], POINTER(c_int), 'NumberSelectedPushoverNamedSets'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PushoverNamedSetList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'GetJointResponseSpectraNamedSetsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(c_int),
            'NumberSelectedJointResponseSpectraNamedSets',
        ),
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'JointResponseSpectraNamedSetList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'GetPlotFunctionTracesNamedSetsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(c_int),
            'NumberSelectedPlotFunctionTracesNamedSets',
        ),
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'PlotFunctionTracesNamedSetList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetGeneralizedDisplacementsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'GeneralizedDisplacementList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetSectionCutsSelectedForDisplay',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectionCutList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetElementVirtualWorkNamedSetsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'ElementVirtualWorkNamedSetList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetPushoverNamedSetsSelectedForDisplay',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PushoverNamedSetList'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetJointResponseSpectraNamedSetsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'JointResponseSpectraNamedSetList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetPlotFunctionTracesNamedSetsSelectedForDisplay',
        (
            ['in', 'out'],
            POINTER(_midlSAFEARRAY(BSTR)),
            'PlotFunctionTracesNamedSetList',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDatabaseTables implementation
# class cDatabaseTables_Impl(object):
#     def ApplyEditedTables(self, FillImportLog):
#         '-no docstring-'
#         #return NumFatalErrors, NumErrorMsgs, NumWarnMsgs, NumInfoMsgs, ImportLog, pRetVal
#
#     def CancelTableEditing(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAllFieldsInTable(self, TableKey):
#         '-no docstring-'
#         #return TableVersion, NumberFields, FieldKey, FieldName, Description, UnitsString, IsImportable, pRetVal
#
#     def GetAllTables(self):
#         '-no docstring-'
#         #return NumberTables, TableKey, TableName, ImportType, IsEmpty, pRetVal
#
#     def GetAvailableTables(self):
#         '-no docstring-'
#         #return NumberTables, TableKey, TableName, ImportType, pRetVal
#
#     def GetLoadCasesSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedLoadCases, LoadCaseList, pRetVal
#
#     def GetLoadCombinationsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedLoadCombinations, LoadCombinationList, pRetVal
#
#     def GetLoadPatternsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedLoadPatterns, LoadPatternList, pRetVal
#
#     def GetTableForDisplayArray(self, TableKey, GroupName):
#         '-no docstring-'
#         #return FieldKeyList, TableVersion, FieldsKeysIncluded, NumberRecords, TableData, pRetVal
#
#     def GetTableForDisplayCSVFile(self, TableKey, GroupName, csvFilePath, sepChar):
#         '-no docstring-'
#         #return FieldKeyList, TableVersion, pRetVal
#
#     def GetTableForDisplayCSVString(self, TableKey, GroupName, sepChar):
#         '-no docstring-'
#         #return FieldKeyList, TableVersion, csvString, pRetVal
#
#     def GetTableForDisplayXMLString(self, TableKey, GroupName, IncludeSchema):
#         '-no docstring-'
#         #return FieldKeyList, TableVersion, XMLTableData, pRetVal
#
#     def GetTableForEditingArray(self, TableKey, GroupName):
#         '-no docstring-'
#         #return TableVersion, FieldsKeysIncluded, NumberRecords, TableData, pRetVal
#
#     def GetTableForEditingCSVFile(self, TableKey, GroupName, csvFilePath, sepChar):
#         '-no docstring-'
#         #return TableVersion, pRetVal
#
#     def GetTableForEditingCSVString(self, TableKey, GroupName, sepChar):
#         '-no docstring-'
#         #return TableVersion, csvString, pRetVal
#
#     def SetLoadCasesSelectedForDisplay(self):
#         '-no docstring-'
#         #return LoadCaseList, pRetVal
#
#     def SetLoadCombinationsSelectedForDisplay(self):
#         '-no docstring-'
#         #return LoadCombinationList, pRetVal
#
#     def SetLoadPatternsSelectedForDisplay(self):
#         '-no docstring-'
#         #return LoadPatternList, pRetVal
#
#     def SetTableForEditingArray(self, TableKey, NumberRecords):
#         '-no docstring-'
#         #return TableVersion, FieldsKeysIncluded, TableData, pRetVal
#
#     def SetTableForEditingCSVFile(self, TableKey, csvFilePath, sepChar):
#         '-no docstring-'
#         #return TableVersion, pRetVal
#
#     def SetTableForEditingCSVString(self, TableKey, sepChar):
#         '-no docstring-'
#         #return TableVersion, csvString, pRetVal
#
#     def ShowTablesInExcel(self, WindowHandle):
#         '-no docstring-'
#         #return TableKeyList, pRetVal
#
#     def GetObsoleteTableKeyList(self):
#         '-no docstring-'
#         #return NumberTableKeys, TableKeyList, NotesList, pRetVal
#
#     def GetTableOutputOptionsForDisplay(self):
#         '-no docstring-'
#         #return BaseReactionGX, BaseReactionGY, BaseReactionGZ, IsAllModes, StartMode, EndMode, IsAllBucklingModes, StartBucklingMode, EndBucklingMode, ModalHistory, DirectHistory, NonlinearStatic, MultistepStatic, SteadyState, SteadyStateOption, PowerSpectralDensity, Combo, BridgeDesign, pRetVal
#
#     def SetTableOutputOptionsForDisplay(self, BaseReactionGX, BaseReactionGY, BaseReactionGZ, IsAllModes, StartMode, EndMode, IsAllBucklingModes, StartBucklingMode, EndBucklingMode, ModalHistory, DirectHistory, NonlinearStatic, MultistepStatic, SteadyState, SteadyStateOption, PowerSpectralDensity, Combo, BridgeDesign):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetGeneralizedDisplacementsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedGeneralizedDisplacements, GeneralizedDisplacementList, pRetVal
#
#     def GetSectionCutsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedSectionCuts, SectionCutList, pRetVal
#
#     def GetElementVirtualWorkNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedElementVirtualWorkNamedSets, ElementVirtualWorkNamedSetList, pRetVal
#
#     def GetPushoverNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedPushoverNamedSets, PushoverNamedSetList, pRetVal
#
#     def GetJointResponseSpectraNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedJointResponseSpectraNamedSets, JointResponseSpectraNamedSetList, pRetVal
#
#     def GetPlotFunctionTracesNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return NumberSelectedPlotFunctionTracesNamedSets, PlotFunctionTracesNamedSetList, pRetVal
#
#     def SetGeneralizedDisplacementsSelectedForDisplay(self):
#         '-no docstring-'
#         #return GeneralizedDisplacementList, pRetVal
#
#     def SetSectionCutsSelectedForDisplay(self):
#         '-no docstring-'
#         #return SectionCutList, pRetVal
#
#     def SetElementVirtualWorkNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return ElementVirtualWorkNamedSetList, pRetVal
#
#     def SetPushoverNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return PushoverNamedSetList, pRetVal
#
#     def SetJointResponseSpectraNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return JointResponseSpectraNamedSetList, pRetVal
#
#     def SetPlotFunctionTracesNamedSetsSelectedForDisplay(self):
#         '-no docstring-'
#         #return PlotFunctionTracesNamedSetList, pRetVal
#
# values for enumeration 'eTemperature'
eTemperature_NotApplicable = 0
eTemperature_F = 1
eTemperature_C = 2
eTemperature = c_int  # enum

cCaseResponseSpectrum._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetDampOverrides',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_double), 'DampA'),
        (['in', 'out'], POINTER(c_double), 'DampB'),
        (['in', 'out'], POINTER(c_double), 'DampF1'),
        (['in', 'out'], POINTER(c_double), 'DampF2'),
        (['in', 'out'], POINTER(c_double), 'DampD1'),
        (['in', 'out'], POINTER(c_double), 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetDampType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetDiaphragmEccentricityOverride',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Eccen'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetDirComb',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetEccentricity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetModalCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetModalComb',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'F1'),
        (['in', 'out'], POINTER(c_double), 'F2'),
        (['in', 'out'], POINTER(c_double), 'Td'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetModalComb_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'F1'),
        (['in', 'out'], POINTER(c_double), 'F2'),
        (['in', 'out'], POINTER(c_int), 'PeriodicRigidCombType'),
        (['in', 'out'], POINTER(c_double), 'Td'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetEccentricity',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Eccen'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetModalCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetDampOverrides',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_double, 'DampA'),
        (['in'], c_double, 'DampB'),
        (['in'], c_double, 'DampF1'),
        (['in'], c_double, 'DampF2'),
        (['in'], c_double, 'DampD1'),
        (['in'], c_double, 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetDiaphragmEccentricityOverride',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Diaph'),
        (['in'], c_double, 'Eccen'),
        (['in', 'optional'], VARIANT_BOOL, 'Delete', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetDirComb',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetModalComb',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in', 'optional'], c_double, 'F1', 1.0),
        (['in', 'optional'], c_double, 'F2', 0.0),
        (['in', 'optional'], c_double, 'Td', 60.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'SetModalComb_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in', 'optional'], c_double, 'F1', 1.0),
        (['in', 'optional'], c_double, 'F2', 0.0),
        (['in', 'optional'], c_int, 'PeriodicRigidCombType', 1),
        (['in', 'optional'], c_double, 'Td', 60.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseResponseSpectrum implementation
# class cCaseResponseSpectrum_Impl(object):
#     def GetDampConstant(self, Name):
#         '-no docstring-'
#         #return Damp, pRetVal
#
#     def GetDampInterpolated(self, Name):
#         '-no docstring-'
#         #return DampType, NumberItems, Time, Damp, pRetVal
#
#     def GetDampOverrides(self, Name):
#         '-no docstring-'
#         #return NumberItems, Mode, Damp, pRetVal
#
#     def GetDampProportional(self, Name):
#         '-no docstring-'
#         #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
#
#     def GetDampType(self, Name):
#         '-no docstring-'
#         #return DampType, pRetVal
#
#     def GetDiaphragmEccentricityOverride(self, Name):
#         '-no docstring-'
#         #return Num, Diaph, Eccen, pRetVal
#
#     def GetDirComb(self, Name):
#         '-no docstring-'
#         #return MyType, SF, pRetVal
#
#     def GetEccentricity(self, Name):
#         '-no docstring-'
#         #return Eccen, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadName, Func, SF, CSys, Ang, pRetVal
#
#     def GetModalCase(self, Name):
#         '-no docstring-'
#         #return ModalCase, pRetVal
#
#     def GetModalComb(self, Name):
#         '-no docstring-'
#         #return MyType, F1, F2, Td, pRetVal
#
#     def GetModalComb_1(self, Name):
#         '-no docstring-'
#         #return MyType, F1, F2, PeriodicRigidCombType, Td, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEccentricity(self, Name, Eccen):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadName, Func, SF, CSys, Ang, pRetVal
#
#     def SetModalCase(self, Name, ModalCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampConstant(self, Name, Damp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampInterpolated(self, Name, DampType, NumberItems):
#         '-no docstring-'
#         #return Time, Damp, pRetVal
#
#     def SetDampOverrides(self, Name, NumberItems):
#         '-no docstring-'
#         #return Mode, Damp, pRetVal
#
#     def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDiaphragmEccentricityOverride(self, Name, Diaph, Eccen, Delete):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDirComb(self, Name, MyType, SF):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModalComb(self, Name, MyType, F1, F2, Td):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModalComb_1(self, Name, MyType, F1, F2, PeriodicRigidCombType, Td):
#         '-no docstring-'
#         #return pRetVal
#


class cDStChinese_2002(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{AF2C62D2-0364-4581-A1AF-311F315A8204}')
    _idlflags_ = ['dual', 'oleautomation']


cDStChinese_2002._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStChinese_2002 implementation
# class cDStChinese_2002_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDCoNZS_3101_2006._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoNZS_3101_2006 implementation
# class cDCoNZS_3101_2006_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cModifierFrame._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cModifierFrame implementation
# class cModifierFrame_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
# values for enumeration 'eWallPierRebarLayerType'
eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface = 1
eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface = 2
eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total = 3
eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total = 4
eWallPierRebarLayerType_Confinement_EndZoneI = 5
eWallPierRebarLayerType_Confinement_EndZoneJ = 6
eWallPierRebarLayerType_Diagonal_Each = 7
eWallPierRebarLayerType = c_int  # enum
# values for enumeration 'eBridgeObjectFoundationPart'
eBridgeObjectFoundationPart_Footing = 1
eBridgeObjectFoundationPart_PileCap = 2
eBridgeObjectFoundationPart_Pile = 3
eBridgeObjectFoundationPart_FoundationSpring = 4
eBridgeObjectFoundationPart = c_int  # enum
# values for enumeration 'eForce'
eForce_NotApplicable = 0
eForce_lb = 1
eForce_kip = 2
eForce_N = 3
eForce_kN = 4
eForce_kgf = 5
eForce_tonf = 6
eForce = c_int  # enum


class cFunctionSS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{DE48C6AD-F048-4913-AC89-AF9BF81D40CE}')
    _idlflags_ = ['dual', 'oleautomation']


cFunctionSS._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetFromFile',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(c_int), 'HeadLines'),
        (['in', 'out'], POINTER(c_int), 'PreChars'),
        (['in', 'out'], POINTER(c_int), 'PointsPerLine'),
        (['in', 'out'], POINTER(c_int), 'ValueType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreeFormat'),
        (['in', 'out'], POINTER(c_int), 'NumberFixed'),
        (['in', 'out'], POINTER(c_int), 'FreqTypeInFile'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetUser',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetFromFile',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FileName'),
        (['in'], c_int, 'HeadLines'),
        (['in'], c_int, 'PreChars'),
        (['in'], c_int, 'PointsPerLine'),
        (['in'], c_int, 'ValueType'),
        (['in'], VARIANT_BOOL, 'FreeFormat'),
        (['in', 'optional'], c_int, 'NumberFixed', 10),
        (['in', 'optional'], c_int, 'FreqTypeInFile', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetUser',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Frequency'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cFunctionSS implementation
# class cFunctionSS_Impl(object):
#     def GetFromFile(self, Name):
#         '-no docstring-'
#         #return FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile, pRetVal
#
#     def GetUser(self, Name):
#         '-no docstring-'
#         #return NumberItems, Frequency, Value, pRetVal
#
#     def SetFromFile(self, Name, FileName, HeadLines, PreChars, PointsPerLine, ValueType, FreeFormat, NumberFixed, FreqTypeInFile):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUser(self, Name, NumberItems):
#         '-no docstring-'
#         #return Frequency, Value, pRetVal
#


class cDStItalianNTC2018S(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{9C481C4A-80AB-4599-8088-57C1E5F78499}')
    _idlflags_ = ['dual', 'oleautomation']


cDStItalianNTC2018S._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(BSTR), 'textValue'),
        (['in', 'out'], POINTER(c_double), 'numericValue'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(BSTR), 'textValue'),
        (['in', 'out'], POINTER(c_double), 'numericValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], BSTR, 'textValue'),
        (['in'], c_double, 'numericValue'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], BSTR, 'textValue'),
        (['in'], c_double, 'numericValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStItalianNTC2018S implementation
# class cDStItalianNTC2018S_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return textValue, numericValue, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return textValue, numericValue, pRetVal
#
#     def SetOverwrite(self, Name, Item, textValue, numericValue, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, textValue, numericValue):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eBridgeObjectBentPart'
eBridgeObjectBentPart_CapBeam = 1
eBridgeObjectBentPart_Column = 2
eBridgeObjectBentPart_Bearing = 3
eBridgeObjectBentPart_Wall = 4
eBridgeObjectBentPart = c_int  # enum

cDCoCSA_A23_3_14._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoCSA_A23_3_14 implementation
# class cDCoCSA_A23_3_14_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class StartService(CoClass):
    _reg_clsid_ = GUID('{5398F99F-2830-3EB5-9253-0D38B1258071}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AADDD124-B054-4C6E-A088-711A06245B57}', 1, 0)


class _StartService(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{6D5A33AE-23E7-3B3E-BFBD-270BEB88BDEF}')
    _idlflags_ = ['hidden', 'dual', 'oleautomation']


StartService._com_interfaces_ = [_StartService, comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4._Object]
# values for enumeration 'eMatTypeTendon'
eMatTypeTendon_ASTM_A416Gr250 = 1
eMatTypeTendon_ASTM_A416Gr270 = 2
eMatTypeTendon = c_int  # enum

_StartService._methods_ = [
]

################################################################
# code template for _StartService implementation
# class _StartService_Impl(object):
# values for enumeration 'eBridgeResponseStress'
eBridgeResponseStress_S11_Longitudinal_Top_Left = 0
eBridgeResponseStress_S11_Longitudinal_Top_Center = 1
eBridgeResponseStress_S11_Longitudinal_Top_Right = 2
eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center = 3
eBridgeResponseStress_S11_Longitudinal_Top_Envelope = 4
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left = 5
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center = 6
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right = 7
eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope = 8
eBridgeResponseStress_S11_Longitudinal_Top_URight_Left = 9
eBridgeResponseStress_S11_Longitudinal_Top_URight_Center = 10
eBridgeResponseStress_S11_Longitudinal_Top_URight_Right = 11
eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope = 12
eBridgeResponseStress_S11_Longitudinal_Bot_Left = 13
eBridgeResponseStress_S11_Longitudinal_Bot_Center = 14
eBridgeResponseStress_S11_Longitudinal_Bot_Right = 15
eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left = 16
eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right = 17
eBridgeResponseStress_S11_Longitudinal_Bot_Envelope = 18
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left = 19
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center = 20
eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right = 21
eBridgeResponseStress_S11_Lateral_Bending_Top = 22
eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft = 23
eBridgeResponseStress_S11_Lateral_Bending_Top_URight = 24
eBridgeResponseStress_S11_Lateral_Bending_Bot = 25
eBridgeResponseStress = c_int  # enum
# values for enumeration 'eObjType'
eObjType_Point = 1
eObjType_Frame = 2
eObjType_Area = 3
eObjType_Solid = 6
eObjType = c_int  # enum

cTendonObj._methods_ = [
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetTendonGeometry',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddByCoord',
        (['in'], c_double, 'XI'),
        (['in'], c_double, 'YI'),
        (['in'], c_double, 'ZI'),
        (['in'], c_double, 'XJ'),
        (['in'], c_double, 'YJ'),
        (['in'], c_double, 'ZJ'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddByPoint',
        (['in'], BSTR, 'Point1'),
        (['in'], BSTR, 'Point2'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DeleteLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'DeleteLoadForceStress',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'DeleteLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetDiscretization',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDI'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RDJ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetLoadedGroup',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GroupName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetLoadForceStress',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'JackFrom'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CurvatureCoeff'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'WobbleCoeff'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossAnchorage'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShortening'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossCreep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossShrinkage'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LossSteelRelax'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Point1'),
        (['in', 'out'], POINTER(BSTR), 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetTCLimits',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists'),
        (['in', 'out'], POINTER(c_double), 'LimitCompression'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists'),
        (['in', 'out'], POINTER(c_double), 'LimitTension'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetTendonData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'SetDiscretization',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(c_double), 'D'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetLoadedGroup',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetLoadForceStress',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'JackFrom'),
        (['in'], c_int, 'LoadType'),
        (['in'], c_double, 'Value'),
        (['in'], c_double, 'CurvatureCoeff'),
        (['in'], c_double, 'WobbleCoeff'),
        (['in'], c_double, 'LossAnchorage'),
        (['in'], c_double, 'LossShortening'),
        (['in'], c_double, 'LossCreep'),
        (['in'], c_double, 'LossShrinkage'),
        (['in'], c_double, 'LossSteelRelax'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Strain'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Val'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Ang'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetTCLimits',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'LimitCompressionExists'),
        (['in'], c_double, 'LimitCompression'),
        (['in'], VARIANT_BOOL, 'LimitTensionExists'),
        (['in'], c_double, 'LimitTension'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetTendonData',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'DeleteLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'DeleteLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TendonName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Temp'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cTendonObj implementation
# class cTendonObj_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetTendonGeometry(self, Name, CSys):
#         '-no docstring-'
#         #return NumberPoints, X, Y, Z, pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def AddByCoord(self, XI, YI, ZI, XJ, YJ, ZJ, PropName, UserName, CSys):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def AddByPoint(self, Point1, Point2, PropName, UserName):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def Delete(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadForceStress(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDiscretization(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return NElm, Elm, RDI, RDJ, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetLoadDeformation(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, TendonName, LoadPat, U1, pRetVal
#
#     def GetLoadedGroup(self, Name):
#         '-no docstring-'
#         #return GroupName, pRetVal
#
#     def GetLoadForceStress(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, TendonName, LoadPat, JackFrom, LoadType, Value, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, TendonName, LoadPat, Val, PatternName, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point1, Point2, pRetVal
#
#     def GetTCLimits(self, Name):
#         '-no docstring-'
#         #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
#
#     def GetTendonData(self, Name, CSys):
#         '-no docstring-'
#         #return NumberPoints, MyType, X, Y, Z, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetDiscretization(self, Name, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadDeformation(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return D, pRetVal
#
#     def SetLoadedGroup(self, Name, GroupName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadForceStress(self, Name, LoadPat, JackFrom, LoadType, Value, CurvatureCoeff, WobbleCoeff, LossAnchorage, LossShortening, LossCreep, LossShrinkage, LossSteelRelax, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadStrain(self, Name, LoadPat, Strain, Replace, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTemperature(self, Name, LoadPat, Val, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxes(self, Name, Ang, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetProperty(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTCLimits(self, Name, LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTendonData(self, Name, NumberPoints, CSys):
#         '-no docstring-'
#         #return MyType, X, Y, Z, pRetVal
#
#     def DeleteLoadGravity(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadStrain(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadGravity(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, TendonName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadStrain(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, TendonName, LoadPat, Strain, PatternName, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def SetMatTemp(self, Name, Temp, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#


class cDCdAISI_LRFD96(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{3C98F830-770B-4176-9852-1C96CCC31015}')
    _idlflags_ = ['dual', 'oleautomation']


cDCdAISI_LRFD96._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCdAISI_LRFD96 implementation
# class cDCdAISI_LRFD96_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cPointObj._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddCartesian',
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'MergeOff', False),
        (['in', 'optional'], c_int, 'MergeNumber', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'CountLoadDispl',
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'LoadPat', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'CountLoadForce',
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'LoadPat', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'CountPanelZone',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'CountRestraint',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'CountSpring',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'DeleteLoadDispl',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'DeleteLoadForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'DeleteMass',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'DeletePanelZone',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'DeleteRestraint',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'DeleteSpecialPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'DeleteSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetCommonTo',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'CommonTo'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetConnectivity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNumber'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetCoordCartesian',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetCoordCylindrical',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'Theta'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetCoordSpherical',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Elm'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetLoadDispl',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetLoadForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'GetMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'GetPanelZone',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'PropType'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'K1'),
        (['in', 'out'], POINTER(c_double), 'K2'),
        (['in', 'out'], POINTER(BSTR), 'LinkProp'),
        (['in', 'out'], POINTER(c_int), 'Connectivity'),
        (['in', 'out'], POINTER(c_int), 'LocalAxisFrom'),
        (['in', 'out'], POINTER(c_double), 'LocalAxisAngle'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'GetRestraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'GetSpecialPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecialPoint'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'GetSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'GetSpringCoupled',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'IsSpringCoupled',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsCoupled'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetLoadDispl',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetLoadForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetMassByVolume',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetMassByWeight',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'SetPanelZone',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'PropType'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'K1'),
        (['in'], c_double, 'K2'),
        (['in'], BSTR, 'LinkProp'),
        (['in'], c_int, 'Connectivity'),
        (['in'], c_int, 'LocalAxisFrom'),
        (['in'], c_double, 'LocalAxisAngle'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'SetRestraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'SetSpecialPoint',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'SpecialPoint'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(58)],
        HRESULT,
        'SetSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', True),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(59)],
        HRESULT,
        'SetSpringCoupled',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], VARIANT_BOOL, 'IsLocalCSys', False),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(76)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'CountConstraint',
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'DeleteConstraint',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetConstraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ConstraintName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetConstraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ConstraintName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'DeletePatternValue',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'GetPatternValue',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PatternName'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'SetPatternByPressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PatternName'),
        (['in'], c_double, 'Z'),
        (['in'], c_double, 'W'),
        (['in', 'out'], POINTER(c_double), 'U'),
        (['in', 'out'], POINTER(c_int), 'R'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], c_int, 'Restriction', 0),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'SetPatternByXYZ',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PatternName'),
        (['in'], c_double, 'A'),
        (['in'], c_double, 'B'),
        (['in'], c_double, 'C'),
        (['in'], c_double, 'D'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['in', 'optional'], c_int, 'Restriction', 0),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'GetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['in', 'out'], POINTER(c_int), 'AxVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in', 'out'], POINTER(c_int), 'Plane2'),
        (['in', 'out'], POINTER(c_int), 'PlVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'A'),
        (['in'], c_double, 'B'),
        (['in'], c_double, 'C'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Active'),
        (['in'], c_int, 'AxVectOpt'),
        (['in'], BSTR, 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in'], c_int, 'Plane2'),
        (['in'], c_int, 'PlVectOpt'),
        (['in'], BSTR, 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'AddCylindrical',
        (['in'], c_double, 'R'),
        (['in'], c_double, 'Theta'),
        (['in'], c_double, 'Z'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'MergeOff', False),
        (['in', 'optional'], c_int, 'MergeNumber', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'AddSpherical',
        (['in'], c_double, 'R'),
        (['in'], c_double, 'A'),
        (['in'], c_double, 'B'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'MergeOff', False),
        (['in', 'optional'], c_int, 'MergeNumber', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'GetMergeNumber',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MergeNumber'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66)],
        HRESULT,
        'SetMergeNumber',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MergeNumber'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(70)],
        HRESULT,
        'GetLoadForceWithGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'GUID'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(71)],
        HRESULT,
        'SetLoadForceWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', False),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(72)],
        HRESULT,
        'DeleteLoadForceWithGUID',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPointObj implementation
# class cPointObj_Impl(object):
#     def AddCartesian(self, X, Y, Z, UserName, CSys, MergeOff, MergeNumber):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountLoadDispl(self, Name, LoadPat):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def CountLoadForce(self, Name, LoadPat):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def CountPanelZone(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountRestraint(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountSpring(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadDispl(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadForce(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteMass(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeletePanelZone(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteRestraint(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteSpecialPoint(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteSpring(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCommonTo(self, Name):
#         '-no docstring-'
#         #return CommonTo, pRetVal
#
#     def GetConnectivity(self, Name):
#         '-no docstring-'
#         #return NumberItems, ObjectType, ObjectName, PointNumber, pRetVal
#
#     def GetCoordCartesian(self, Name, CSys):
#         '-no docstring-'
#         #return X, Y, Z, pRetVal
#
#     def GetCoordCylindrical(self, Name, CSys):
#         '-no docstring-'
#         #return R, Theta, Z, pRetVal
#
#     def GetCoordSpherical(self, Name, CSys):
#         '-no docstring-'
#         #return R, A, B, pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return Elm, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetLoadDispl(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, PointName, LoadPat, LcStep, CSys, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetLoadForce(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return A, B, C, Advanced, pRetVal
#
#     def GetMass(self, Name):
#         '-no docstring-'
#         #return M, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetPanelZone(self, Name):
#         '-no docstring-'
#         #return PropType, Thickness, K1, K2, LinkProp, Connectivity, LocalAxisFrom, LocalAxisAngle, pRetVal
#
#     def GetRestraint(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetSpecialPoint(self, Name):
#         '-no docstring-'
#         #return SpecialPoint, pRetVal
#
#     def GetSpring(self, Name):
#         '-no docstring-'
#         #return K, pRetVal
#
#     def GetSpringCoupled(self, Name):
#         '-no docstring-'
#         #return K, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def IsSpringCoupled(self, Name):
#         '-no docstring-'
#         #return IsCoupled, pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadDispl(self, Name, LoadPat, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetLoadForce(self, Name, LoadPat, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetMass(self, Name, ItemType, IsLocalCSys, Replace):
#         '-no docstring-'
#         #return M, pRetVal
#
#     def SetMassByVolume(self, Name, MatProp, ItemType, IsLocalCSys, Replace):
#         '-no docstring-'
#         #return M, pRetVal
#
#     def SetMassByWeight(self, Name, ItemType, IsLocalCSys, Replace):
#         '-no docstring-'
#         #return M, pRetVal
#
#     def SetPanelZone(self, Name, PropType, Thickness, K1, K2, LinkProp, Connectivity, LocalAxisFrom, LocalAxisAngle, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetRestraint(self, Name, ItemType):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSpecialPoint(self, Name, SpecialPoint, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSpring(self, Name, ItemType, IsLocalCSys, Replace):
#         '-no docstring-'
#         #return K, pRetVal
#
#     def SetSpringCoupled(self, Name, ItemType, IsLocalCSys, Replace):
#         '-no docstring-'
#         #return K, pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def CountConstraint(self, Name):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def DeleteConstraint(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetConstraint(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, PointName, ConstraintName, pRetVal
#
#     def SetConstraint(self, Name, ItemType, Replace):
#         '-no docstring-'
#         #return ConstraintName, pRetVal
#
#     def DeletePatternValue(self, Name, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetPatternValue(self, Name, PatternName):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetPatternByPressure(self, Name, PatternName, Z, W, ItemType, Restriction, Replace):
#         '-no docstring-'
#         #return U, R, pRetVal
#
#     def SetPatternByXYZ(self, Name, PatternName, A, B, C, D, ItemType, Restriction, Replace):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLocalAxesAdvanced(self, Name):
#         '-no docstring-'
#         #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
#
#     def SetLocalAxes(self, Name, A, B, C, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
#         '-no docstring-'
#         #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
#
#     def AddCylindrical(self, R, Theta, Z, UserName, CSys, MergeOff, MergeNumber):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def AddSpherical(self, R, A, B, UserName, CSys, MergeOff, MergeNumber):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def GetMergeNumber(self, Name):
#         '-no docstring-'
#         #return MergeNumber, pRetVal
#
#     def SetMergeNumber(self, Name, MergeNumber, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadForceWithGUID(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, GUID, pRetVal
#
#     def SetLoadForceWithGUID(self, Name, LoadPat, Replace, CSys):
#         '-no docstring-'
#         #return Value, GUID, pRetVal
#
#     def DeleteLoadForceWithGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#

cView._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'RefreshView',
        (['in', 'optional'], c_int, 'Window', 0),
        (['in', 'optional'], VARIANT_BOOL, 'Zoom', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'RefreshWindow',
        (['in', 'optional'], c_int, 'Window', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cView implementation
# class cView_Impl(object):
#     def RefreshView(self, Window, Zoom):
#         '-no docstring-'
#         #return pRetVal
#
#     def RefreshWindow(self, Window):
#         '-no docstring-'
#         #return pRetVal
#

cDesignForces._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'BeamDesignForces',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'BraceDesignForces',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ColumnDesignForces',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberResults'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Station'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDesignForces implementation
# class cDesignForces_Impl(object):
#     def BeamDesignForces(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
#
#     def BraceDesignForces(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
#
#     def ColumnDesignForces(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberResults, FrameName, ComboName, Station, P, V2, V3, T, M2, M3, pRetVal
#


class cDStEurocode_3_2005(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{11B1F6DB-149E-4967-AE13-9EC2E930E2AA}')
    _idlflags_ = ['dual', 'oleautomation']


cDStEurocode_3_2005._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStEurocode_3_2005 implementation
# class cDStEurocode_3_2005_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eBridgeSegmentConstructionMethod'
eBridgeSegmentConstructionMethod_Precast = 0
eBridgeSegmentConstructionMethod_CastInPlace = 1
eBridgeSegmentConstructionMethod = c_int  # enum
# values for enumeration 'eLength'
eLength_NotApplicable = 0
eLength_inch = 1
eLength_ft = 2
eLength_micron = 3
eLength_mm = 4
eLength_cm = 5
eLength_m = 6
eLength = c_int  # enum

cPropArea._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['in', 'optional'], c_int, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], c_int, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetShellDesign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_int), 'SteelLayoutOption'),
        (['in', 'out'], POINTER(c_double), 'DesignCoverTopDir1'),
        (['in', 'out'], POINTER(c_double), 'DesignCoverTopDir2'),
        (['in', 'out'], POINTER(c_double), 'DesignCoverBotDir1'),
        (['in', 'out'], POINTER(c_double), 'DesignCoverBotDir2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetShellLayer',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLayers'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetShellLayer_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLayers'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'GetShellLayer_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLayers'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MatBehavior'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'PropType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetShellDesign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_int, 'SteelLayoutOption'),
        (['in'], c_double, 'DesignCoverTopDir1'),
        (['in'], c_double, 'DesignCoverTopDir2'),
        (['in'], c_double, 'DesignCoverBotDir1'),
        (['in'], c_double, 'DesignCoverBotDir2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetShellLayer',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLayers'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Nonlinear'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetShellLayer_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLayers'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetShellLayer_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLayers'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LayerName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'NumIntegrationPts'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MatAng'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MatBehavior'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S11Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S22Type'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'S12Type'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetShell',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ShellType'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'MatAng'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Bending'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetShell_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ShellType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IncludeDrillingDOF'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'MatAng'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Bending'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'GetAsolid',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'MatAng'),
        (['in', 'out'], POINTER(c_double), 'Arc'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Incompatible'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'GetNotionalSize',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'stype'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'GetPlane',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'MatAng'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Incompatible'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetAsolid',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'MatAng'),
        (['in'], c_double, 'Arc'),
        (['in'], VARIANT_BOOL, 'Incompatible'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetNotionalSize',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'stype'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetPlane',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'MatAng'),
        (['in'], c_double, 'Thickness'),
        (['in'], VARIANT_BOOL, 'Incompatible'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetShell',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ShellType'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'MatAng'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Bending'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetShell_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ShellType'),
        (['in'], VARIANT_BOOL, 'IncludeDrillingDOF'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'MatAng'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Bending'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropArea implementation
# class cPropArea_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, PropType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self, PropType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetShellDesign(self, Name):
#         '-no docstring-'
#         #return MatProp, SteelLayoutOption, DesignCoverTopDir1, DesignCoverTopDir2, DesignCoverBotDir1, DesignCoverBotDir2, pRetVal
#
#     def GetShellLayer(self, Name):
#         '-no docstring-'
#         #return NumberLayers, LayerName, Dist, Thickness, MatProp, Nonlinear, MatAng, NumIntegrationPts, pRetVal
#
#     def GetShellLayer_1(self, Name):
#         '-no docstring-'
#         #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, S11Type, S22Type, S12Type, pRetVal
#
#     def GetShellLayer_2(self, Name):
#         '-no docstring-'
#         #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, MatBehavior, S11Type, S22Type, S12Type, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return PropType, pRetVal
#
#     def SetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetShellDesign(self, Name, MatProp, SteelLayoutOption, DesignCoverTopDir1, DesignCoverTopDir2, DesignCoverBotDir1, DesignCoverBotDir2):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetShellLayer(self, Name, NumberLayers):
#         '-no docstring-'
#         #return LayerName, Dist, Thickness, MatProp, Nonlinear, MatAng, NumIntegrationPts, pRetVal
#
#     def SetShellLayer_1(self, Name):
#         '-no docstring-'
#         #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, S11Type, S22Type, S12Type, pRetVal
#
#     def SetShellLayer_2(self, Name):
#         '-no docstring-'
#         #return NumberLayers, LayerName, Dist, Thickness, MyType, NumIntegrationPts, MatProp, MatAng, MatBehavior, S11Type, S22Type, S12Type, pRetVal
#
#     def GetShell(self, Name):
#         '-no docstring-'
#         #return ShellType, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID, pRetVal
#
#     def GetShell_1(self, Name):
#         '-no docstring-'
#         #return ShellType, IncludeDrillingDOF, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID, pRetVal
#
#     def GetAsolid(self, Name):
#         '-no docstring-'
#         #return MatProp, MatAng, Arc, Incompatible, CSys, Color, Notes, GUID, pRetVal
#
#     def GetNotionalSize(self, Name):
#         '-no docstring-'
#         #return stype, Value, pRetVal
#
#     def GetPlane(self, Name):
#         '-no docstring-'
#         #return MyType, MatProp, MatAng, Thickness, Incompatible, Color, Notes, GUID, pRetVal
#
#     def SetAsolid(self, Name, MatProp, MatAng, Arc, Incompatible, CSys, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNotionalSize(self, Name, stype, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPlane(self, Name, MyType, MatProp, MatAng, Thickness, Incompatible, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetShell(self, Name, ShellType, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetShell_1(self, Name, ShellType, IncludeDrillingDOF, MatProp, MatAng, Thickness, Bending, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#


class cAutoSeismic(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{73BEDA4F-1F55-475B-B657-0CBCE5F85011}')
    _idlflags_ = ['dual', 'oleautomation']


class cAutoWind(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F5CD3BA2-5020-4BCA-B5D8-800A0A676F0F}')
    _idlflags_ = ['dual', 'oleautomation']


class cAutoSeastate(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B58DD699-7AAA-4ECC-A54E-0F1672FE1B72}')
    _idlflags_ = ['dual', 'oleautomation']


cLoadPatterns._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], eLoadPatternType, 'MyType'),
        (['in', 'optional'], c_double, 'SelfWTMultiplier', 0.0),
        (['in', 'optional'], VARIANT_BOOL, 'AddAnalysisCase', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AutoSeismic',
        (['out', 'retval'], POINTER(POINTER(cAutoSeismic)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'AutoWind',
        (['out', 'retval'], POINTER(POINTER(cAutoWind)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetAutoSeismicCode',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetAutoWindCode',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetLoadType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eLoadPatternType), 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetSelfWTMultiplier',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'SelfWTMultiplier'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetLoadType',
        (['in'], BSTR, 'Name'),
        (['in'], eLoadPatternType, 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetSelfWTMultiplier',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'SelfWTMultiplier'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'AutoSeastate',
        (['out', 'retval'], POINTER(POINTER(cAutoSeastate)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetAutoWaveCode',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cLoadPatterns implementation
# class cLoadPatterns_Impl(object):
#     def Add(self, Name, MyType, SelfWTMultiplier, AddAnalysisCase):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AutoSeismic(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AutoWind(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAutoSeismicCode(self, Name):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def GetAutoWindCode(self, Name):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def GetLoadType(self, Name):
#         '-no docstring-'
#         #return MyType, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetSelfWTMultiplier(self, Name):
#         '-no docstring-'
#         #return SelfWTMultiplier, pRetVal
#
#     def SetLoadType(self, Name, MyType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelfWTMultiplier(self, Name, SelfWTMultiplier):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AutoSeastate(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAutoWaveCode(self, Name):
#         '-no docstring-'
#         #return CodeName, pRetVal
#


class cDCdAISI_ASD96(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{EA47FB02-6BFB-4E83-BED3-144F3B2D4341}')
    _idlflags_ = ['dual', 'oleautomation']


cDCdAISI_ASD96._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCdAISI_ASD96 implementation
# class cDCdAISI_ASD96_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cExternalAnalysisResults._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'DeleteAllFrameForces',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'DeleteFrameForces',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetFrameForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadCase'),
        (['in'], c_int, 'StepNum'),
        (['in', 'out'], POINTER(c_int), 'NumberStations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetFrameStations',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberStations'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'PresetFrameCases',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in'], c_int, 'Count'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetFrameForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadCase'),
        (['in'], c_int, 'StepNum'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetFrameStations',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'ObjSta'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetFrameForceMultiple',
        (['in'], c_int, 'NumberFrameNames'),
        (['in'], _midlSAFEARRAY(BSTR), 'FrameName'),
        (['in'], c_int, 'NumberLoadCases'),
        (['in'], _midlSAFEARRAY(BSTR), 'LoadCase'),
        (['in'], _midlSAFEARRAY(c_int), 'FirstStep'),
        (['in'], _midlSAFEARRAY(c_int), 'LastStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cExternalAnalysisResults implementation
# class cExternalAnalysisResults_Impl(object):
#     def DeleteAllFrameForces(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteFrameForces(self):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def GetFrameForce(self, Name, LoadCase, StepNum):
#         '-no docstring-'
#         #return NumberStations, P, V2, V3, T, M2, M3, pRetVal
#
#     def GetFrameStations(self):
#         '-no docstring-'
#         #return Name, NumberStations, ObjSta, pRetVal
#
#     def PresetFrameCases(self, Count):
#         '-no docstring-'
#         #return Name, LoadCase, pRetVal
#
#     def SetFrameForce(self, Name, LoadCase, StepNum):
#         '-no docstring-'
#         #return P, V2, V3, T, M2, M3, pRetVal
#
#     def SetFrameStations(self):
#         '-no docstring-'
#         #return Name, ObjSta, pRetVal
#
#     def SetFrameForceMultiple(self, NumberFrameNames, FrameName, NumberLoadCases, LoadCase, FirstStep, LastStep):
#         '-no docstring-'
#         #return P, V2, V3, T, M2, M3, pRetVal
#

cDCoMexican_RCDF_2004._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoMexican_RCDF_2004 implementation
# class cDCoMexican_RCDF_2004_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDStNorsok_N0042013(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{143A51D1-72EF-4533-8DD0-811F3FB26010}')
    _idlflags_ = ['dual', 'oleautomation']


cDStNorsok_N0042013._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStNorsok_N0042013 implementation
# class cDStNorsok_N0042013_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cPointElm._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'CountConstraint',
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'CountLoadDispl',
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'LoadPat', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'CountLoadForce',
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['in', 'optional'], BSTR, 'Name', ''),
        (['in', 'optional'], BSTR, 'LoadPat', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'CountRestraint',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'CountSpring',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetConnectivity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointNumber'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetConstraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ConstraintName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetCoordCartesian',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetLoadDispl',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetLoadForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LcStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'F3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetObj',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Obj'),
        (['in', 'out'], POINTER(c_int), 'ObjType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetPatternValue',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PatternName'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetRestraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetSpringCoupled',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'K'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'IsSpringCoupled',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsCoupled'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetCoordCylindrical',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'Theta'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetCoordSpherical',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetMergeNumber',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MergeNumber'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPointElm implementation
# class cPointElm_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountConstraint(self, Name):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def CountLoadDispl(self, Name, LoadPat):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def CountLoadForce(self, Name, LoadPat):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def CountRestraint(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountSpring(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetConnectivity(self, Name):
#         '-no docstring-'
#         #return NumberItems, ObjectType, ObjectName, PointNumber, pRetVal
#
#     def GetConstraint(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PointName, ConstraintName, pRetVal
#
#     def GetCoordCartesian(self, Name, CSys):
#         '-no docstring-'
#         #return X, Y, Z, pRetVal
#
#     def GetLoadDispl(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PointName, LoadPat, LcStep, CSys, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetLoadForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, PointName, LoadPat, LcStep, CSys, F1, F2, F3, M1, M2, M3, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return A, B, C, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetObj(self, Name):
#         '-no docstring-'
#         #return Obj, ObjType, pRetVal
#
#     def GetPatternValue(self, Name, PatternName):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetRestraint(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetSpring(self, Name):
#         '-no docstring-'
#         #return K, pRetVal
#
#     def GetSpringCoupled(self, Name):
#         '-no docstring-'
#         #return K, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def IsSpringCoupled(self, Name):
#         '-no docstring-'
#         #return IsCoupled, pRetVal
#
#     def GetCoordCylindrical(self, Name, CSys):
#         '-no docstring-'
#         #return R, Theta, Z, pRetVal
#
#     def GetCoordSpherical(self, Name, CSys):
#         '-no docstring-'
#         #return R, A, B, pRetVal
#
#     def GetMergeNumber(self, Name):
#         '-no docstring-'
#         #return MergeNumber, pRetVal
#
# values for enumeration 'eMatCoupledType'
eMatCoupledType_None = 1
eMatCoupledType_VonMisesPlasticity = 2
eMatCoupledType_ModifiedDarwinPecknoldConcrete = 3
eMatCoupledType = c_int  # enum
# values for enumeration 'eBridgeCodeAASHTO'
eBridgeCodeAASHTO_AASHTO_STD_2002 = 0
eBridgeCodeAASHTO_AASHTO_LRFD_2007 = 1
eBridgeCodeAASHTO_AASHTO_LRFD_2012 = 2
eBridgeCodeAASHTO_AASHTO_LRFD_2014 = 3
eBridgeCodeAASHTO_AASHTO_LRFD_2017 = 4
eBridgeCodeAASHTO_AASHTO_LRFD_2020 = 5
eBridgeCodeAASHTO = c_int  # enum
# values for enumeration 'eFramePropType'
eFramePropType_I = 1
eFramePropType_Channel = 2
eFramePropType_T = 3
eFramePropType_Angle = 4
eFramePropType_DblAngle = 5
eFramePropType_Box = 6
eFramePropType_Pipe = 7
eFramePropType_Rectangular = 8
eFramePropType_Circle = 9
eFramePropType_General = 10
eFramePropType_DbChannel = 11
eFramePropType_Auto = 12
eFramePropType_SD = 13
eFramePropType_Variable = 14
eFramePropType_Joist = 15
eFramePropType_Bridge = 16
eFramePropType_Cold_C = 17
eFramePropType_Cold_2C = 18
eFramePropType_Cold_Z = 19
eFramePropType_Cold_L = 20
eFramePropType_Cold_2L = 21
eFramePropType_Cold_Hat = 22
eFramePropType_BuiltupICoverplate = 23
eFramePropType_PCCGirderI = 24
eFramePropType_PCCGirderU = 25
eFramePropType_BuiltupIHybrid = 26
eFramePropType_BuiltupUHybrid = 27
eFramePropType_Concrete_L = 28
eFramePropType_FilledTube = 29
eFramePropType_FilledPipe = 30
eFramePropType_EncasedRectangle = 31
eFramePropType_EncasedCircle = 32
eFramePropType_BucklingRestrainedBrace = 33
eFramePropType_CoreBrace_BRB = 34
eFramePropType_ConcreteTee = 35
eFramePropType_ConcreteBox = 36
eFramePropType_ConcretePipe = 37
eFramePropType_ConcreteCross = 38
eFramePropType_SteelPlate = 39
eFramePropType_SteelRod = 40
eFramePropType_PCCGirderSuperT = 41
eFramePropType_Cold_Box = 42
eFramePropType_Cold_I = 43
eFramePropType_Cold_Pipe = 44
eFramePropType_Cold_T = 45
eFramePropType_Trapezoidal = 46
eFramePropType = c_int  # enum

cEditFrame._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeConnectivity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Point1'),
        (['in'], BSTR, 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'DivideAtDistance',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Dist'),
        (['in'], VARIANT_BOOL, 'IEnd'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'DivideAtIntersections',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'DivideByRatio',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Num'),
        (['in'], c_double, 'Ratio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Extend',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'IEnd'),
        (['in'], VARIANT_BOOL, 'JEnd'),
        (['in'], BSTR, 'Item1'),
        (['in', 'optional'], BSTR, 'Item2', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Join',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Item2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'Trim',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'IEnd'),
        (['in'], VARIANT_BOOL, 'JEnd'),
        (['in'], BSTR, 'Item1'),
        (['in', 'optional'], BSTR, 'Item2', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cEditFrame implementation
# class cEditFrame_Impl(object):
#     def ChangeConnectivity(self, Name, Point1, Point2):
#         '-no docstring-'
#         #return pRetVal
#
#     def DivideAtDistance(self, Name, Dist, IEnd):
#         '-no docstring-'
#         #return NewName, pRetVal
#
#     def DivideAtIntersections(self, Name):
#         '-no docstring-'
#         #return Num, NewName, pRetVal
#
#     def DivideByRatio(self, Name, Num, Ratio):
#         '-no docstring-'
#         #return NewName, pRetVal
#
#     def Extend(self, Name, IEnd, JEnd, Item1, Item2):
#         '-no docstring-'
#         #return pRetVal
#
#     def Join(self, Name, Item2):
#         '-no docstring-'
#         #return pRetVal
#
#     def Trim(self, Name, IEnd, JEnd, Item1, Item2):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eBridgeSegmentType'
eBridgeSegmentType_Rigid = 0
eBridgeSegmentType_PierTable = 1
eBridgeSegmentType_Segment = 2
eBridgeSegmentType_Closure = 3
eBridgeSegmentType = c_int  # enum

cPropRebar._methods_ = [
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetRebarProps',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_double), 'Diameter'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetProp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_double), 'Diameter'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetProp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Area'),
        (['in'], c_double, 'Diameter'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropRebar implementation
# class cPropRebar_Impl(object):
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetRebarProps(self, Name):
#         '-no docstring-'
#         #return Area, Diameter, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetProp(self, Name):
#         '-no docstring-'
#         #return Area, Diameter, pRetVal
#
#     def SetProp(self, Name, Area, Diameter):
#         '-no docstring-'
#         #return pRetVal
#


class cOAPI(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2D94C4AB-C158-4F69-973C-3169F151088D}')
    _idlflags_ = ['dual', 'oleautomation']


cOAPI._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ApplicationExit',
        (['in'], VARIANT_BOOL, 'FileSave'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'SapModel',
        (['out', 'retval'], POINTER(POINTER(cSapModel)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetOAPIVersionNumber',
        (['out', 'retval'], POINTER(c_double), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Hide',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Unhide',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'Visible',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetAsActiveObject',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'UnsetAsActiveObject',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'InternalExec',
        (['in'], c_int, 'operation'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'ApplicationStart',
        (['in', 'optional'], eUnits, 'Units', 3),
        (['in', 'optional'], VARIANT_BOOL, 'Visible', True),
        (['in', 'optional'], BSTR, 'FileName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cOAPI implementation
# class cOAPI_Impl(object):
#     def ApplicationExit(self, FileSave):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SapModel(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetOAPIVersionNumber(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Hide(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Unhide(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Visible(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAsActiveObject(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def UnsetAsActiveObject(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def InternalExec(self, operation):
#         '-no docstring-'
#         #return pRetVal
#
#     def ApplicationStart(self, Units, Visible, FileName):
#         '-no docstring-'
#         #return pRetVal
#

cCaseModalEigen._methods_ = [
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'StaticCorrect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetNumberModes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MaxModes'),
        (['in', 'out'], POINTER(c_int), 'MinModes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'EigenShiftFreq'),
        (['in', 'out'], POINTER(c_double), 'EigenCutOff'),
        (['in', 'out'], POINTER(c_double), 'EigenTol'),
        (['in', 'out'], POINTER(c_int), 'AllowAutoFreqShift'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'TargetPar'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'StaticCorrect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetNumberModes',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MaxModes'),
        (['in'], c_int, 'MinModes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'EigenShiftFreq'),
        (['in'], c_double, 'EigenCutOff'),
        (['in'], c_double, 'EigenTol'),
        (['in'], c_int, 'AllowAutoFreqShift'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseModalEigen implementation
# class cCaseModalEigen_Impl(object):
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, TargetPar, StaticCorrect, pRetVal
#
#     def GetNumberModes(self, Name):
#         '-no docstring-'
#         #return MaxModes, MinModes, pRetVal
#
#     def GetParameters(self, Name):
#         '-no docstring-'
#         #return EigenShiftFreq, EigenCutOff, EigenTol, AllowAutoFreqShift, pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, TargetPar, StaticCorrect, pRetVal
#
#     def SetNumberModes(self, Name, MaxModes, MinModes):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetParameters(self, Name, EigenShiftFreq, EigenCutOff, EigenTol, AllowAutoFreqShift):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eTemplateType'
eTemplateType_Grid = 0
eTemplateType_Clear = 1
eTemplateType_Beam = 2
eTemplateType_SlopedTruss = 3
eTemplateType_VerticalTruss = 4
eTemplateType_SpaceTruss = 5
eTemplateType_PortalFrame = 6
eTemplateType_BracedFrame = 7
eTemplateType_EccentricFrame = 8
eTemplateType_PerimeterFrame = 9
eTemplateType_SpaceFrame = 10
eTemplateType_Bridge = 11
eTemplateType_Barrel = 12
eTemplateType_Cylinder = 13
eTemplateType_Dome = 14
eTemplateType_ShearWall = 15
eTemplateType_Floor = 16
eTemplateType_Advanced = 17
eTemplateType_UndergoundConcrete = 18
eTemplateType_Truss2D = 19
eTemplateType_Truss3D = 20
eTemplateType_Frame2D = 21
eTemplateType_Frame3D = 22
eTemplateType_BridgeWizard = 23
eTemplateType_PipesAndPlates = 24
eTemplateType_Shells = 25
eTemplateType_SolidModels = 26
eTemplateType_StorageStructures = 27
eTemplateType_Staircases = 28
eTemplateType_CableBridges = 29
eTemplateType = c_int  # enum

cDCoCSA_A23_3_19._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoCSA_A23_3_19 implementation
# class cDCoCSA_A23_3_19_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCaseBuckling._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumBucklingModes'),
        (['in', 'out'], POINTER(c_double), 'EigenTol'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumBucklingModes'),
        (['in'], c_double, 'EigenTol'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseBuckling implementation
# class cCaseBuckling_Impl(object):
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, SF, pRetVal
#
#     def GetParameters(self, Name):
#         '-no docstring-'
#         #return NumBucklingModes, EigenTol, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, SF, pRetVal
#
#     def SetParameters(self, Name, NumBucklingModes, EigenTol):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eMatType'
eMatType_Steel = 1
eMatType_Concrete = 2
eMatType_NoDesign = 3
eMatType_Aluminum = 4
eMatType_ColdFormed = 5
eMatType_Rebar = 6
eMatType_Tendon = 7
eMatType_Masonry = 8
eMatType = c_int  # enum


class cPropMaterialTD(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{849B4126-2A5C-4EDA-8579-FE4AC1DB195D}')
    _idlflags_ = ['dual', 'oleautomation']


# values for enumeration 'eMatTypeSteel'
eMatTypeSteel_ASTM_A36 = 1
eMatTypeSteel_ASTM_A53GrB = 2
eMatTypeSteel_ASTM_A500GrB_Fy42 = 3
eMatTypeSteel_ASTM_A500GrB_Fy46 = 4
eMatTypeSteel_ASTM_A572Gr50 = 5
eMatTypeSteel_ASTM_A913Gr50 = 6
eMatTypeSteel_ASTM_A992_Fy50 = 7
eMatTypeSteel_Chinese_Q235 = 8
eMatTypeSteel_Chinese_Q345 = 9
eMatTypeSteel_Indian_Fe250 = 10
eMatTypeSteel_Indian_Fe345 = 11
eMatTypeSteel_EN100252_S235 = 12
eMatTypeSteel_EN100252_S275 = 13
eMatTypeSteel_EN100252_S355 = 14
eMatTypeSteel_EN100252_S450 = 15
eMatTypeSteel_Chinese_Q355 = 16
eMatTypeSteel = c_int  # enum
# values for enumeration 'eMatTypeConcrete'
eMatTypeConcrete_FC3000_NormalWeight = 1
eMatTypeConcrete_FC4000_NormalWeight = 2
eMatTypeConcrete_FC5000_NormalWeight = 3
eMatTypeConcrete_FC6000_NormalWeight = 4
eMatTypeConcrete_FC3000_LightWeight = 5
eMatTypeConcrete_FC4000_LightWeight = 6
eMatTypeConcrete_FC5000_LightWeight = 7
eMatTypeConcrete_FC6000_LightWeight = 8
eMatTypeConcrete_Chinese_C20_NormalWeight = 9
eMatTypeConcrete_Chinese_C30_NormalWeight = 10
eMatTypeConcrete_Chinese_C40_NormalWeight = 11
eMatTypeConcrete_Indian_M15_NormalWeight = 12
eMatTypeConcrete_Indian_M20_NormalWeight = 13
eMatTypeConcrete_Indian_M25_NormalWeight = 14
eMatTypeConcrete_Indian_M30_NormalWeight = 15
eMatTypeConcrete_Indian_M35_NormalWeight = 16
eMatTypeConcrete_Indian_M40_NormalWeight = 17
eMatTypeConcrete_Indian_M45_NormalWeight = 18
eMatTypeConcrete_Indian_M50_NormalWeight = 19
eMatTypeConcrete_Indian_M55_NormalWeight = 20
eMatTypeConcrete_Indian_M60_NormalWeight = 21
eMatTypeConcrete_EN_C12_NormalWeight = 22
eMatTypeConcrete_EN_C16_NormalWeight = 23
eMatTypeConcrete_EN_C20_NormalWeight = 24
eMatTypeConcrete_EN_C25_NormalWeight = 25
eMatTypeConcrete_EN_C30_NormalWeight = 26
eMatTypeConcrete_EN_C35_NormalWeight = 27
eMatTypeConcrete_EN_C40_NormalWeight = 28
eMatTypeConcrete_EN_C45_NormalWeight = 29
eMatTypeConcrete_EN_C50_NormalWeight = 30
eMatTypeConcrete_EN_C55_NormalWeight = 31
eMatTypeConcrete_EN_C60_NormalWeight = 32
eMatTypeConcrete_EN_C70_NormalWeight = 33
eMatTypeConcrete_EN_C80_NormalWeight = 34
eMatTypeConcrete_EN_C90_NormalWeight = 35
eMatTypeConcrete = c_int  # enum

cPropMaterial._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddMaterial',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in'], eMatType, 'MatType'),
        (['in'], BSTR, 'Region'),
        (['in'], BSTR, 'Standard'),
        (['in'], BSTR, 'Grade'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['in', 'optional'], eMatType, 'MatType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetDamping',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'ModalRatio'),
        (['in', 'out'], POINTER(c_double), 'ViscousMassCoeff'),
        (['in', 'out'], POINTER(c_double), 'ViscousStiffCoeff'),
        (['in', 'out'], POINTER(c_double), 'HystereticMassCoeff'),
        (['in', 'out'], POINTER(c_double), 'HystereticStiffCoeff'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetMassSource',
        (['in', 'out'], POINTER(c_int), 'MyOption'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetMaterial',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eMatType), 'MatType'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetMPAnisotropic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetMPIsotropic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'E'),
        (['in', 'out'], POINTER(c_double), 'U'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'G'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetMPOrthotropic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetMPUniaxial',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'E'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], eMatType, 'MatType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetOConcrete',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Fc'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight'),
        (['in', 'out'], POINTER(c_double), 'FcsFactor'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtFc'),
        (['in', 'out'], POINTER(c_double), 'StrainUltimate'),
        (['in', 'out'], POINTER(c_double), 'FrictionAngle'),
        (['in', 'out'], POINTER(c_double), 'DilatationalAngle'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetOConcrete_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Fc'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight'),
        (['in', 'out'], POINTER(c_double), 'FcsFactor'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtFc'),
        (['in', 'out'], POINTER(c_double), 'StrainUltimate'),
        (['in', 'out'], POINTER(c_double), 'FinalSlope'),
        (['in', 'out'], POINTER(c_double), 'FrictionAngle'),
        (['in', 'out'], POINTER(c_double), 'DilatationalAngle'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetONoDesign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FrictionAngle'),
        (['in', 'out'], POINTER(c_double), 'DilatationalAngle'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetORebar',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_double), 'EFy'),
        (['in', 'out'], POINTER(c_double), 'EFu'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtHardening'),
        (['in', 'out'], POINTER(c_double), 'StrainUltimate'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseCaltransSSDefaults'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetORebar_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_double), 'EFy'),
        (['in', 'out'], POINTER(c_double), 'EFu'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtHardening'),
        (['in', 'out'], POINTER(c_double), 'StrainUltimate'),
        (['in', 'out'], POINTER(c_double), 'FinalSlope'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseCaltransSSDefaults'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetOSteel',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_double), 'EFy'),
        (['in', 'out'], POINTER(c_double), 'EFu'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtHardening'),
        (['in', 'out'], POINTER(c_double), 'StrainAtMaxStress'),
        (['in', 'out'], POINTER(c_double), 'StrainAtRupture'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetOSteel_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_double), 'EFy'),
        (['in', 'out'], POINTER(c_double), 'EFu'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtHardening'),
        (['in', 'out'], POINTER(c_double), 'StrainAtMaxStress'),
        (['in', 'out'], POINTER(c_double), 'StrainAtRupture'),
        (['in', 'out'], POINTER(c_double), 'FinalSlope'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetOTendon',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetOTendon_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'FinalSlope'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetSSCurve',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointID'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress'),
        (['in', 'optional'], BSTR, 'SectName', ''),
        (['in', 'optional'], c_double, 'RebarArea', 0.0),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Temp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eMatType), 'MatType'),
        (['in', 'out'], POINTER(c_int), 'SymType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetWeightAndMass',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'W'),
        (['in', 'out'], POINTER(c_double), 'M'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetDamping',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'ModalRatio'),
        (['in'], c_double, 'ViscousMassCoeff'),
        (['in'], c_double, 'ViscousStiffCoeff'),
        (['in'], c_double, 'HystereticMassCoeff'),
        (['in'], c_double, 'HystereticStiffCoeff'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetMassSource',
        (['in'], c_int, 'MyOption'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetMaterial',
        (['in'], BSTR, 'Name'),
        (['in'], eMatType, 'MatType'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetMPAnisotropic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetMPIsotropic',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'E'),
        (['in'], c_double, 'U'),
        (['in'], c_double, 'A'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetMPOrthotropic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'E'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'A'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'G'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetMPUniaxial',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'E'),
        (['in'], c_double, 'A'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetOConcrete',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Fc'),
        (['in'], VARIANT_BOOL, 'IsLightweight'),
        (['in'], c_double, 'FcsFactor'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtFc'),
        (['in'], c_double, 'StrainUltimate'),
        (['in', 'optional'], c_double, 'FrictionAngle', 0.0),
        (['in', 'optional'], c_double, 'DilatationalAngle', 0.0),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetOConcrete_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Fc'),
        (['in'], VARIANT_BOOL, 'IsLightweight'),
        (['in'], c_double, 'FcsFactor'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtFc'),
        (['in'], c_double, 'StrainUltimate'),
        (['in'], c_double, 'FinalSlope'),
        (['in', 'optional'], c_double, 'FrictionAngle', 0.0),
        (['in', 'optional'], c_double, 'DilatationalAngle', 0.0),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetONoDesign',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], c_double, 'FrictionAngle', 0.0),
        (['in', 'optional'], c_double, 'DilatationalAngle', 0.0),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetORebar',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_double, 'EFy'),
        (['in'], c_double, 'EFu'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtHardening'),
        (['in'], c_double, 'StrainUltimate'),
        (['in'], VARIANT_BOOL, 'UseCaltransSSDefaults'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetORebar_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_double, 'EFy'),
        (['in'], c_double, 'EFu'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtHardening'),
        (['in'], c_double, 'StrainUltimate'),
        (['in'], c_double, 'FinalSlope'),
        (['in'], VARIANT_BOOL, 'UseCaltransSSDefaults'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetOSteel',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_double, 'EFy'),
        (['in'], c_double, 'EFu'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtHardening'),
        (['in'], c_double, 'StrainAtMaxStress'),
        (['in'], c_double, 'StrainAtRupture'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetOSteel_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_double, 'EFy'),
        (['in'], c_double, 'EFu'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtHardening'),
        (['in'], c_double, 'StrainAtMaxStress'),
        (['in'], c_double, 'StrainAtRupture'),
        (['in'], c_double, 'FinalSlope'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetOTendon',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetOTendon_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'FinalSlope'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetSSCurve',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PointID'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Strain'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Stress'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetTemp',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Temp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetWeightAndMass',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyOption'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45), 'propget'],
        HRESULT,
        'TimeDep',
        (['out', 'retval'], POINTER(POINTER(cPropMaterialTD)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'AddQuick',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in'], eMatType, 'MatType'),
        (['in', 'optional'], eMatTypeSteel, 'SteelType', 7),
        (['in', 'optional'], eMatTypeConcrete, 'ConcreteType', 2),
        (['in', 'optional'], eMatTypeAluminum, 'AluminumType', 1),
        (['in', 'optional'], eMatTypeColdFormed, 'ColdFormedType', 2),
        (['in', 'optional'], eMatTypeRebar, 'RebarType', 2),
        (['in', 'optional'], eMatTypeTendon, 'TendonType', 2),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'GetCoupledModelType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eMatCoupledType), 'MatCoupledType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'GetOAluminum',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(BSTR), 'Alloy'),
        (['in', 'out'], POINTER(c_double), 'Fcy'),
        (['in', 'out'], POINTER(c_double), 'Fty'),
        (['in', 'out'], POINTER(c_double), 'Ftu'),
        (['in', 'out'], POINTER(c_double), 'Fsu'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'GetOColdFormed',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FY'),
        (['in', 'out'], POINTER(c_double), 'Fu'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'GetOConcrete_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Fc'),
        (['in', 'out'], POINTER(c_double), 'eFc'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsLightweight'),
        (['in', 'out'], POINTER(c_double), 'FcsFactor'),
        (['in', 'out'], POINTER(c_int), 'SSType'),
        (['in', 'out'], POINTER(c_int), 'SSHysType'),
        (['in', 'out'], POINTER(c_double), 'StrainAtFc'),
        (['in', 'out'], POINTER(c_double), 'StrainUltimate'),
        (['in', 'out'], POINTER(c_double), 'FinalSlope'),
        (['in', 'out'], POINTER(c_double), 'FrictionAngle'),
        (['in', 'out'], POINTER(c_double), 'DilatationalAngle'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(58)],
        HRESULT,
        'GetVonMisesPlasticityParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseIsoLinHardening'),
        (['in', 'out'], POINTER(c_double), 'IsoLinHardeningModulus'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseIsoNLHardening'),
        (['in', 'out'], POINTER(c_double), 'IsoNLUltimateStressRatio'),
        (['in', 'out'], POINTER(c_double), 'IsoNLHardeningRate'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UseKinLinHardening'),
        (['in', 'out'], POINTER(c_double), 'KinLinHardeningModulus'),
        (['in', 'out'], POINTER(c_double), 'YieldStress'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'SetCoupledModelType',
        (['in'], BSTR, 'Name'),
        (['in'], eMatCoupledType, 'MatCoupledType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetOAluminum',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], BSTR, 'Alloy'),
        (['in'], c_double, 'Fcy'),
        (['in'], c_double, 'Fty'),
        (['in'], c_double, 'Ftu'),
        (['in'], c_double, 'Fsu'),
        (['in'], c_int, 'SSHysType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'SetOColdFormed',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'Fu'),
        (['in'], c_int, 'SSHysType'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'SetOConcrete_2',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Fc'),
        (['in'], c_double, 'eFc'),
        (['in'], VARIANT_BOOL, 'IsLightweight'),
        (['in'], c_double, 'FcsFactor'),
        (['in'], c_int, 'SSType'),
        (['in'], c_int, 'SSHysType'),
        (['in'], c_double, 'StrainAtFc'),
        (['in'], c_double, 'StrainUltimate'),
        (['in'], c_double, 'FinalSlope'),
        (['in', 'optional'], c_double, 'FrictionAngle', 0.0),
        (['in', 'optional'], c_double, 'DilatationalAngle', 0.0),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(59)],
        HRESULT,
        'SetVonMisesPlasticityParameters',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'UseIsoLinHardening'),
        (['in'], c_double, 'IsoLinHardeningModulus'),
        (['in'], VARIANT_BOOL, 'UseIsoNLHardening'),
        (['in'], c_double, 'IsoNLUltimateStressRatio'),
        (['in'], c_double, 'IsoNLHardeningRate'),
        (['in'], VARIANT_BOOL, 'UseKinLinHardening'),
        (['in'], c_double, 'KinLinHardeningModulus'),
        (['in', 'optional'], c_double, 'YieldStress', 0.0),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropMaterial implementation
# class cPropMaterial_Impl(object):
#     def AddMaterial(self, MatType, Region, Standard, Grade, UserName):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, MatType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDamping(self, Name, Temp):
#         '-no docstring-'
#         #return ModalRatio, ViscousMassCoeff, ViscousStiffCoeff, HystereticMassCoeff, HystereticStiffCoeff, pRetVal
#
#     def GetMassSource(self):
#         '-no docstring-'
#         #return MyOption, NumberLoads, LoadPat, SF, pRetVal
#
#     def GetMaterial(self, Name):
#         '-no docstring-'
#         #return MatType, Color, Notes, GUID, pRetVal
#
#     def GetMPAnisotropic(self, Name, Temp):
#         '-no docstring-'
#         #return E, U, A, G, pRetVal
#
#     def GetMPIsotropic(self, Name, Temp):
#         '-no docstring-'
#         #return E, U, A, G, pRetVal
#
#     def GetMPOrthotropic(self, Name, Temp):
#         '-no docstring-'
#         #return E, U, A, G, pRetVal
#
#     def GetMPUniaxial(self, Name, Temp):
#         '-no docstring-'
#         #return E, A, pRetVal
#
#     def GetNameList(self, MatType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetOConcrete(self, Name, Temp):
#         '-no docstring-'
#         #return Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FrictionAngle, DilatationalAngle, pRetVal
#
#     def GetOConcrete_1(self, Name, Temp):
#         '-no docstring-'
#         #return Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, pRetVal
#
#     def GetONoDesign(self, Name, Temp):
#         '-no docstring-'
#         #return FrictionAngle, DilatationalAngle, pRetVal
#
#     def GetORebar(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, UseCaltransSSDefaults, pRetVal
#
#     def GetORebar_1(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, FinalSlope, UseCaltransSSDefaults, pRetVal
#
#     def GetOSteel(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, pRetVal
#
#     def GetOSteel_1(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, FinalSlope, pRetVal
#
#     def GetOTendon(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, SSType, SSHysType, pRetVal
#
#     def GetOTendon_1(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, SSType, SSHysType, FinalSlope, pRetVal
#
#     def GetSSCurve(self, Name, SectName, RebarArea, Temp):
#         '-no docstring-'
#         #return NumberPoints, PointID, Strain, Stress, pRetVal
#
#     def GetTemp(self, Name):
#         '-no docstring-'
#         #return NumberItems, Temp, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return MatType, SymType, pRetVal
#
#     def GetWeightAndMass(self, Name, Temp):
#         '-no docstring-'
#         #return W, M, pRetVal
#
#     def SetDamping(self, Name, ModalRatio, ViscousMassCoeff, ViscousStiffCoeff, HystereticMassCoeff, HystereticStiffCoeff, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMassSource(self, MyOption, NumberLoads):
#         '-no docstring-'
#         #return LoadPat, SF, pRetVal
#
#     def SetMaterial(self, Name, MatType, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMPAnisotropic(self, Name, Temp):
#         '-no docstring-'
#         #return E, U, A, G, pRetVal
#
#     def SetMPIsotropic(self, Name, E, U, A, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMPOrthotropic(self, Name, Temp):
#         '-no docstring-'
#         #return E, U, A, G, pRetVal
#
#     def SetMPUniaxial(self, Name, E, A, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOConcrete(self, Name, Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FrictionAngle, DilatationalAngle, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOConcrete_1(self, Name, Fc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetONoDesign(self, Name, FrictionAngle, DilatationalAngle, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetORebar(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, UseCaltransSSDefaults, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetORebar_1(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainUltimate, FinalSlope, UseCaltransSSDefaults, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOSteel(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOSteel_1(self, Name, FY, Fu, EFy, EFu, SSType, SSHysType, StrainAtHardening, StrainAtMaxStress, StrainAtRupture, FinalSlope, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOTendon(self, Name, FY, Fu, SSType, SSHysType, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOTendon_1(self, Name, FY, Fu, SSType, SSHysType, FinalSlope, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSSCurve(self, Name, NumberPoints, Temp):
#         '-no docstring-'
#         #return PointID, Strain, Stress, pRetVal
#
#     def SetTemp(self, Name, NumberItems):
#         '-no docstring-'
#         #return Temp, pRetVal
#
#     def SetWeightAndMass(self, Name, MyOption, Value, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def TimeDep(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def AddQuick(self, MatType, SteelType, ConcreteType, AluminumType, ColdFormedType, RebarType, TendonType, UserName):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def GetCoupledModelType(self, Name, Temp):
#         '-no docstring-'
#         #return MatCoupledType, pRetVal
#
#     def GetOAluminum(self, Name, Temp):
#         '-no docstring-'
#         #return MyType, Alloy, Fcy, Fty, Ftu, Fsu, SSHysType, pRetVal
#
#     def GetOColdFormed(self, Name, Temp):
#         '-no docstring-'
#         #return FY, Fu, SSHysType, pRetVal
#
#     def GetOConcrete_2(self, Name, Temp):
#         '-no docstring-'
#         #return Fc, eFc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, pRetVal
#
#     def GetVonMisesPlasticityParameters(self, Name, Temp):
#         '-no docstring-'
#         #return UseIsoLinHardening, IsoLinHardeningModulus, UseIsoNLHardening, IsoNLUltimateStressRatio, IsoNLHardeningRate, UseKinLinHardening, KinLinHardeningModulus, YieldStress, pRetVal
#
#     def SetCoupledModelType(self, Name, MatCoupledType, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOAluminum(self, Name, MyType, Alloy, Fcy, Fty, Ftu, Fsu, SSHysType, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOColdFormed(self, Name, FY, Fu, SSHysType, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOConcrete_2(self, Name, Fc, eFc, IsLightweight, FcsFactor, SSType, SSHysType, StrainAtFc, StrainUltimate, FinalSlope, FrictionAngle, DilatationalAngle, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetVonMisesPlasticityParameters(self, Name, UseIsoLinHardening, IsoLinHardeningModulus, UseIsoNLHardening, IsoNLUltimateStressRatio, IsoNLHardeningRate, UseKinLinHardening, KinLinHardeningModulus, YieldStress, Temp):
#         '-no docstring-'
#         #return pRetVal
#


class cDStAPI_RP2A_LRFD97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{ED5B6B2F-1223-4FDE-8DBB-8DBA2EACC064}')
    _idlflags_ = ['dual', 'oleautomation']


cDStAPI_RP2A_LRFD97._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAPI_RP2A_LRFD97 implementation
# class cDStAPI_RP2A_LRFD97_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDCdAISI_16(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{62EF89AC-B131-4EEC-8862-050ABAE8ADF7}')
    _idlflags_ = ['dual', 'oleautomation']


cDCdAISI_16._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCdAISI_16 implementation
# class cDCdAISI_16_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cModifierCable._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cModifierCable implementation
# class cModifierCable_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
# values for enumeration 'eBridgeCodeInterims'
eBridgeCodeInterims_NoInterims = 0
eBridgeCodeInterims_Interim_2011 = 1
eBridgeCodeInterims_Interim_2012 = 2
eBridgeCodeInterims_Interim_2013 = 3
eBridgeCodeInterims_Interim_2014 = 4
eBridgeCodeInterims_Interim_2015 = 5
eBridgeCodeInterims = c_int  # enum

cPropMaterialTD._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetConcreteCEBFIP90',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderConcreteAge'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderConcreteCreep'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderConcreteShrinkage'),
        (['in', 'out'], POINTER(c_double), 'CEBFIPsCoefficient'),
        (['in', 'out'], POINTER(c_double), 'RelativeHumidity'),
        (['in', 'out'], POINTER(c_double), 'NotionalSize'),
        (['in', 'out'], POINTER(c_double), 'ShrinkageCoefficient'),
        (['in', 'out'], POINTER(c_double), 'ShrinkageStartAge'),
        (['in', 'out'], POINTER(c_int), 'UseSeries'),
        (['in', 'out'], POINTER(c_int), 'NumberSeriesTerms'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetTendonCEBFIP90',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ConsiderSteelRelaxation'),
        (['in', 'out'], POINTER(c_int), 'CEBFIPClass'),
        (['in', 'out'], POINTER(c_int), 'UseSeries'),
        (['in', 'out'], POINTER(c_int), 'NumberSeriesTerms'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetConcreteCEBFIP90',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'ConsiderConcreteAge'),
        (['in'], VARIANT_BOOL, 'ConsiderConcreteCreep'),
        (['in'], VARIANT_BOOL, 'ConsiderConcreteShrinkage'),
        (['in'], c_double, 'CEBFIPsCoefficient'),
        (['in'], c_double, 'RelativeHumidity'),
        (['in'], c_double, 'NotionalSize'),
        (['in'], c_double, 'ShrinkageCoefficient'),
        (['in'], c_double, 'ShrinkageStartAge'),
        (['in'], c_int, 'UseSeries'),
        (['in'], c_int, 'NumberSeriesTerms'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetTendonCEBFIP90',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'ConsiderSteelRelaxation'),
        (['in'], c_int, 'CEBFIPClass'),
        (['in'], c_int, 'UseSeries'),
        (['in'], c_int, 'NumberSeriesTerms'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetConcreteScaleFactors',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'ScaleFactorAge'),
        (['in', 'out'], POINTER(c_double), 'ScaleFactorCreep'),
        (['in', 'out'], POINTER(c_double), 'ScaleFactorShrinkage'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetConcreteScaleFactors',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'ScaleFactorAge'),
        (['in'], c_double, 'ScaleFactorCreep'),
        (['in'], c_double, 'ScaleFactorShrinkage'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetTendonScaleFactors',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'ScaleFactorRelaxation'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetTendonScaleFactors',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'ScaleFactorRelaxation'),
        (['in', 'optional'], c_double, 'Temp', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropMaterialTD implementation
# class cPropMaterialTD_Impl(object):
#     def GetConcreteCEBFIP90(self, Name, Temp):
#         '-no docstring-'
#         #return ConsiderConcreteAge, ConsiderConcreteCreep, ConsiderConcreteShrinkage, CEBFIPsCoefficient, RelativeHumidity, NotionalSize, ShrinkageCoefficient, ShrinkageStartAge, UseSeries, NumberSeriesTerms, pRetVal
#
#     def GetTendonCEBFIP90(self, Name, Temp):
#         '-no docstring-'
#         #return ConsiderSteelRelaxation, CEBFIPClass, UseSeries, NumberSeriesTerms, pRetVal
#
#     def SetConcreteCEBFIP90(self, Name, ConsiderConcreteAge, ConsiderConcreteCreep, ConsiderConcreteShrinkage, CEBFIPsCoefficient, RelativeHumidity, NotionalSize, ShrinkageCoefficient, ShrinkageStartAge, UseSeries, NumberSeriesTerms, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTendonCEBFIP90(self, Name, ConsiderSteelRelaxation, CEBFIPClass, UseSeries, NumberSeriesTerms, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetConcreteScaleFactors(self, Name, Temp):
#         '-no docstring-'
#         #return ScaleFactorAge, ScaleFactorCreep, ScaleFactorShrinkage, pRetVal
#
#     def SetConcreteScaleFactors(self, Name, ScaleFactorAge, ScaleFactorCreep, ScaleFactorShrinkage, Temp):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetTendonScaleFactors(self, Name, Temp):
#         '-no docstring-'
#         #return ScaleFactorRelaxation, pRetVal
#
#     def SetTendonScaleFactors(self, Name, ScaleFactorRelaxation, Temp):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'e2DFrameType'
e2DFrameType_PortalFrame = 0
e2DFrameType_ConcentricBraced = 1
e2DFrameType_EccentricBraced = 2
e2DFrameType = c_int  # enum

cDCoKCI_1999._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoKCI_1999 implementation
# class cDCoKCI_1999_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDCdEuroCold06(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2AB7D542-DA5C-455E-A4F4-CDFB1E6AC6BE}')
    _idlflags_ = ['dual', 'oleautomation']


cDCdEuroCold06._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCdEuroCold06 implementation
# class cDCdEuroCold06_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cOptions._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDimensions',
        (['in', 'out'], POINTER(c_double), 'CuttingPlaneTol'),
        (['in', 'out'], POINTER(c_double), 'WorldSpacing'),
        (['in', 'out'], POINTER(c_double), 'NudgeValue'),
        (['in', 'out'], POINTER(c_int), 'PixelClickSize'),
        (['in', 'out'], POINTER(c_int), 'PixelSnapSize'),
        (['in', 'out'], POINTER(c_int), 'ScrLinThk'),
        (['in', 'out'], POINTER(c_int), 'PrtLinThk'),
        (['in', 'out'], POINTER(c_int), 'MaxFont'),
        (['in', 'out'], POINTER(c_int), 'MinFont'),
        (['in', 'out'], POINTER(c_int), 'ZoomStep'),
        (['in', 'out'], POINTER(c_int), 'ShrinkFact'),
        (['in', 'out'], POINTER(c_int), 'TextFileMaxChar'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'SetDimensions',
        (['in', 'optional'], c_double, 'CuttingPlaneTol', 0.0),
        (['in', 'optional'], c_double, 'WorldSpacing', 0.0),
        (['in', 'optional'], c_double, 'NudgeValue', 0.0),
        (['in', 'optional'], c_int, 'PixelClickSize', 0),
        (['in', 'optional'], c_int, 'PixelSnapSize', 0),
        (['in', 'optional'], c_int, 'ScrLinThk', 0),
        (['in', 'optional'], c_int, 'PrtLinThk', 0),
        (['in', 'optional'], c_int, 'MaxFont', 0),
        (['in', 'optional'], c_int, 'MinFont', 0),
        (['in', 'optional'], c_int, 'ZoomStep', 0),
        (['in', 'optional'], c_int, 'ShrinkFact', 0),
        (['in', 'optional'], c_int, 'TextFileMaxChar', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cOptions implementation
# class cOptions_Impl(object):
#     def GetDimensions(self):
#         '-no docstring-'
#         #return CuttingPlaneTol, WorldSpacing, NudgeValue, PixelClickSize, PixelSnapSize, ScrLinThk, PrtLinThk, MaxFont, MinFont, ZoomStep, ShrinkFact, TextFileMaxChar, pRetVal
#
#     def SetDimensions(self, CuttingPlaneTol, WorldSpacing, NudgeValue, PixelClickSize, PixelSnapSize, ScrLinThk, PrtLinThk, MaxFont, MinFont, ZoomStep, ShrinkFact, TextFileMaxChar):
#         '-no docstring-'
#         #return pRetVal
#

cSolidElm._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetObj',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Obj'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cSolidElm implementation
# class cSolidElm_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadGravity(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadPorePressure(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLoadStrain(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Component, Value, PatternName, pRetVal
#
#     def GetLoadSurfacePressure(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Face, Value, PatternName, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return A, B, C, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetObj(self, Name):
#         '-no docstring-'
#         #return Obj, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#

cDesignColdFormed._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'AISI_ASD96',
        (['out', 'retval'], POINTER(POINTER(cDCdAISI_ASD96)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AISI_LRFD96',
        (['out', 'retval'], POINTER(POINTER(cDCdAISI_LRFD96)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'DeleteResults',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetCode',
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetComboAutoGenerate',
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetComboDeflection',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetComboStrength',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetGroup',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetResultsAvailable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetSummaryResults',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'ResetOverwrites',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetAutoSelectNull',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetCode',
        (['in'], BSTR, 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetComboAutoGenerate',
        (['in'], VARIANT_BOOL, 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetComboDeflection',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetComboStrength',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], VARIANT_BOOL, 'LastAnalysis'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetGroup',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'StartDesign',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'VerifyPassed',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(c_int), 'N1'),
        (['in', 'out'], POINTER(c_int), 'N2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'VerifySections',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23), 'propget'],
        HRESULT,
        'AISI_16',
        (['out', 'retval'], POINTER(POINTER(cDCdAISI_16)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24), 'propget'],
        HRESULT,
        'EuroCold06',
        (['out', 'retval'], POINTER(POINTER(cDCdEuroCold06)), 'pRetVal')
    ),
]

################################################################
# code template for cDesignColdFormed implementation
# class cDesignColdFormed_Impl(object):
#     @property
#     def AISI_ASD96(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AISI_LRFD96(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCode(self):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def GetComboAutoGenerate(self):
#         '-no docstring-'
#         #return AutoGenerate, pRetVal
#
#     def GetComboDeflection(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetComboStrength(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetDesignSection(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetGroup(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetResultsAvailable(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSummaryResults(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
#
#     def ResetOverwrites(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAutoSelectNull(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCode(self, CodeName):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboAutoGenerate(self, AutoGenerate):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboDeflection(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboStrength(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroup(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def StartDesign(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def VerifyPassed(self):
#         '-no docstring-'
#         #return NumberItems, N1, N2, MyName, pRetVal
#
#     def VerifySections(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     @property
#     def AISI_16(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def EuroCold06(self):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'e3DFrameType'
e3DFrameType_OpenFrame = 0
e3DFrameType_PerimeterFrame = 1
e3DFrameType_BeamSlab = 2
e3DFrameType_FlatPlate = 3
e3DFrameType = c_int  # enum

cEditSolid._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Divide',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'N1'),
        (['in'], c_int, 'N2'),
        (['in'], c_int, 'N3'),
        (['in', 'out'], POINTER(c_int), 'NumberSolids'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cEditSolid implementation
# class cEditSolid_Impl(object):
#     def Divide(self, Name, N1, N2, N3):
#         '-no docstring-'
#         #return NumberSolids, SolidName, pRetVal
#

cCaseModalHistoryNonlinear._methods_ = [
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetDampOverrides',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_double), 'DampA'),
        (['in', 'out'], POINTER(c_double), 'DampB'),
        (['in', 'out'], POINTER(c_double), 'DampF1'),
        (['in', 'out'], POINTER(c_double), 'DampF2'),
        (['in', 'out'], POINTER(c_double), 'DampD1'),
        (['in', 'out'], POINTER(c_double), 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetDampType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetModalCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'TStat'),
        (['in', 'out'], POINTER(c_double), 'DTMax'),
        (['in', 'out'], POINTER(c_double), 'DTMin'),
        (['in', 'out'], POINTER(c_double), 'FTol'),
        (['in', 'out'], POINTER(c_double), 'ETol'),
        (['in', 'out'], POINTER(c_int), 'ITMax'),
        (['in', 'out'], POINTER(c_int), 'ITMin'),
        (['in', 'out'], POINTER(c_double), 'Cf'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NStep'),
        (['in', 'out'], POINTER(c_double), 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetDampOverrides',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_double, 'DampA'),
        (['in'], c_double, 'DampB'),
        (['in'], c_double, 'DampF1'),
        (['in'], c_double, 'DampF2'),
        (['in'], c_double, 'DampD1'),
        (['in'], c_double, 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetModalCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetSolControlParameters',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'TStat'),
        (['in'], c_double, 'DTMax'),
        (['in'], c_double, 'DTMin'),
        (['in'], c_double, 'FTol'),
        (['in'], c_double, 'ETol'),
        (['in'], c_int, 'ITMax'),
        (['in'], c_int, 'ITMin'),
        (['in'], c_double, 'Cf'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NStep'),
        (['in'], c_double, 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseModalHistoryNonlinear implementation
# class cCaseModalHistoryNonlinear_Impl(object):
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def GetDampConstant(self, Name):
#         '-no docstring-'
#         #return Damp, pRetVal
#
#     def GetDampInterpolated(self, Name):
#         '-no docstring-'
#         #return DampType, NumberItems, Time, Damp, pRetVal
#
#     def GetDampOverrides(self, Name):
#         '-no docstring-'
#         #return NumberItems, Mode, Damp, pRetVal
#
#     def GetDampProportional(self, Name):
#         '-no docstring-'
#         #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
#
#     def GetDampType(self, Name):
#         '-no docstring-'
#         #return DampType, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetModalCase(self, Name):
#         '-no docstring-'
#         #return ModalCase, pRetVal
#
#     def GetSolControlParameters(self, Name):
#         '-no docstring-'
#         #return TStat, DTMax, DTMin, FTol, ETol, ITMax, ITMin, Cf, pRetVal
#
#     def GetTimeStep(self, Name):
#         '-no docstring-'
#         #return NStep, Dt, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampConstant(self, Name, Damp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampInterpolated(self, Name, DampType, NumberItems):
#         '-no docstring-'
#         #return Time, Damp, pRetVal
#
#     def SetDampOverrides(self, Name, NumberItems):
#         '-no docstring-'
#         #return Mode, Damp, pRetVal
#
#     def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def SetModalCase(self, Name, ModalCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSolControlParameters(self, Name, TStat, DTMax, DTMin, FTol, ETol, ITMax, ITMin, Cf):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTimeStep(self, Name, NStep, Dt):
#         '-no docstring-'
#         #return pRetVal
#


class cDStAustralian_AS4100_98(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{1D3CDBBD-9810-4E9E-ABB9-3740618C1F87}')
    _idlflags_ = ['dual', 'oleautomation']


cDStAustralian_AS4100_98._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAustralian_AS4100_98 implementation
# class cDStAustralian_AS4100_98_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDCoHong_Kong_CP_2013._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoHong_Kong_CP_2013 implementation
# class cDCoHong_Kong_CP_2013_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCaseSteadyState._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'HysConMassCoeff'),
        (['in', 'out'], POINTER(c_double), 'HysConStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'HysIntFreqUnits'),
        (['in', 'out'], POINTER(c_int), 'HysIntNumFreqs'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetDampType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetFreqData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FreqFirst'),
        (['in', 'out'], POINTER(c_double), 'FreqLast'),
        (['in', 'out'], POINTER(c_int), 'FreqNumIncs'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModal'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModalDev'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddSpecified'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['in', 'out'], POINTER(c_int), 'FreqNumModalDev'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev'),
        (['in', 'out'], POINTER(c_int), 'FreqNumSpecified'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'HysConMassCoeff'),
        (['in'], c_double, 'HysConStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'HysIntFreqUnits'),
        (['in'], c_int, 'HysIntNumFreqs'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetFreqData',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FreqFirst'),
        (['in'], c_double, 'FreqLast'),
        (['in'], c_int, 'FreqNumIncs'),
        (['in'], VARIANT_BOOL, 'FreqAddModal'),
        (['in'], VARIANT_BOOL, 'FreqAddModalDev'),
        (['in'], VARIANT_BOOL, 'FreqAddSpecified'),
        (['in'], BSTR, 'ModalCase'),
        (['in'], c_int, 'FreqNumModalDev'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev'),
        (['in'], c_int, 'FreqNumSpecified'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseSteadyState implementation
# class cCaseSteadyState_Impl(object):
#     def GetDampConstant(self, Name):
#         '-no docstring-'
#         #return HysConMassCoeff, HysConStiffCoeff, pRetVal
#
#     def GetDampInterpolated(self, Name):
#         '-no docstring-'
#         #return HysIntFreqUnits, HysIntNumFreqs, HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
#
#     def GetDampType(self, Name):
#         '-no docstring-'
#         #return DampType, pRetVal
#
#     def GetFreqData(self, Name):
#         '-no docstring-'
#         #return FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqModalDev, FreqNumSpecified, FreqSpecified, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampConstant(self, Name, HysConMassCoeff, HysConStiffCoeff):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampInterpolated(self, Name, HysIntFreqUnits, HysIntNumFreqs):
#         '-no docstring-'
#         #return HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
#
#     def SetFreqData(self, Name, FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqNumSpecified):
#         '-no docstring-'
#         #return FreqModalDev, FreqSpecified, pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
#

cAutoSeastate._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'SetNone',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetAuto',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'LoadMethod'),
        (['in', 'out'], POINTER(BSTR), 'CSys'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AdjustGravityLat'),
        (['in', 'out'], POINTER(c_double), 'AdjustGravityLatFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AdjustGravityVert'),
        (['in', 'out'], POINTER(c_double), 'AdjustGravityVertFactor'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'CenterRotation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Parameters'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IgnorePhase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetAuto',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'LoadMethod'),
        (['in'], BSTR, 'CSys'),
        (['in'], VARIANT_BOOL, 'AdjustGravityLat'),
        (['in'], c_double, 'AdjustGravityLatFactor'),
        (['in'], VARIANT_BOOL, 'AdjustGravityVert'),
        (['in'], c_double, 'AdjustGravityVertFactor'),
        (['in'], _midlSAFEARRAY(c_double), 'CenterRotation'),
        (['in'], _midlSAFEARRAY(c_double), 'Parameters'),
        (['in'], VARIANT_BOOL, 'IgnorePhase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAutoSeastate implementation
# class cAutoSeastate_Impl(object):
#     def SetNone(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAuto(self, Name):
#         '-no docstring-'
#         #return LoadMethod, CSys, AdjustGravityLat, AdjustGravityLatFactor, AdjustGravityVert, AdjustGravityVertFactor, CenterRotation, Parameters, IgnorePhase, pRetVal
#
#     def SetAuto(self, Name, LoadMethod, CSys, AdjustGravityLat, AdjustGravityLatFactor, AdjustGravityVert, AdjustGravityVertFactor, CenterRotation, Parameters, IgnorePhase):
#         '-no docstring-'
#         #return pRetVal
#
# values for enumeration 'eBridgeResponseDisplDOF'
eBridgeResponseDisplDOF_Vertical_Displacement = 0
eBridgeResponseDisplDOF_Transverse_Displacement = 1
eBridgeResponseDisplDOF_Longitudinal_Displacement = 2
eBridgeResponseDisplDOF_Longitudinal_Rotation = 3
eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation = 4
eBridgeResponseDisplDOF = c_int  # enum
# values for enumeration 'eBridgeResponseDisplLoc'
eBridgeResponseDisplLoc_Web_Top = 0
eBridgeResponseDisplLoc_Web_Bottom = 1
eBridgeResponseDisplLoc_Web = 2
eBridgeResponseDisplLoc_Left_Web_Top = 3
eBridgeResponseDisplLoc_Left_Web_Bottom = 4
eBridgeResponseDisplLoc_Left_Web = 5
eBridgeResponseDisplLoc_Right_Web_Top = 6
eBridgeResponseDisplLoc_Right_Web_Bottom = 7
eBridgeResponseDisplLoc_Right_Web = 8
eBridgeResponseDisplLoc_Slab_Center = 9
eBridgeResponseDisplLoc = c_int  # enum
# values for enumeration 'eBridgeResponseDesignRating'
eBridgeResponseDesignRating_S11_Longitudinal_Top_Left = 0
eBridgeResponseDesignRating_S11_Longitudinal_Top_Center = 1
eBridgeResponseDesignRating_S11_Longitudinal_Top_Right = 2
eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope = 3
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left = 4
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center = 5
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center = 6
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right = 7
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope = 8
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left = 9
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center = 10
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right = 11
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope = 12
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left = 13
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner = 14
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center = 15
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right = 16
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner = 17
eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope = 18
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left = 19
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right = 20
eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope = 21
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left = 22
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left = 23
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center = 24
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right = 25
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center = 26
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right = 27
eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope = 28
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left = 29
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center = 39
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right = 31
eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope = 32
eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio = 33
eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio = 34
eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio = 35
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL = 36
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area = 37
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion = 38
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab = 39
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab = 40
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab = 41
eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam = 42
eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio = 43
eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL = 44
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area = 45
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab = 46
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab = 47
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange = 48
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab = 49
eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam = 50
eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL = 51
eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL = 52
eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL = 53
eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width = 54
eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width = 55
eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths = 56
eBridgeResponseDesignRating_Design_Principal_Stress_Envelope = 57
eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top = 58
eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot = 59
eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top = 60
eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot = 61
eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis = 62
eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio = 63
eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3 = 64
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment = 65
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment = 66
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear = 67
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos = 68
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg = 69
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos = 70
eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg = 71
eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2 = 72
eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB = 73
eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB = 74
eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range = 75
eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear = 76
eBridgeResponseDesignRating_Rating_Shear = 77
eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance = 78
eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr = 79
eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F = 80
eBridgeResponseDesignRating_Rating_Flexure = 81
eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance = 82
eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr = 83
eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F = 84
eBridgeResponseDesignRating_Rating_Strength_Shear_Rating = 85
eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating = 86
eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3 = 87
eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2 = 88
eBridgeResponseDesignRating_Rating_Service_Flexure_Rating = 89
eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos = 90
eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg = 91
eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating = 92
eBridgeResponseDesignRating_Rating_Service = 93
eBridgeResponseDesignRating = c_int  # enum
# values for enumeration 'eNamedSetType'
eNamedSetType_All = 0
eNamedSetType_UpdateBridgeObject = 1
eNamedSetType_RunAnalysis = 2
eNamedSetType_RunBridgeDesignSuperstructure = 3
eNamedSetType_RunBridgeDesignSubstructure = 4
eNamedSetType_RunBridgeDesignSeismic = 5
eNamedSetType_RunBridgeRatingSuperstructure = 6
eNamedSetType_RunMemberRating = 7
eNamedSetType_JointTHResponseSpectra = 8
eNamedSetType_NamedDisplay = 9
eNamedSetType_PlotFunctionTraces = 10
eNamedSetType_PushoverCurve = 11
eNamedSetType_VirtualWork = 12
eNamedSetType_TableSet = 13
eNamedSetType_TableGroupSuperset = 14
eNamedSetType_BridgeSeismicReport = 15
eNamedSetType_BridgeSuperstructureResponse = 16
eNamedSetType_BridgeCalculationReport = 17
eNamedSetType = c_int  # enum

cNamedSet._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetJointRespSpec',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'LoadCase'),
        (['in', 'out'], POINTER(c_int), 'NumberJoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'JointNames'),
        (['in', 'out'], POINTER(BSTR), 'CoordSys'),
        (['in', 'out'], POINTER(c_int), 'Direction'),
        (['in', 'out'], POINTER(c_int), 'Abscissa'),
        (['in', 'out'], POINTER(c_int), 'Ordinate'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'DefaultFreq'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'StructuralFreq'),
        (['in', 'out'], POINTER(c_int), 'NumberUserFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UserFreqValues'),
        (['in', 'out'], POINTER(c_int), 'NumberDampValues'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DampingValues'),
        (['in', 'out'], POINTER(c_int), 'AbscissaPlotType'),
        (['in', 'out'], POINTER(c_double), 'SpectrumWidening'),
        (['in', 'out'], POINTER(c_int), 'OrdinatePlotType'),
        (['in', 'out'], POINTER(c_double), 'OrdinateScaleFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'SetJointRespSpec',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadCase'),
        (['in'], c_int, 'NumberJoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'JointNames'),
        (['in'], BSTR, 'CoordSys'),
        (['in'], c_int, 'Direction'),
        (['in'], c_int, 'Abscissa'),
        (['in'], c_int, 'Ordinate'),
        (['in'], VARIANT_BOOL, 'DefaultFreq'),
        (['in'], VARIANT_BOOL, 'StructuralFreq'),
        (['in'], c_int, 'NumberUserFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'UserFreqValues'),
        (['in'], c_int, 'NumberDampValues'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'DampingValues'),
        (['in', 'optional'], c_int, 'AbscissaPlotType', 2),
        (['in', 'optional'], c_double, 'SpectrumWidening', 0.0),
        (['in', 'optional'], c_int, 'OrdinatePlotType', 1),
        (['in', 'optional'], c_double, 'OrdinateScaleFactor', 1.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetBridgeResponseForce',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'BridgeObj'),
        (['in'], BSTR, 'CaseCboName'),
        (['in'], eBridgeResponsePart, 'ResultFor'),
        (['in'], c_int, 'PartID'),
        (['in'], eBridgeResponseForce, 'Response'),
        (['in'], c_int, 'MultiValOpt'),
        (['in'], BSTR, 'iStep'),
        (['in', 'optional'], eUnits, 'Units', 3),
        (['in', 'optional'], c_int, 'DistOpt', 0),
        (['in', 'optional'], VARIANT_BOOL, 'TendonForce', False),
        (['in', 'optional'], c_int, 'CaseOpt', 1),
        (['in', 'optional'], c_double, 'PhaseAngle', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetBridgeResponseStress',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'BridgeObj'),
        (['in'], BSTR, 'CaseCboName'),
        (['in'], eBridgeResponsePart, 'ResultFor'),
        (['in'], c_int, 'PartID'),
        (['in'], eBridgeResponseStress, 'Response'),
        (['in'], c_int, 'MultiValOpt'),
        (['in'], BSTR, 'iStep'),
        (['in', 'optional'], eUnits, 'Units', 3),
        (['in', 'optional'], c_int, 'DistOpt', 0),
        (['in', 'optional'], VARIANT_BOOL, 'TendonForce', False),
        (['in', 'optional'], c_int, 'CaseOpt', 1),
        (['in', 'optional'], c_double, 'PhaseAngle', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetBridgeResponseDisplacement',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'BridgeObj'),
        (['in'], BSTR, 'CaseCboName'),
        (['in'], VARIANT_BOOL, 'TenthPoint'),
        (['in'], eBridgeResponsePart, 'ResultFor'),
        (['in'], c_int, 'PartID'),
        (['in'], eBridgeResponseDisplDOF, 'ResponseDOF'),
        (['in'], eBridgeResponseDisplLoc, 'ResponseLoc'),
        (['in'], c_int, 'MultiValOpt'),
        (['in'], BSTR, 'iStep'),
        (['in', 'optional'], eUnits, 'Units', 3),
        (['in', 'optional'], c_int, 'DistOpt', 0),
        (['in', 'optional'], VARIANT_BOOL, 'TendonForce', False),
        (['in', 'optional'], c_int, 'CaseOpt', 1),
        (['in', 'optional'], c_double, 'PhaseAngle', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetBridgeResponseDesignRating',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'BridgeObj'),
        (['in'], BSTR, 'RequestName'),
        (['in'], eBridgeResponsePart, 'ResultFor'),
        (['in'], c_int, 'PartID'),
        (['in'], eBridgeResponseDesignRating, 'Response'),
        (['in', 'optional'], c_int, 'MultiValOpt', 1),
        (['in', 'optional'], eUnits, 'Units', 3),
        (['in', 'optional'], c_int, 'DistOpt', 0),
        (['in', 'optional'], VARIANT_BOOL, 'ShowLimit1', False),
        (['in', 'optional'], VARIANT_BOOL, 'ShowLimit2', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(eNamedSetType)), 'MyType'),
        (['in', 'optional'], eNamedSetType, 'NSType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cNamedSet implementation
# class cNamedSet_Impl(object):
#     def GetJointRespSpec(self, Name):
#         '-no docstring-'
#         #return LoadCase, NumberJoints, JointNames, CoordSys, Direction, Abscissa, Ordinate, DefaultFreq, StructuralFreq, NumberUserFreq, UserFreqValues, NumberDampValues, DampingValues, AbscissaPlotType, SpectrumWidening, OrdinatePlotType, OrdinateScaleFactor, pRetVal
#
#     def SetJointRespSpec(self, Name, LoadCase, NumberJoints, CoordSys, Direction, Abscissa, Ordinate, DefaultFreq, StructuralFreq, NumberUserFreq, NumberDampValues, AbscissaPlotType, SpectrumWidening, OrdinatePlotType, OrdinateScaleFactor):
#         '-no docstring-'
#         #return JointNames, UserFreqValues, DampingValues, pRetVal
#
#     def SetBridgeResponseForce(self, Name, BridgeObj, CaseCboName, ResultFor, PartID, Response, MultiValOpt, iStep, Units, DistOpt, TendonForce, CaseOpt, PhaseAngle):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBridgeResponseStress(self, Name, BridgeObj, CaseCboName, ResultFor, PartID, Response, MultiValOpt, iStep, Units, DistOpt, TendonForce, CaseOpt, PhaseAngle):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBridgeResponseDisplacement(self, Name, BridgeObj, CaseCboName, TenthPoint, ResultFor, PartID, ResponseDOF, ResponseLoc, MultiValOpt, iStep, Units, DistOpt, TendonForce, CaseOpt, PhaseAngle):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBridgeResponseDesignRating(self, Name, BridgeObj, RequestName, ResultFor, PartID, Response, MultiValOpt, Units, DistOpt, ShowLimit1, ShowLimit2):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self, NSType):
#         '-no docstring-'
#         #return NumberNames, MyName, MyType, pRetVal
#


class cDStChinese_2018(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{2172916F-2ACA-46E5-BD20-A223BAA4BCE8}')
    _idlflags_ = ['dual', 'oleautomation']


cDStChinese_2018._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStChinese_2018 implementation
# class cDStChinese_2018_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cPattern._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetPattern',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPattern implementation
# class cPattern_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetPattern(self, Name):
#         '-no docstring-'
#         #return pRetVal
#

cCaseMovingLoad._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLanesLoaded',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'LoadNumber'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VehClass'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Min'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Max'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetMultiLaneSF',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetLanesLoaded',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'LoadNumber'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'VehClass'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Min'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Max'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetMultiLaneSF',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetDirectionalFactors',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Vertical'),
        (['in', 'out'], POINTER(c_double), 'Braking'),
        (['in', 'out'], POINTER(c_double), 'Centrifugal'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetDirectionalFactors',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Vertical'),
        (['in'], c_double, 'Braking'),
        (['in'], c_double, 'Centrifugal'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseMovingLoad implementation
# class cCaseMovingLoad_Impl(object):
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLanesLoaded(self, Name, LoadNumber):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, VehClass, SF, Min, Max, pRetVal
#
#     def GetMultiLaneSF(self, Name):
#         '-no docstring-'
#         #return NumberItems, SF, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLanesLoaded(self, Name, LoadNumber, NumberItems):
#         '-no docstring-'
#         #return MyName, pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return VehClass, SF, Min, Max, pRetVal
#
#     def SetMultiLaneSF(self, Name, NumberItems):
#         '-no docstring-'
#         #return SF, pRetVal
#
#     def GetDirectionalFactors(self, Name):
#         '-no docstring-'
#         #return Vertical, Braking, Centrifugal, pRetVal
#
#     def SetDirectionalFactors(self, Name, Vertical, Braking, Centrifugal):
#         '-no docstring-'
#         #return pRetVal
#


class cDAlAA_LRFD_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{CBC1168C-2BEA-4D49-BE53-4650A0EE0AAE}')
    _idlflags_ = ['dual', 'oleautomation']


cDAlAA_LRFD_2000._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDAlAA_LRFD_2000 implementation
# class cDAlAA_LRFD_2000_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDStAISC360_10(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{8C4583A0-ABE6-4915-9DFF-4AE5A219A7A8}')
    _idlflags_ = ['dual', 'oleautomation']


cDStAISC360_10._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAISC360_10 implementation
# class cDStAISC360_10_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCaseModalHistoryLinear._methods_ = [
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetDampOverrides',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_double), 'DampA'),
        (['in', 'out'], POINTER(c_double), 'DampB'),
        (['in', 'out'], POINTER(c_double), 'DampF1'),
        (['in', 'out'], POINTER(c_double), 'DampF2'),
        (['in', 'out'], POINTER(c_double), 'DampD1'),
        (['in', 'out'], POINTER(c_double), 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetDampType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetModalCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetMotionType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MotionType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NStep'),
        (['in', 'out'], POINTER(c_double), 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Time'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetDampOverrides',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Damp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_double, 'DampA'),
        (['in'], c_double, 'DampB'),
        (['in'], c_double, 'DampF1'),
        (['in'], c_double, 'DampF2'),
        (['in'], c_double, 'DampD1'),
        (['in'], c_double, 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetModalCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'ModalCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetMotionType',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MotionType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NStep'),
        (['in'], c_double, 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseModalHistoryLinear implementation
# class cCaseModalHistoryLinear_Impl(object):
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def GetDampConstant(self, Name):
#         '-no docstring-'
#         #return Damp, pRetVal
#
#     def GetDampInterpolated(self, Name):
#         '-no docstring-'
#         #return DampType, NumberItems, Time, Damp, pRetVal
#
#     def GetDampOverrides(self, Name):
#         '-no docstring-'
#         #return NumberItems, Mode, Damp, pRetVal
#
#     def GetDampProportional(self, Name):
#         '-no docstring-'
#         #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
#
#     def GetDampType(self, Name):
#         '-no docstring-'
#         #return DampType, pRetVal
#
#     def GetModalCase(self, Name):
#         '-no docstring-'
#         #return ModalCase, pRetVal
#
#     def GetMotionType(self, Name):
#         '-no docstring-'
#         #return MotionType, pRetVal
#
#     def GetTimeStep(self, Name):
#         '-no docstring-'
#         #return NStep, Dt, pRetVal
#
#     def SetDampConstant(self, Name, Damp):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampInterpolated(self, Name, DampType, NumberItems):
#         '-no docstring-'
#         #return Time, Damp, pRetVal
#
#     def SetDampOverrides(self, Name, NumberItems):
#         '-no docstring-'
#         #return Mode, Damp, pRetVal
#
#     def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModalCase(self, Name, ModalCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMotionType(self, Name, MotionType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTimeStep(self, Name, NStep, Dt):
#         '-no docstring-'
#         #return pRetVal
#

cAutoSeismic._methods_ = [
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetIBC2006',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_int), 'CtType'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'Omega'),
        (['in', 'out'], POINTER(c_double), 'Cd'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_int), 'IBC2006Option'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(BSTR), 'ZipCode'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Tl'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetIBC2006',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_int, 'CtType'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'R'),
        (['in'], c_double, 'Omega'),
        (['in'], c_double, 'Cd'),
        (['in'], c_double, 'I'),
        (['in'], c_int, 'IBC2006Option'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], BSTR, 'ZipCode'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Tl'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetAS11702007',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'AS2007SiteClass'),
        (['in', 'out'], POINTER(c_double), 'AS2007Kp'),
        (['in', 'out'], POINTER(c_double), 'AS2007Z'),
        (['in', 'out'], POINTER(c_double), 'AS2007Sp'),
        (['in', 'out'], POINTER(c_double), 'AS2007Mu'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetBOCA96',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'BOCA96Aa'),
        (['in', 'out'], POINTER(c_double), 'BOCA96Av'),
        (['in', 'out'], POINTER(c_double), 'BOCA96S'),
        (['in', 'out'], POINTER(c_double), 'BOCA96R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetChinese2002',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax'),
        (['in', 'out'], POINTER(c_int), 'JGJ32002SI'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002DampRatio'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002Tg'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002PTDF'),
        (['in', 'out'], POINTER(c_double), 'EnhancementFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetChinese2010',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax'),
        (['in', 'out'], POINTER(c_int), 'JGJ32002SI'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002DampRatio'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002Tg'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002PTDF'),
        (['in', 'out'], POINTER(c_double), 'EnhancementFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetDiaphragmEccentricityOverride',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Eccen'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetEurocode82004',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'EURO2004GroundType'),
        (['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Ag'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Beta'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Q'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetEurocode82004_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'EURO2004Country'),
        (['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType'),
        (['in', 'out'], POINTER(c_int), 'EURO2004GroundType'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Ag'),
        (['in', 'out'], POINTER(c_double), 'EURO2004S'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Tb'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Tc'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Td'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Beta'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Q'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetIBC2003',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'Sg'),
        (['in', 'out'], POINTER(c_int), 'SeismicCoeffFlag'),
        (['in', 'out'], POINTER(c_int), 'Site'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'Omega'),
        (['in', 'out'], POINTER(c_double), 'Cd'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetIS1893_2002',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'INZFlag'),
        (['in', 'out'], POINTER(c_double), 'INZ'),
        (['in', 'out'], POINTER(c_int), 'INS'),
        (['in', 'out'], POINTER(c_double), 'INI'),
        (['in', 'out'], POINTER(c_double), 'INR'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetNBCC2005',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'CtType'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'PGA'),
        (['in', 'out'], POINTER(c_double), 'S02'),
        (['in', 'out'], POINTER(c_double), 'S05'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'S2'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_double), 'Mv'),
        (['in', 'out'], POINTER(c_double), 'Rd'),
        (['in', 'out'], POINTER(c_double), 'Ro'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'GetNBCC2010',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'CtType'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'PGA'),
        (['in', 'out'], POINTER(c_double), 'S02'),
        (['in', 'out'], POINTER(c_double), 'S05'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'S2'),
        (['in', 'out'], POINTER(c_double), 'S4'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_double), 'Mv'),
        (['in', 'out'], POINTER(c_double), 'Rd'),
        (['in', 'out'], POINTER(c_double), 'Ro'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'GetNBCC2015',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'CtType'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'PGA'),
        (['in', 'out'], POINTER(c_double), 'S02'),
        (['in', 'out'], POINTER(c_double), 'S05'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'S2'),
        (['in', 'out'], POINTER(c_double), 'S5'),
        (['in', 'out'], POINTER(c_double), 'S10'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'F02'),
        (['in', 'out'], POINTER(c_double), 'F05'),
        (['in', 'out'], POINTER(c_double), 'F1'),
        (['in', 'out'], POINTER(c_double), 'F2'),
        (['in', 'out'], POINTER(c_double), 'F5'),
        (['in', 'out'], POINTER(c_double), 'F10'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_double), 'Mv'),
        (['in', 'out'], POINTER(c_double), 'Rd'),
        (['in', 'out'], POINTER(c_double), 'Ro'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetNBCC95',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PFlag'),
        (['in', 'out'], POINTER(c_double), 'Ds'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'Za'),
        (['in', 'out'], POINTER(c_int), 'Zv'),
        (['in', 'out'], POINTER(c_int), 'ZvFlag'),
        (['in', 'out'], POINTER(c_double), 'Zvr'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_double), 'F'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetNEHRP97',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'NEHRP97Sg'),
        (['in', 'out'], POINTER(c_int), 'NEHRP97SeismicCoeffFlag'),
        (['in', 'out'], POINTER(c_int), 'NEHRP97Site'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97Ss'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97S1'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97Fa'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97Fv'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'GetNTC2008',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_int), 'C1Type'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'ParamsOption'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(c_int), 'Island'),
        (['in', 'out'], POINTER(c_int), 'LimitState'),
        (['in', 'out'], POINTER(c_int), 'UsageClass'),
        (['in', 'out'], POINTER(c_double), 'NomLife'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'F0'),
        (['in', 'out'], POINTER(c_double), 'Tcs'),
        (['in', 'out'], POINTER(c_int), 'SpecType'),
        (['in', 'out'], POINTER(c_int), 'SoilType'),
        (['in', 'out'], POINTER(c_int), 'Topography'),
        (['in', 'out'], POINTER(c_double), 'hRatio'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'GetNTC2018',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'ParamsOption'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(c_int), 'Island'),
        (['in', 'out'], POINTER(c_int), 'LimitState'),
        (['in', 'out'], POINTER(c_int), 'UsageClass'),
        (['in', 'out'], POINTER(c_double), 'NomLife'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'F0'),
        (['in', 'out'], POINTER(c_double), 'Tcs'),
        (['in', 'out'], POINTER(c_int), 'SpecType'),
        (['in', 'out'], POINTER(c_int), 'SoilType'),
        (['in', 'out'], POINTER(c_int), 'Topography'),
        (['in', 'out'], POINTER(c_double), 'hRatio'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetNZS11702004',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'NZS2004SiteClass'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Z'),
        (['in', 'out'], POINTER(c_double), 'NZS2004R'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Dist'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Sp'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Mu'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'GetNZS11702004_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'NZS2004SiteClass'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Z'),
        (['in', 'out'], POINTER(c_double), 'NZS2004R'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Dist'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Sp'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Mu'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderTSite'),
        (['in', 'out'], POINTER(c_double), 'NZS2004TSite'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'GetNZS11702004_2',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'NZS2004SiteClass'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Z'),
        (['in', 'out'], POINTER(c_double), 'NZS2004R'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Dist'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Sp'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Mu'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderTSite'),
        (['in', 'out'], POINTER(c_double), 'NZS2004TSite'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderSingleStory'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetUBC94',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'UBC94ZFlag'),
        (['in', 'out'], POINTER(c_double), 'UBC94Z'),
        (['in', 'out'], POINTER(c_double), 'UBC94S'),
        (['in', 'out'], POINTER(c_double), 'UBC94I'),
        (['in', 'out'], POINTER(c_double), 'UBC94Rw'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetUBC97',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'UBC97SeismicCoeffFlag'),
        (['in', 'out'], POINTER(c_int), 'UBC97SoilProfileType'),
        (['in', 'out'], POINTER(c_double), 'UBC97Z'),
        (['in', 'out'], POINTER(c_double), 'UBC97Ca'),
        (['in', 'out'], POINTER(c_double), 'UBC97Cv'),
        (['in', 'out'], POINTER(c_int), 'UBC97NearSourceFlag'),
        (['in', 'out'], POINTER(c_int), 'UBC97SourceType'),
        (['in', 'out'], POINTER(c_double), 'UBC97Dist'),
        (['in', 'out'], POINTER(c_double), 'UBC97Na'),
        (['in', 'out'], POINTER(c_double), 'UBC97Nv'),
        (['in', 'out'], POINTER(c_double), 'UBC97I'),
        (['in', 'out'], POINTER(c_double), 'UBC97R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetUBC97Iso',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'UBC97IsoSeismicCoeffFlag'),
        (['in', 'out'], POINTER(c_int), 'UBC97IsoSoilProfileType'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoZ'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoCv'),
        (['in', 'out'], POINTER(c_int), 'UBC97IsoNearSourceFlag'),
        (['in', 'out'], POINTER(c_int), 'UBC97IsoSourceType'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoDist'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoNv'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoRi'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoBd'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoKDmax'),
        (['in', 'out'], POINTER(c_double), 'UBC97IsoKDmin'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetUserCoefficient',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['in', 'out'], POINTER(c_double), 'K'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetUserLoad',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetAS11702007',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'AS2007SiteClass'),
        (['in'], c_double, 'AS2007Kp'),
        (['in'], c_double, 'AS2007Z'),
        (['in'], c_double, 'AS2007Sp'),
        (['in'], c_double, 'AS2007Mu'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetBOCA96',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'BOCA96Aa'),
        (['in'], c_double, 'BOCA96Av'),
        (['in'], c_double, 'BOCA96S'),
        (['in'], c_double, 'BOCA96R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'SetChinese2002',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'JGJ32002AlphaMax'),
        (['in'], c_int, 'JGJ32002SI'),
        (['in'], c_double, 'JGJ32002DampRatio'),
        (['in'], c_double, 'JGJ32002Tg'),
        (['in'], c_double, 'JGJ32002PTDF'),
        (['in'], c_double, 'EnhancementFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'SetChinese2010',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'JGJ32002AlphaMax'),
        (['in'], c_int, 'JGJ32002SI'),
        (['in'], c_double, 'JGJ32002DampRatio'),
        (['in'], c_double, 'JGJ32002Tg'),
        (['in'], c_double, 'JGJ32002PTDF'),
        (['in'], c_double, 'EnhancementFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'SetDiaphragmEccentricityOverride',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Diaph'),
        (['in'], c_double, 'Eccen'),
        (['in', 'optional'], VARIANT_BOOL, 'Delete', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'SetEurocode82004',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'EURO2004GroundType'),
        (['in'], c_int, 'EURO2004SpectrumType'),
        (['in'], c_double, 'EURO2004Ag'),
        (['in'], c_double, 'EURO2004Beta'),
        (['in'], c_double, 'EURO2004Q'),
        (['in'], c_double, 'EURO2004Lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetEurocode82004_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'EURO2004Country'),
        (['in'], c_int, 'EURO2004SpectrumType'),
        (['in'], c_int, 'EURO2004GroundType'),
        (['in'], c_double, 'EURO2004Ag'),
        (['in'], c_double, 'EURO2004S'),
        (['in'], c_double, 'EURO2004Tb'),
        (['in'], c_double, 'EURO2004Tc'),
        (['in'], c_double, 'EURO2004Td'),
        (['in'], c_double, 'EURO2004Beta'),
        (['in'], c_double, 'EURO2004Q'),
        (['in'], c_double, 'EURO2004Lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetIBC2003',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'Sg'),
        (['in'], c_int, 'SeismicCoeffFlag'),
        (['in'], c_int, 'Site'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'R'),
        (['in'], c_double, 'Omega'),
        (['in'], c_double, 'Cd'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetIS1893_2002',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'INZFlag'),
        (['in'], c_double, 'INZ'),
        (['in'], c_int, 'INS'),
        (['in'], c_double, 'INI'),
        (['in'], c_double, 'INR'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetNBCC2005',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'CtType'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'PGA'),
        (['in'], c_double, 'S02'),
        (['in'], c_double, 'S05'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'S2'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'I'),
        (['in'], c_double, 'Mv'),
        (['in'], c_double, 'Rd'),
        (['in'], c_double, 'Ro'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetNBCC2010',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'CtType'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'PGA'),
        (['in'], c_double, 'S02'),
        (['in'], c_double, 'S05'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'S2'),
        (['in'], c_double, 'S4'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'I'),
        (['in'], c_double, 'Mv'),
        (['in'], c_double, 'Rd'),
        (['in'], c_double, 'Ro'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetNBCC2015',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'CtType'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'PGA'),
        (['in'], c_double, 'S02'),
        (['in'], c_double, 'S05'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'S2'),
        (['in'], c_double, 'S5'),
        (['in'], c_double, 'S10'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'F02'),
        (['in'], c_double, 'F05'),
        (['in'], c_double, 'F1'),
        (['in'], c_double, 'F2'),
        (['in'], c_double, 'F5'),
        (['in'], c_double, 'F10'),
        (['in'], c_double, 'I'),
        (['in'], c_double, 'Mv'),
        (['in'], c_double, 'Rd'),
        (['in'], c_double, 'Ro'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetNBCC95',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PFlag'),
        (['in'], c_double, 'Ds'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'Za'),
        (['in'], c_int, 'Zv'),
        (['in'], c_int, 'ZvFlag'),
        (['in'], c_double, 'Zvr'),
        (['in'], c_double, 'I'),
        (['in'], c_double, 'F'),
        (['in'], c_double, 'R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetNEHRP97',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'NEHRP97Sg'),
        (['in'], c_int, 'NEHRP97SeismicCoeffFlag'),
        (['in'], c_int, 'NEHRP97Site'),
        (['in'], c_double, 'NEHRP97Ss'),
        (['in'], c_double, 'NEHRP97S1'),
        (['in'], c_double, 'NEHRP97Fa'),
        (['in'], c_double, 'NEHRP97Fv'),
        (['in'], c_double, 'NEHRP97R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetNone',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetNTC2008',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_int, 'C1Type'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'ParamsOption'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], c_int, 'Island'),
        (['in'], c_int, 'LimitState'),
        (['in'], c_int, 'UsageClass'),
        (['in'], c_double, 'NomLife'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'F0'),
        (['in'], c_double, 'Tcs'),
        (['in'], c_int, 'SpecType'),
        (['in'], c_int, 'SoilType'),
        (['in'], c_int, 'Topography'),
        (['in'], c_double, 'hRatio'),
        (['in'], c_double, 'Damping'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'SetNTC2018',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'ParamsOption'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], c_int, 'Island'),
        (['in'], c_int, 'LimitState'),
        (['in'], c_int, 'UsageClass'),
        (['in'], c_double, 'NomLife'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'F0'),
        (['in'], c_double, 'Tcs'),
        (['in'], c_int, 'SpecType'),
        (['in'], c_int, 'SoilType'),
        (['in'], c_int, 'Topography'),
        (['in'], c_double, 'hRatio'),
        (['in'], c_double, 'Damping'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'lambda'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetNZS11702004',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'NZS2004SiteClass'),
        (['in'], c_double, 'NZS2004Z'),
        (['in'], c_double, 'NZS2004R'),
        (['in'], c_double, 'NZS2004Dist'),
        (['in'], c_double, 'NZS2004Sp'),
        (['in'], c_double, 'NZS2004Mu'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'SetNZS11702004_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'NZS2004SiteClass'),
        (['in'], c_double, 'NZS2004Z'),
        (['in'], c_double, 'NZS2004R'),
        (['in'], c_double, 'NZS2004Dist'),
        (['in'], c_double, 'NZS2004Sp'),
        (['in'], c_double, 'NZS2004Mu'),
        (['in'], VARIANT_BOOL, 'NZS2004ConsiderTSite'),
        (['in'], c_double, 'NZS2004TSite'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'SetNZS11702004_2',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'NZS2004SiteClass'),
        (['in'], c_double, 'NZS2004Z'),
        (['in'], c_double, 'NZS2004R'),
        (['in'], c_double, 'NZS2004Dist'),
        (['in'], c_double, 'NZS2004Sp'),
        (['in'], c_double, 'NZS2004Mu'),
        (['in'], VARIANT_BOOL, 'NZS2004ConsiderTSite'),
        (['in'], c_double, 'NZS2004TSite'),
        (['in'], VARIANT_BOOL, 'NZS2004ConsiderSingleStory'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetUBC94',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'UBC94ZFlag'),
        (['in'], c_double, 'UBC94Z'),
        (['in'], c_double, 'UBC94S'),
        (['in'], c_double, 'UBC94I'),
        (['in'], c_double, 'UBC94Rw'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetUBC97',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'UBC97SeismicCoeffFlag'),
        (['in'], c_int, 'UBC97SoilProfileType'),
        (['in'], c_double, 'UBC97Z'),
        (['in'], c_double, 'UBC97Ca'),
        (['in'], c_double, 'UBC97Cv'),
        (['in'], c_int, 'UBC97NearSourceFlag'),
        (['in'], c_int, 'UBC97SourceType'),
        (['in'], c_double, 'UBC97Dist'),
        (['in'], c_double, 'UBC97Na'),
        (['in'], c_double, 'UBC97Nv'),
        (['in'], c_double, 'UBC97I'),
        (['in'], c_double, 'UBC97R'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetUBC97Iso',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'UBC97IsoSeismicCoeffFlag'),
        (['in'], c_int, 'UBC97IsoSoilProfileType'),
        (['in'], c_double, 'UBC97IsoZ'),
        (['in'], c_double, 'UBC97IsoCv'),
        (['in'], c_int, 'UBC97IsoNearSourceFlag'),
        (['in'], c_int, 'UBC97IsoSourceType'),
        (['in'], c_double, 'UBC97IsoDist'),
        (['in'], c_double, 'UBC97IsoNv'),
        (['in'], c_double, 'UBC97IsoRi'),
        (['in'], c_double, 'UBC97IsoBd'),
        (['in'], c_double, 'UBC97IsoKDmax'),
        (['in'], c_double, 'UBC97IsoKDmin'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetUserCoefficient',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'C'),
        (['in'], c_double, 'K'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetUserLoad',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in', 'optional'], c_double, 'Eccen', 0.05),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetUserLoadValue',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Diaph'),
        (['in'], c_double, 'FX'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'MZ'),
        (['in', 'optional'], c_double, 'X', 0.0),
        (['in', 'optional'], c_double, 'Y', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'GetIBC2009',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_int), 'CtType'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'Omega'),
        (['in', 'out'], POINTER(c_double), 'Cd'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_int), 'IBC2009Option'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(BSTR), 'ZipCode'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Tl'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'GetIBC2012',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DirFlag'),
        (['in', 'out'], POINTER(c_double), 'Eccen'),
        (['in', 'out'], POINTER(c_int), 'PeriodFlag'),
        (['in', 'out'], POINTER(c_int), 'CtType'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'R'),
        (['in', 'out'], POINTER(c_double), 'Omega'),
        (['in', 'out'], POINTER(c_double), 'Cd'),
        (['in', 'out'], POINTER(c_double), 'I'),
        (['in', 'out'], POINTER(c_int), 'IBC2012Option'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(BSTR), 'ZipCode'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Tl'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetIBC2009',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_int, 'CtType'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'R'),
        (['in'], c_double, 'Omega'),
        (['in'], c_double, 'Cd'),
        (['in'], c_double, 'I'),
        (['in'], c_int, 'IBC2009Option'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], BSTR, 'ZipCode'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Tl'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetIBC2012',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DirFlag'),
        (['in'], c_double, 'Eccen'),
        (['in'], c_int, 'PeriodFlag'),
        (['in'], c_int, 'CtType'),
        (['in'], c_double, 'UserT'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'R'),
        (['in'], c_double, 'Omega'),
        (['in'], c_double, 'Cd'),
        (['in'], c_double, 'I'),
        (['in'], c_int, 'IBC2012Option'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], BSTR, 'ZipCode'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Tl'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAutoSeismic implementation
# class cAutoSeismic_Impl(object):
#     def GetIBC2006(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
#
#     def SetIBC2006(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAS11702007(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu, pRetVal
#
#     def GetBOCA96(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R, pRetVal
#
#     def GetChinese2002(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor, pRetVal
#
#     def GetChinese2010(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor, pRetVal
#
#     def GetDiaphragmEccentricityOverride(self, Name):
#         '-no docstring-'
#         #return Num, Diaph, Eccen, pRetVal
#
#     def GetEurocode82004(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, EURO2004Lambda, pRetVal
#
#     def GetEurocode82004_1(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004Country, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, EURO2004Lambda, pRetVal
#
#     def GetIBC2003(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, Sg, SeismicCoeffFlag, Site, Ss, S1, Fa, Fv, R, Omega, Cd, pRetVal
#
#     def GetIS1893_2002(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, INZFlag, INZ, INS, INI, INR, pRetVal
#
#     def GetNBCC2005(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, I, Mv, Rd, Ro, pRetVal
#
#     def GetNBCC2010(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S4, SiteClass, Fa, Fv, I, Mv, Rd, Ro, pRetVal
#
#     def GetNBCC2015(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, I, Mv, Rd, Ro, pRetVal
#
#     def GetNBCC95(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PFlag, Ds, PeriodFlag, UserT, UserZ, TopZ, BottomZ, Za, Zv, ZvFlag, Zvr, I, F, R, pRetVal
#
#     def GetNEHRP97(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, NEHRP97Sg, NEHRP97SeismicCoeffFlag, NEHRP97Site, NEHRP97Ss, NEHRP97S1, NEHRP97Fa, NEHRP97Fv, NEHRP97R, pRetVal
#
#     def GetNTC2008(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, C1Type, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda, pRetVal
#
#     def GetNTC2018(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda, pRetVal
#
#     def GetNZS11702004(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, pRetVal
#
#     def GetNZS11702004_1(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite, pRetVal
#
#     def GetNZS11702004_2(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite, NZS2004ConsiderSingleStory, pRetVal
#
#     def GetUBC94(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC94ZFlag, UBC94Z, UBC94S, UBC94I, UBC94Rw, pRetVal
#
#     def GetUBC97(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC97SeismicCoeffFlag, UBC97SoilProfileType, UBC97Z, UBC97Ca, UBC97Cv, UBC97NearSourceFlag, UBC97SourceType, UBC97Dist, UBC97Na, UBC97Nv, UBC97I, UBC97R, pRetVal
#
#     def GetUBC97Iso(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, UserZ, TopZ, BottomZ, UBC97IsoSeismicCoeffFlag, UBC97IsoSoilProfileType, UBC97IsoZ, UBC97IsoCv, UBC97IsoNearSourceFlag, UBC97IsoSourceType, UBC97IsoDist, UBC97IsoNv, UBC97IsoRi, UBC97IsoBd, UBC97IsoKDmax, UBC97IsoKDmin, pRetVal
#
#     def GetUserCoefficient(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, UserZ, TopZ, BottomZ, C, K, pRetVal
#
#     def GetUserLoad(self, Name):
#         '-no docstring-'
#         #return MyType, Eccen, Num, Diaph, FX, FY, MZ, X, Y, pRetVal
#
#     def SetAS11702007(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBOCA96(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2002(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2010(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, JGJ32002AlphaMax, JGJ32002SI, JGJ32002DampRatio, JGJ32002Tg, JGJ32002PTDF, EnhancementFactor):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDiaphragmEccentricityOverride(self, Name, Diaph, Eccen, Delete):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEurocode82004(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, EURO2004Lambda):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEurocode82004_1(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, EURO2004Country, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, EURO2004Lambda):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIBC2003(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, Sg, SeismicCoeffFlag, Site, Ss, S1, Fa, Fv, R, Omega, Cd):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIS1893_2002(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, INZFlag, INZ, INS, INI, INR):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2005(self, Name, DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, I, Mv, Rd, Ro):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2010(self, Name, DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S4, SiteClass, Fa, Fv, I, Mv, Rd, Ro):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2015(self, Name, DirFlag, Eccen, CtType, PeriodFlag, UserT, UserZ, TopZ, BottomZ, PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, I, Mv, Rd, Ro):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC95(self, Name, DirFlag, Eccen, PFlag, Ds, PeriodFlag, UserT, UserZ, TopZ, BottomZ, Za, Zv, ZvFlag, Zvr, I, F, R):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNEHRP97(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, NEHRP97Sg, NEHRP97SeismicCoeffFlag, NEHRP97Site, NEHRP97Ss, NEHRP97S1, NEHRP97Fa, NEHRP97Fv, NEHRP97R):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNone(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNTC2008(self, Name, DirFlag, Eccen, PeriodFlag, C1Type, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNTC2018(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, lambda):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNZS11702004(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNZS11702004_1(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNZS11702004_2(self, Name, DirFlag, Eccen, PeriodFlag, UserT, UserZ, TopZ, BottomZ, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004Sp, NZS2004Mu, NZS2004ConsiderTSite, NZS2004TSite, NZS2004ConsiderSingleStory):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC94(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC94ZFlag, UBC94Z, UBC94S, UBC94I, UBC94Rw):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC97(self, Name, DirFlag, Eccen, PeriodFlag, Ct, UserT, UserZ, TopZ, BottomZ, UBC97SeismicCoeffFlag, UBC97SoilProfileType, UBC97Z, UBC97Ca, UBC97Cv, UBC97NearSourceFlag, UBC97SourceType, UBC97Dist, UBC97Na, UBC97Nv, UBC97I, UBC97R):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC97Iso(self, Name, DirFlag, Eccen, UserZ, TopZ, BottomZ, UBC97IsoSeismicCoeffFlag, UBC97IsoSoilProfileType, UBC97IsoZ, UBC97IsoCv, UBC97IsoNearSourceFlag, UBC97IsoSourceType, UBC97IsoDist, UBC97IsoNv, UBC97IsoRi, UBC97IsoBd, UBC97IsoKDmax, UBC97IsoKDmin):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUserCoefficient(self, Name, DirFlag, Eccen, UserZ, TopZ, BottomZ, C, K):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUserLoad(self, Name, MyType, Eccen):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUserLoadValue(self, Name, Diaph, FX, FY, MZ, X, Y):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetIBC2009(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
#
#     def GetIBC2012(self, Name):
#         '-no docstring-'
#         #return DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, pRetVal
#
#     def SetIBC2009(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIBC2012(self, Name, DirFlag, Eccen, PeriodFlag, CtType, UserT, UserZ, TopZ, BottomZ, R, Omega, Cd, I, IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv):
#         '-no docstring-'
#         #return pRetVal
#


class cFunctionRS(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{A63E3DE8-9E3D-49B3-9C5E-B25D698F9437}')
    _idlflags_ = ['dual', 'oleautomation']


cFunction._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ConvertToUser',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['in', 'optional'], c_int, 'FuncType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'FuncRS',
        (['out', 'retval'], POINTER(POINTER(cFunctionRS)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'FuncTH',
        (['out', 'retval'], POINTER(POINTER(cFunctionTH)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], c_int, 'FuncType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'FuncType'),
        (['in', 'out'], POINTER(c_int), 'AddType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetValues',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyTime'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'FuncPSD',
        (['out', 'retval'], POINTER(POINTER(cFunctionPSD)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11), 'propget'],
        HRESULT,
        'FuncSS',
        (['out', 'retval'], POINTER(POINTER(cFunctionSS)), 'pRetVal')
    ),
]

################################################################
# code template for cFunction implementation
# class cFunction_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def ConvertToUser(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, FuncType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def FuncRS(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def FuncTH(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self, FuncType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return FuncType, AddType, pRetVal
#
#     def GetValues(self, Name):
#         '-no docstring-'
#         #return NumberItems, MyTime, Value, pRetVal
#
#     @property
#     def FuncPSD(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def FuncSS(self):
#         '-no docstring-'
#         #return pRetVal
#

cAutoWind._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetAPI4F2008',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_double), 'SSLFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetAPI4F2008_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_double), 'SSLFactor'),
        (['in', 'out'], POINTER(c_double), 'ShieldingFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetASCE702',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_int), 'ASCECase'),
        (['in', 'out'], POINTER(c_double), 'ASCEe1'),
        (['in', 'out'], POINTER(c_double), 'ASCEe2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_double), 'Kzt'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'Kd'),
        (['in', 'out'], POINTER(c_double), 'SolidGrossRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetASCE705',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_int), 'ASCECase'),
        (['in', 'out'], POINTER(c_double), 'ASCEe1'),
        (['in', 'out'], POINTER(c_double), 'ASCEe2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_double), 'Kzt'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'Kd'),
        (['in', 'out'], POINTER(c_double), 'SolidGrossRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetASCE710',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_int), 'ASCECase'),
        (['in', 'out'], POINTER(c_double), 'ASCEe1'),
        (['in', 'out'], POINTER(c_double), 'ASCEe2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_double), 'Kzt'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'Kd'),
        (['in', 'out'], POINTER(c_double), 'SolidGrossRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68)],
        HRESULT,
        'GetASCE716',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_int), 'ASCECase'),
        (['in', 'out'], POINTER(c_double), 'ASCEe1'),
        (['in', 'out'], POINTER(c_double), 'ASCEe2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'Kzt'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'Kd'),
        (['in', 'out'], POINTER(c_double), 'SolidGrossRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetASCE788',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetASCE795',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_double), 'Kzt'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetASNZS117022002',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_double), 'Ka'),
        (['in', 'out'], POINTER(c_double), 'Kc'),
        (['in', 'out'], POINTER(c_double), 'Kl'),
        (['in', 'out'], POINTER(c_double), 'Kp'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'Cat'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'CycloneRegion'),
        (['in', 'out'], POINTER(c_double), 'Md'),
        (['in', 'out'], POINTER(c_double), 'Ms'),
        (['in', 'out'], POINTER(c_double), 'Mt'),
        (['in', 'out'], POINTER(c_double), 'Cdyn'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'GetASNZS117022011',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_double), 'Ka'),
        (['in', 'out'], POINTER(c_double), 'Kc'),
        (['in', 'out'], POINTER(c_double), 'Kl'),
        (['in', 'out'], POINTER(c_double), 'Kp'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'Cat'),
        (['in', 'out'], POINTER(c_int), 'ASCECase'),
        (['in', 'out'], POINTER(c_double), 'Md'),
        (['in', 'out'], POINTER(c_double), 'Ms'),
        (['in', 'out'], POINTER(c_double), 'Mt'),
        (['in', 'out'], POINTER(c_double), 'Cdyn'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetBOCA96',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserGust'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetBS639995',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'Ve'),
        (['in', 'out'], POINTER(c_double), 'Ca'),
        (['in', 'out'], POINTER(c_double), 'Cr'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetChinese2002',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'BuildingWidth'),
        (['in', 'out'], POINTER(c_double), 'Us'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WZero'),
        (['in', 'out'], POINTER(c_int), 'Rt'),
        (['in', 'out'], POINTER(c_int), 'PhiZOpt'),
        (['in', 'out'], POINTER(c_int), 'T1Opt'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetChinese2002_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'BuildingWidth'),
        (['in', 'out'], POINTER(c_double), 'Us'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UniformTaper'),
        (['in', 'out'], POINTER(c_double), 'BHoverB0'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WZero'),
        (['in', 'out'], POINTER(c_int), 'Rt'),
        (['in', 'out'], POINTER(c_int), 'PhiZOpt'),
        (['in', 'out'], POINTER(c_int), 'T1Opt'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetChinese2010',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'BuildingWidth'),
        (['in', 'out'], POINTER(c_double), 'Us'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UniformTaper'),
        (['in', 'out'], POINTER(c_double), 'BHoverB0'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WZero'),
        (['in', 'out'], POINTER(c_int), 'Rt'),
        (['in', 'out'], POINTER(c_int), 'PhiZOpt'),
        (['in', 'out'], POINTER(c_int), 'T1Opt'),
        (['in', 'out'], POINTER(c_double), 'UserT'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetEurocode12005',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'Terrain'),
        (['in', 'out'], POINTER(c_double), 'Orography'),
        (['in', 'out'], POINTER(c_double), 'K1'),
        (['in', 'out'], POINTER(c_double), 'CsCd'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetEurocode12005_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'Terrain'),
        (['in', 'out'], POINTER(c_double), 'Orography'),
        (['in', 'out'], POINTER(c_double), 'K1'),
        (['in', 'out'], POINTER(c_double), 'CsCd'),
        (['in', 'out'], POINTER(c_double), 'Rho'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetExposure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyWidth'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Height'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'GetExposure_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyWidth'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyDepth'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Height'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetIS8751987',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'Terrain'),
        (['in', 'out'], POINTER(c_int), 'Class'),
        (['in', 'out'], POINTER(c_double), 'K1'),
        (['in', 'out'], POINTER(c_double), 'K3'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(62)],
        HRESULT,
        'GetIS8752015',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'TerrainCategory'),
        (['in', 'out'], POINTER(c_int), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_double), 'K1'),
        (['in', 'out'], POINTER(c_double), 'K3'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetMexican',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetNBCC2005',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetNBCC2010',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(58)],
        HRESULT,
        'GetNBCC2010_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_int), 'TerrainType'),
        (['in', 'out'], POINTER(c_double), 'CeWindward'),
        (['in', 'out'], POINTER(c_double), 'CeLeeward'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(59)],
        HRESULT,
        'GetNBCC2015',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(c_int), 'NBCCCase'),
        (['in', 'out'], POINTER(c_double), 'e1'),
        (['in', 'out'], POINTER(c_double), 'e2'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(c_double), 'TopographicFactor'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(c_int), 'TerrainType'),
        (['in', 'out'], POINTER(c_double), 'CeWindward'),
        (['in', 'out'], POINTER(c_double), 'CeLeeward'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetNBCC95',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['in', 'out'], POINTER(c_double), 'GustFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'GetNTC2008',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'Vb'),
        (['in', 'out'], POINTER(c_int), 'ExposureCategory'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'Cd'),
        (['in', 'out'], POINTER(c_double), 'cp'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'GetNTC2018',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'Vb'),
        (['in', 'out'], POINTER(c_int), 'ExposureCategory'),
        (['in', 'out'], POINTER(c_double), 'Ct'),
        (['in', 'out'], POINTER(c_double), 'Cd'),
        (['in', 'out'], POINTER(c_double), 'cp'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66)],
        HRESULT,
        'GetSP20133302016',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'LoadingType'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'cp'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_int), 'StructureType'),
        (['in', 'out'], POINTER(c_int), 'LogDecrement'),
        (['in', 'out'], POINTER(c_double), 'BuildingWidth'),
        (['in', 'out'], POINTER(c_double), 'BuildingDepth'),
        (['in', 'out'], POINTER(c_double), 'Zeq'),
        (['in', 'out'], POINTER(c_int), 'WindDistrict'),
        (['in', 'out'], POINTER(c_double), 'WindPressure'),
        (['in', 'out'], POINTER(c_int), 'TerrainType'),
        (['in', 'out'], POINTER(c_double), 'LimitFreq'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['in', 'out'], POINTER(c_int), 'FirstValMode'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetUBC94',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetUBC97',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(c_double), 'Cpw'),
        (['in', 'out'], POINTER(c_double), 'Cpl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_int), 'ExposureType'),
        (['in', 'out'], POINTER(c_double), 'ImportanceFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserExposure'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetUserLoad',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Diaph'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'SetAPI4F2008',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_double, 'SSLFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetAPI4F2008_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_double, 'SSLFactor'),
        (['in'], c_double, 'ShieldingFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetASCE702',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_int, 'ASCECase'),
        (['in'], c_double, 'ASCEe1'),
        (['in'], c_double, 'ASCEe2'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_double, 'Kzt'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'Kd'),
        (['in', 'optional'], c_double, 'SolidGrossRatio', 0.2),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetASCE705',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_int, 'ASCECase'),
        (['in'], c_double, 'ASCEe1'),
        (['in'], c_double, 'ASCEe2'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_double, 'Kzt'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'Kd'),
        (['in', 'optional'], c_double, 'SolidGrossRatio', 0.2),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetASCE710',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_int, 'ASCECase'),
        (['in'], c_double, 'ASCEe1'),
        (['in'], c_double, 'ASCEe2'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_double, 'Kzt'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'Kd'),
        (['in', 'optional'], c_double, 'SolidGrossRatio', 0.2),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69)],
        HRESULT,
        'SetASCE716',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_int, 'ASCECase'),
        (['in'], c_double, 'ASCEe1'),
        (['in'], c_double, 'ASCEe2'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'Kzt'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'Kd'),
        (['in', 'optional'], c_double, 'SolidGrossRatio', 0.2),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetASCE788',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_double, 'GustFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetASCE795',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_double, 'Kzt'),
        (['in'], c_double, 'GustFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetASNZS117022002',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_double, 'Ka'),
        (['in'], c_double, 'Kc'),
        (['in'], c_double, 'Kl'),
        (['in'], c_double, 'Kp'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'Cat'),
        (['in'], VARIANT_BOOL, 'CycloneRegion'),
        (['in'], c_double, 'Md'),
        (['in'], c_double, 'Ms'),
        (['in'], c_double, 'Mt'),
        (['in'], c_double, 'Cdyn'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'SetASNZS117022011',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_double, 'Ka'),
        (['in'], c_double, 'Kc'),
        (['in'], c_double, 'Kl'),
        (['in'], c_double, 'Kp'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'Cat'),
        (['in'], c_int, 'ASCECase'),
        (['in'], c_double, 'Md'),
        (['in'], c_double, 'Ms'),
        (['in'], c_double, 'Mt'),
        (['in'], c_double, 'Cdyn'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetBOCA96',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_double, 'GustFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserGust', False),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetBS639995',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'Ve'),
        (['in'], c_double, 'Ca'),
        (['in'], c_double, 'Cr'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetChinese2002',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'BuildingWidth'),
        (['in'], c_double, 'Us'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WZero'),
        (['in'], c_int, 'Rt'),
        (['in'], c_int, 'PhiZOpt'),
        (['in'], c_int, 'T1Opt'),
        (['in'], c_double, 'UserT'),
        (['in'], c_double, 'DampRatio'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetChinese2002_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'BuildingWidth'),
        (['in'], c_double, 'Us'),
        (['in'], VARIANT_BOOL, 'UniformTaper'),
        (['in'], c_double, 'BHoverB0'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WZero'),
        (['in'], c_int, 'Rt'),
        (['in'], c_int, 'PhiZOpt'),
        (['in'], c_int, 'T1Opt'),
        (['in'], c_double, 'UserT'),
        (['in'], c_double, 'DampRatio'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetChinese2010',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'BuildingWidth'),
        (['in'], c_double, 'Us'),
        (['in'], VARIANT_BOOL, 'UniformTaper'),
        (['in'], c_double, 'BHoverB0'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WZero'),
        (['in'], c_int, 'Rt'),
        (['in'], c_int, 'PhiZOpt'),
        (['in'], c_int, 'T1Opt'),
        (['in'], c_double, 'UserT'),
        (['in'], c_double, 'DampRatio'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetEurocode12005',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'Terrain'),
        (['in'], c_double, 'Orography'),
        (['in'], c_double, 'K1'),
        (['in'], c_double, 'CsCd'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetEurocode12005_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'Terrain'),
        (['in'], c_double, 'Orography'),
        (['in'], c_double, 'K1'),
        (['in'], c_double, 'CsCd'),
        (['in'], c_double, 'Rho'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetExposure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Diaph'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Width'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'SetExposure_1',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Diaph'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Width'),
        (['in'], c_double, 'Depth'),
        (['in'], c_double, 'Height'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetIS8751987',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'Terrain'),
        (['in'], c_int, 'Class'),
        (['in'], c_double, 'K1'),
        (['in'], c_double, 'K3'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'SetIS8752015',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'TerrainCategory'),
        (['in'], c_int, 'ImportanceFactor'),
        (['in'], c_double, 'K1'),
        (['in'], c_double, 'K3'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetMexican',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetNBCC2005',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetNBCC2010',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(60)],
        HRESULT,
        'SetNBCC2010_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_int, 'TerrainType'),
        (['in'], c_double, 'CeWindward'),
        (['in'], c_double, 'CeLeeward'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(61)],
        HRESULT,
        'SetNBCC2015',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], c_int, 'NBCCCase'),
        (['in'], c_double, 'e1'),
        (['in'], c_double, 'e2'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'GustFactor'),
        (['in'], c_double, 'TopographicFactor'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in'], c_int, 'TerrainType'),
        (['in'], c_double, 'CeWindward'),
        (['in'], c_double, 'CeLeeward'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetNBCC95',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'q'),
        (['in'], c_double, 'GustFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetNone',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'SetNTC2008',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'Vb'),
        (['in'], c_int, 'ExposureCategory'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'Cd'),
        (['in'], c_double, 'cp'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'SetNTC2018',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'Vb'),
        (['in'], c_int, 'ExposureCategory'),
        (['in'], c_double, 'Ct'),
        (['in'], c_double, 'Cd'),
        (['in'], c_double, 'cp'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67)],
        HRESULT,
        'SetSP20133302016',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'LoadingType'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'cp'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_int, 'StructureType'),
        (['in'], c_int, 'LogDecrement'),
        (['in'], c_double, 'BuildingWidth'),
        (['in'], c_double, 'BuildingDepth'),
        (['in'], c_double, 'Zeq'),
        (['in'], c_int, 'WindDistrict'),
        (['in'], c_double, 'WindPressure'),
        (['in'], c_int, 'TerrainType'),
        (['in'], c_double, 'LimitFreq'),
        (['in'], BSTR, 'ModalCase'),
        (['in'], c_int, 'FirstValMode'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetUBC94',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetUBC97',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], c_double, 'Cpw'),
        (['in'], c_double, 'Cpl'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_int, 'ExposureType'),
        (['in'], c_double, 'ImportanceFactor'),
        (['in', 'optional'], VARIANT_BOOL, 'UserExposure', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetUserLoad',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Diaph'),
        (['in'], c_double, 'FX'),
        (['in'], c_double, 'FY'),
        (['in'], c_double, 'MZ'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'GetAPI4F2013',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ExposureFrom'),
        (['in', 'out'], POINTER(c_double), 'DirAngle'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'UserZ'),
        (['in', 'out'], POINTER(c_double), 'TopZ'),
        (['in', 'out'], POINTER(c_double), 'BottomZ'),
        (['in', 'out'], POINTER(c_double), 'WindSpeed'),
        (['in', 'out'], POINTER(c_double), 'SSLFactor'),
        (['in', 'out'], POINTER(c_double), 'ShieldingFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'SetAPI4F2013',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ExposureFrom'),
        (['in'], c_double, 'DirAngle'),
        (['in'], VARIANT_BOOL, 'UserZ'),
        (['in'], c_double, 'TopZ'),
        (['in'], c_double, 'BottomZ'),
        (['in'], c_double, 'WindSpeed'),
        (['in'], c_double, 'SSLFactor'),
        (['in'], c_double, 'ShieldingFactor'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAutoWind implementation
# class cAutoWind_Impl(object):
#     def GetAPI4F2008(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, pRetVal
#
#     def GetAPI4F2008_1(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor, pRetVal
#
#     def GetASCE702(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
#
#     def GetASCE705(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
#
#     def GetASCE710(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
#
#     def GetASCE716(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure, pRetVal
#
#     def GetASCE788(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, GustFactor, UserExposure, pRetVal
#
#     def GetASCE795(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, UserExposure, pRetVal
#
#     def GetASNZS117022002(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, CycloneRegion, Md, Ms, Mt, Cdyn, UserExposure, pRetVal
#
#     def GetASNZS117022011(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, ASCECase, Md, Ms, Mt, Cdyn, UserExposure, pRetVal
#
#     def GetBOCA96(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserGust, GustFactor, UserExposure, pRetVal
#
#     def GetBS639995(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Ve, Ca, Cr, UserExposure, pRetVal
#
#     def GetChinese2002(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, BuildingWidth, Us, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure, pRetVal
#
#     def GetChinese2002_1(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure, pRetVal
#
#     def GetChinese2010(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure, pRetVal
#
#     def GetEurocode12005(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, UserExposure, pRetVal
#
#     def GetEurocode12005_1(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, Rho, UserExposure, pRetVal
#
#     def GetExposure(self, Name):
#         '-no docstring-'
#         #return Num, Diaph, X, Y, MyWidth, Height, pRetVal
#
#     def GetExposure_1(self, Name):
#         '-no docstring-'
#         #return Num, Diaph, X, Y, MyWidth, MyDepth, Height, pRetVal
#
#     def GetIS8751987(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Class, K1, K3, UserExposure, pRetVal
#
#     def GetIS8752015(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, TerrainCategory, ImportanceFactor, K1, K3, UserExposure, pRetVal
#
#     def GetMexican(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, UserExposure, pRetVal
#
#     def GetNBCC2005(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure, pRetVal
#
#     def GetNBCC2010(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure, pRetVal
#
#     def GetNBCC2010_1(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure, pRetVal
#
#     def GetNBCC2015(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, NBCCCase, e1, e2, UserZ, TopZ, BottomZ, q, GustFactor, TopographicFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure, pRetVal
#
#     def GetNBCC95(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, UserExposure, pRetVal
#
#     def GetNTC2008(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure, pRetVal
#
#     def GetNTC2018(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure, pRetVal
#
#     def GetSP20133302016(self, Name):
#         '-no docstring-'
#         #return LoadingType, ExposureFrom, DirAngle, cp, UserZ, TopZ, BottomZ, StructureType, LogDecrement, BuildingWidth, BuildingDepth, Zeq, WindDistrict, WindPressure, TerrainType, LimitFreq, ModalCase, FirstValMode, UserExposure, pRetVal
#
#     def GetUBC94(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure, pRetVal
#
#     def GetUBC97(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure, pRetVal
#
#     def GetUserLoad(self, Name):
#         '-no docstring-'
#         #return Num, Diaph, FX, FY, MZ, X, Y, pRetVal
#
#     def SetAPI4F2008(self, Name, ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAPI4F2008_1(self, Name, ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASCE702(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASCE705(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASCE710(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASCE716(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, ASCECase, ASCEe1, ASCEe2, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, Kzt, GustFactor, Kd, SolidGrossRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASCE788(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, GustFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASCE795(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, Kzt, GustFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASNZS117022002(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, CycloneRegion, Md, Ms, Mt, Cdyn, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetASNZS117022011(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, Ka, Kc, Kl, Kp, UserZ, TopZ, BottomZ, WindSpeed, Cat, ASCECase, Md, Ms, Mt, Cdyn, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBOCA96(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, GustFactor, UserGust, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBS639995(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Ve, Ca, Cr, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2002(self, Name, ExposureFrom, DirAngle, BuildingWidth, Us, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2002_1(self, Name, ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2010(self, Name, ExposureFrom, DirAngle, BuildingWidth, Us, UniformTaper, BHoverB0, UserZ, TopZ, BottomZ, WZero, Rt, PhiZOpt, T1Opt, UserT, DampRatio, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEurocode12005(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEurocode12005_1(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Orography, K1, CsCd, Rho, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetExposure(self, Name, Diaph, X, Y, Width, Height):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetExposure_1(self, Name, Diaph, X, Y, Width, Depth, Height):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIS8751987(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, Terrain, Class, K1, K3, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIS8752015(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, TerrainCategory, ImportanceFactor, K1, K3, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMexican(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2005(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2010(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2010_1(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2015(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, NBCCCase, e1, e2, UserZ, TopZ, BottomZ, q, GustFactor, TopographicFactor, ImportanceFactor, TerrainType, CeWindward, CeLeeward, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC95(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, q, GustFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNone(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNTC2008(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNTC2018(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, Vb, ExposureCategory, Ct, Cd, cp, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSP20133302016(self, Name, LoadingType, ExposureFrom, DirAngle, cp, UserZ, TopZ, BottomZ, StructureType, LogDecrement, BuildingWidth, BuildingDepth, Zeq, WindDistrict, WindPressure, TerrainType, LimitFreq, ModalCase, FirstValMode, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC94(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC97(self, Name, ExposureFrom, DirAngle, Cpw, Cpl, UserZ, TopZ, BottomZ, WindSpeed, ExposureType, ImportanceFactor, UserExposure):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUserLoad(self, Name, Diaph, FX, FY, MZ, X, Y):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAPI4F2013(self, Name):
#         '-no docstring-'
#         #return ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor, pRetVal
#
#     def SetAPI4F2013(self, Name, ExposureFrom, DirAngle, UserZ, TopZ, BottomZ, WindSpeed, SSLFactor, ShieldingFactor):
#         '-no docstring-'
#         #return pRetVal
#


class cDAlAA_ASD_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F488AB5B-58A7-4D1A-A080-218E03D54118}')
    _idlflags_ = ['dual', 'oleautomation']


cDAlAA_ASD_2000._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDAlAA_ASD_2000 implementation
# class cDAlAA_ASD_2000_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#


class cDConcShellEurocode_2_2004(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{73402158-6EA4-43F0-8FAD-1AC100462AC4}')
    _idlflags_ = ['dual', 'oleautomation']


cDesignConcreteShell._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'Eurocode_2_2004',
        (
            ['out', 'retval'],
            POINTER(POINTER(cDConcShellEurocode_2_2004)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetCode',
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetCode',
        (['in'], BSTR, 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDesignConcreteShell implementation
# class cDesignConcreteShell_Impl(object):
#     @property
#     def Eurocode_2_2004(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCode(self):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def SetCode(self, CodeName):
#         '-no docstring-'
#         #return pRetVal
#

cDCoIndian_IS_456_2000._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoIndian_IS_456_2000 implementation
# class cDCoIndian_IS_456_2000_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCombo._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ComboType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddDesignDefaultCombos',
        (['in'], VARIANT_BOOL, 'DesignSteel'),
        (['in'], VARIANT_BOOL, 'DesignConcrete'),
        (['in'], VARIANT_BOOL, 'DesignAluminum'),
        (['in'], VARIANT_BOOL, 'DesignColdFormed'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'DeleteCase',
        (['in'], BSTR, 'Name'),
        (['in'], eCNameType, 'CNameType'),
        (['in'], BSTR, 'CName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetCaseList',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(eCNameType)), 'CNameType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetCaseList',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eCNameType), 'CNameType'),
        (['in'], BSTR, 'CName'),
        (['in'], c_double, 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ComboType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetCaseList_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(eCNameType)), 'CNameType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ModeNumber'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetCaseList_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eCNameType), 'CNameType'),
        (['in'], BSTR, 'CName'),
        (['in'], c_int, 'ModeNumber'),
        (['in'], c_double, 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'CountCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetDesignType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ComboDesignType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetNote',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Note'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetNote',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Note'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetType',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ComboType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ComboType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCombo implementation
# class cCombo_Impl(object):
#     def Add(self, Name, ComboType):
#         '-no docstring-'
#         #return pRetVal
#
#     def AddDesignDefaultCombos(self, DesignSteel, DesignConcrete, DesignAluminum, DesignColdFormed):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteCase(self, Name, CNameType, CName):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCaseList(self, Name):
#         '-no docstring-'
#         #return NumberItems, CNameType, CName, SF, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetCaseList(self, Name, CName, SF):
#         '-no docstring-'
#         #return CNameType, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return ComboType, pRetVal
#
#     def GetCaseList_1(self, Name):
#         '-no docstring-'
#         #return NumberItems, CNameType, CName, ModeNumber, SF, pRetVal
#
#     def SetCaseList_1(self, Name, CName, ModeNumber, SF):
#         '-no docstring-'
#         #return CNameType, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountCase(self, Name):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def GetDesignType(self, Name):
#         '-no docstring-'
#         #return ComboDesignType, pRetVal
#
#     def GetNote(self, Name):
#         '-no docstring-'
#         #return Note, pRetVal
#
#     def SetNote(self, Name, Note):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetType(self, Name, ComboType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTypeOAPI(self, Name, ComboType):
#         '-no docstring-'
#         #return pRetVal
#


class cSchedulerCallBack(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{35AB4262-DEF5-41DD-9D7F-950590B9AF45}')
    _idlflags_ = ['dual', 'oleautomation']


cSchedulerCallBack._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'SapModel',
        (['out', 'retval'], POINTER(POINTER(cSapModel)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetSchedulerSettings',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'TimeUnits'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'values'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetSchedulerSettings',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'TimeUnits'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'values'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cSchedulerCallBack implementation
# class cSchedulerCallBack_Impl(object):
#     @property
#     def SapModel(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSchedulerSettings(self, Name):
#         '-no docstring-'
#         #return TimeUnits, NumberItems, values, pRetVal
#
#     def SetSchedulerSettings(self, Name, TimeUnits, NumberItems):
#         '-no docstring-'
#         #return values, pRetVal
#


class cDStCanadian_S16_09(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{0C01FA5E-C7AD-4E73-8D83-18293AAB302C}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStAISC360_16(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E8CB5366-DE08-4F6A-9184-CF07659D40DC}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStAISC_LRFD93(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5EB0087D-2654-4031-8059-D3DA8734BE8E}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStBS5950_2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{22BFC0B3-FEA3-402C-BC2E-CEF859096CDD}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStChinese_2010(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{034292A6-3E9C-4BC8-8788-715685F867CD}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStIndian_IS_800_2007(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{BAC65A22-5BC8-405F-93DB-61FCD054A67A}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStNewZealand_NZS3404_97(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5728F112-568F-4588-90F4-4ADE9CC5AB9A}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStAPI_RP2A_WSD2000(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{5540073C-7984-46F5-BF8B-9030B734894B}')
    _idlflags_ = ['dual', 'oleautomation']


class cDStAPI_RP2A_WSD2014(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{15A2D3DC-A6B6-4109-8881-D0B55273D2F8}')
    _idlflags_ = ['dual', 'oleautomation']


cDesignSteel._methods_ = [
    COMMETHOD(
        [dispid(5), 'propget'],
        HRESULT,
        'AISC360_05_IBC2006',
        (['out', 'retval'], POINTER(POINTER(cDStAISC360_05_IBC2006)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13), 'propget'],
        HRESULT,
        'Canadian_S16_09',
        (['out', 'retval'], POINTER(POINTER(cDStCanadian_S16_09)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'DeleteResults',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19), 'propget'],
        HRESULT,
        'Eurocode_3_2005',
        (['out', 'retval'], POINTER(POINTER(cDStEurocode_3_2005)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetCode',
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetComboDeflection',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetComboStrength',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetGroup',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'GetResultsAvailable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetSummaryResults',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetTargetDispl',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetTargetPeriod',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'ResetOverwrites',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetAutoSelectNull',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetCode',
        (['in'], BSTR, 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetComboDeflection',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetComboStrength',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], VARIANT_BOOL, 'LastAnalysis'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetGroup',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetTargetDispl',
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Displ'),
        (['in', 'optional'], VARIANT_BOOL, 'Active', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetTargetPeriod',
        (['in'], c_int, 'NumberItems'),
        (['in'], BSTR, 'ModalCase'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Mode'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'optional'], VARIANT_BOOL, 'Active', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'StartDesign',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'VerifyPassed',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(c_int), 'N1'),
        (['in', 'out'], POINTER(c_int), 'N2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'VerifySections',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68), 'propget'],
        HRESULT,
        'SP16_13330_2011',
        (['out', 'retval'], POINTER(POINTER(cDStSP16_13330_2011)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AISC_ASD89',
        (['out', 'retval'], POINTER(POINTER(cDStAISC_ASD89)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'GetComboAutoGenerate',
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'GetDetailResultsText',
        (['in'], BSTR, 'Name'),
        (['in'], eItemType, 'ItemType'),
        (['in'], c_int, 'Table'),
        (['in'], BSTR, 'Field'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Text'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'GetDetailResultsValue',
        (['in'], BSTR, 'Name'),
        (['in'], eItemType, 'ItemType'),
        (['in'], c_int, 'Table'),
        (['in'], BSTR, 'Field'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48), 'propget'],
        HRESULT,
        'AISC360_10',
        (['out', 'retval'], POINTER(POINTER(cDStAISC360_10)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'SetComboAutoGenerate',
        (['in'], VARIANT_BOOL, 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67), 'propget'],
        HRESULT,
        'AISC360_16',
        (['out', 'retval'], POINTER(POINTER(cDStAISC360_16)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3), 'propget'],
        HRESULT,
        'AISC_LRFD93',
        (['out', 'retval'], POINTER(POINTER(cDStAISC_LRFD93)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9), 'propget'],
        HRESULT,
        'Australian_AS4100_98',
        (
            ['out', 'retval'],
            POINTER(POINTER(cDStAustralian_AS4100_98)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(10), 'propget'],
        HRESULT,
        'BS5950_2000',
        (['out', 'retval'], POINTER(POINTER(cDStBS5950_2000)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15), 'propget'],
        HRESULT,
        'Chinese_2010',
        (['out', 'retval'], POINTER(POINTER(cDStChinese_2010)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(70), 'propget'],
        HRESULT,
        'Chinese_2018',
        (['out', 'retval'], POINTER(POINTER(cDStChinese_2018)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29), 'propget'],
        HRESULT,
        'Indian_IS_800_2007',
        (['out', 'retval'], POINTER(POINTER(cDStIndian_IS_800_2007)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31), 'propget'],
        HRESULT,
        'NewZealand_NZS3404_97',
        (
            ['out', 'retval'],
            POINTER(POINTER(cDStNewZealand_NZS3404_97)),
            'pRetVal',
        )
    ),
    COMMETHOD(
        [dispid(60), 'propget'],
        HRESULT,
        'Italian_NTC_2008',
        (['out', 'retval'], POINTER(POINTER(cDStItalianNTC2008S)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69), 'propget'],
        HRESULT,
        'Italian_NTC_2018',
        (['out', 'retval'], POINTER(POINTER(cDStItalianNTC2018S)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6), 'propget'],
        HRESULT,
        'API_RP2A_LRFD97',
        (['out', 'retval'], POINTER(POINTER(cDStAPI_RP2A_LRFD97)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7), 'propget'],
        HRESULT,
        'API_RP2A_WSD2000',
        (['out', 'retval'], POINTER(POINTER(cDStAPI_RP2A_WSD2000)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66), 'propget'],
        HRESULT,
        'API_RP2A_WSD2014',
        (['out', 'retval'], POINTER(POINTER(cDStAPI_RP2A_WSD2014)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8), 'propget'],
        HRESULT,
        'ASCE_10_97',
        (['out', 'retval'], POINTER(POINTER(cDStASCE_10_97)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14), 'propget'],
        HRESULT,
        'Chinese_2002',
        (['out', 'retval'], POINTER(POINTER(cDStChinese_2002)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(62), 'propget'],
        HRESULT,
        'Norsok_N0042013',
        (['out', 'retval'], POINTER(POINTER(cDStNorsok_N0042013)), 'pRetVal')
    ),
]

################################################################
# code template for cDesignSteel implementation
# class cDesignSteel_Impl(object):
#     @property
#     def AISC360_05_IBC2006(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Canadian_S16_09(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Eurocode_3_2005(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCode(self):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def GetComboDeflection(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetComboStrength(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetDesignSection(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetGroup(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetResultsAvailable(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSummaryResults(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
#
#     def GetTargetDispl(self):
#         '-no docstring-'
#         #return NumberItems, LoadCase, Point, Displ, Active, pRetVal
#
#     def GetTargetPeriod(self):
#         '-no docstring-'
#         #return NumberItems, ModalCase, Mode, Period, Active, pRetVal
#
#     def ResetOverwrites(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAutoSelectNull(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCode(self, CodeName):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboDeflection(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboStrength(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroup(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTargetDispl(self, NumberItems, Active):
#         '-no docstring-'
#         #return LoadCase, Point, Displ, pRetVal
#
#     def SetTargetPeriod(self, NumberItems, ModalCase, Active):
#         '-no docstring-'
#         #return Mode, Period, pRetVal
#
#     def StartDesign(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def VerifyPassed(self):
#         '-no docstring-'
#         #return NumberItems, N1, N2, MyName, pRetVal
#
#     def VerifySections(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     @property
#     def SP16_13330_2011(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AISC_ASD89(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetComboAutoGenerate(self):
#         '-no docstring-'
#         #return AutoGenerate, pRetVal
#
#     def GetDetailResultsText(self, Name, ItemType, Table, Field):
#         '-no docstring-'
#         #return NumberItems, FrameName, Text, pRetVal
#
#     def GetDetailResultsValue(self, Name, ItemType, Table, Field):
#         '-no docstring-'
#         #return NumberItems, FrameName, Value, pRetVal
#
#     @property
#     def AISC360_10(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboAutoGenerate(self, AutoGenerate):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AISC360_16(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AISC_LRFD93(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Australian_AS4100_98(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def BS5950_2000(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Chinese_2010(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Chinese_2018(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Indian_IS_800_2007(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def NewZealand_NZS3404_97(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Italian_NTC_2008(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Italian_NTC_2018(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def API_RP2A_LRFD97(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def API_RP2A_WSD2000(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def API_RP2A_WSD2014(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def ASCE_10_97(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Chinese_2002(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Norsok_N0042013(self):
#         '-no docstring-'
#         #return pRetVal
#

cDCoChinese_2002._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoChinese_2002 implementation
# class cDCoChinese_2002_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cSelect._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'All',
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ClearSelection',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetSelected',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Group',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'InvertSelection',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'PreviousSelection',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Constraint',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'CoordinateRange',
        (['in'], c_double, 'XMin'),
        (['in'], c_double, 'XMax'),
        (['in'], c_double, 'YMin'),
        (['in'], c_double, 'YMax'),
        (['in'], c_double, 'ZMin'),
        (['in'], c_double, 'ZMax'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], VARIANT_BOOL, 'IncludeIntersections', False),
        (['in', 'optional'], VARIANT_BOOL, 'Point', True),
        (['in', 'optional'], VARIANT_BOOL, 'Line', True),
        (['in', 'optional'], VARIANT_BOOL, 'Area', True),
        (['in', 'optional'], VARIANT_BOOL, 'Solid', True),
        (['in', 'optional'], VARIANT_BOOL, 'Link', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'LinesParallelToCoordAxis',
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'ParallelTo'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], c_double, 'Tolerance', 0.057),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'LinesParallelToLine',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'PlaneXY',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'PlaneXZ',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'PlaneYZ',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'PropertyArea',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'PropertyFrame',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'PropertyLink',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'PropertyMaterial',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'PropertyTendon',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SupportedPoints',
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['in', 'optional'], VARIANT_BOOL, 'SelectRestraints', True),
        (['in', 'optional'], VARIANT_BOOL, 'SelectJointSprings', True),
        (['in', 'optional'], VARIANT_BOOL, 'SelectLineSprings', True),
        (['in', 'optional'], VARIANT_BOOL, 'SelectAreaSprings', True),
        (['in', 'optional'], VARIANT_BOOL, 'SelectSolidSprings', True),
        (['in', 'optional'], VARIANT_BOOL, 'SelectOneJointLinks', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'PropertyCable',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'PropertyLinkFD',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'PropertySolid',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Deselect', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cSelect implementation
# class cSelect_Impl(object):
#     def All(self, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def ClearSelection(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSelected(self):
#         '-no docstring-'
#         #return NumberItems, ObjectType, ObjectName, pRetVal
#
#     def Group(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def InvertSelection(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def PreviousSelection(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Constraint(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def CoordinateRange(self, XMin, XMax, YMin, YMax, ZMin, ZMax, Deselect, CSys, IncludeIntersections, Point, Line, Area, Solid, Link):
#         '-no docstring-'
#         #return pRetVal
#
#     def LinesParallelToCoordAxis(self, CSys, Tolerance, Deselect):
#         '-no docstring-'
#         #return ParallelTo, pRetVal
#
#     def LinesParallelToLine(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PlaneXY(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PlaneXZ(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PlaneYZ(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertyArea(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertyFrame(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertyLink(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertyMaterial(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertyTendon(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def SupportedPoints(self, CSys, Deselect, SelectRestraints, SelectJointSprings, SelectLineSprings, SelectAreaSprings, SelectSolidSprings, SelectOneJointLinks):
#         '-no docstring-'
#         #return DOF, pRetVal
#
#     def PropertyCable(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertyLinkFD(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#
#     def PropertySolid(self, Name, Deselect):
#         '-no docstring-'
#         #return pRetVal
#

cAreaElm._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetLoadUniform',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetObj',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Obj'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetOffsets',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'OffsetType'),
        (['in', 'out'], POINTER(BSTR), 'OffsetPattern'),
        (['in', 'out'], POINTER(c_double), 'OffsetPatternSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetThickness',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ThicknessType'),
        (['in', 'out'], POINTER(BSTR), 'ThicknessPattern'),
        (['in', 'out'], POINTER(c_double), 'ThicknessPatternSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Thickness'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAreaElm implementation
# class cAreaElm_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadTemperature(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, MyType, Value, PatternName, pRetVal
#
#     def GetLoadUniform(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, CSys, Dir, Value, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, pRetVal
#
#     def GetMaterialOverwrite(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetObj(self, Name):
#         '-no docstring-'
#         #return Obj, pRetVal
#
#     def GetOffsets(self, Name):
#         '-no docstring-'
#         #return OffsetType, OffsetPattern, OffsetPatternSF, Offset, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return NumberPoints, Point, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetThickness(self, Name):
#         '-no docstring-'
#         #return ThicknessType, ThicknessPattern, ThicknessPatternSF, Thickness, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetLoadGravity(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadPorePressure(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLoadStrain(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Component, Value, PatternName, pRetVal
#
#     def GetLoadSurfacePressure(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, AreaName, LoadPat, Face, Value, PatternName, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#

cAnalyze._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'CreateAnalysisModel',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'DeleteResults',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'All', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetActiveDOF',
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetCaseStatus',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CaseName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Status'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetRunCaseFlag',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CaseName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Run'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetSolverOption',
        (['in', 'out'], POINTER(c_int), 'SolverType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Force32BitSolver'),
        (['in', 'out'], POINTER(BSTR), 'StiffCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetSolverOption_1',
        (['in', 'out'], POINTER(c_int), 'SolverType'),
        (['in', 'out'], POINTER(c_int), 'SolverProcessType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Force32BitSolver'),
        (['in', 'out'], POINTER(BSTR), 'StiffCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'ModifyUndeformedGeometry',
        (['in'], BSTR, 'CaseName'),
        (['in'], c_double, 'SF'),
        (['in', 'optional'], c_int, 'Stage', -1),
        (['in', 'optional'], VARIANT_BOOL, 'Original', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'RunAnalysis',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetActiveDOF',
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetRunCaseFlag',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Run'),
        (['in', 'optional'], VARIANT_BOOL, 'All', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetSolverOption',
        (['in'], c_int, 'SolverType'),
        (['in'], VARIANT_BOOL, 'Force32BitSolver'),
        (['in', 'optional'], BSTR, 'StiffCase', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetSolverOption_1',
        (['in'], c_int, 'SolverType'),
        (['in'], c_int, 'SolverProcessType'),
        (['in'], VARIANT_BOOL, 'Force32BitSolver'),
        (['in', 'optional'], BSTR, 'StiffCase', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'ModifyUndeformedGeometryModeShape',
        (['in'], BSTR, 'CaseName'),
        (['in'], c_int, 'Mode'),
        (['in'], c_double, 'MaxDispl'),
        (['in'], c_int, 'Direction'),
        (['in', 'optional'], VARIANT_BOOL, 'Original', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetSolverOption_2',
        (['in', 'out'], POINTER(c_int), 'SolverType'),
        (['in', 'out'], POINTER(c_int), 'SolverProcessType'),
        (['in', 'out'], POINTER(c_int), 'NumberParallelRuns'),
        (['in', 'out'], POINTER(BSTR), 'StiffCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetSolverOption_2',
        (['in'], c_int, 'SolverType'),
        (['in'], c_int, 'SolverProcessType'),
        (['in'], c_int, 'NumberParallelRuns'),
        (['in', 'optional'], BSTR, 'StiffCase', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'MergeAnalysisResults',
        (['in'], BSTR, 'SourceFileName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetSolverOption_3',
        (['in', 'out'], POINTER(c_int), 'SolverType'),
        (['in', 'out'], POINTER(c_int), 'SolverProcessType'),
        (['in', 'out'], POINTER(c_int), 'NumberParallelRuns'),
        (['in', 'out'], POINTER(c_int), 'ResponseFileSizeMaxMB'),
        (['in', 'out'], POINTER(c_int), 'NumberAnalysisThreads'),
        (['in', 'out'], POINTER(BSTR), 'StiffCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetSolverOption_3',
        (['in'], c_int, 'SolverType'),
        (['in'], c_int, 'SolverProcessType'),
        (['in'], c_int, 'NumberParallelRuns'),
        (['in'], c_int, 'ResponseFileSizeMaxMB'),
        (['in'], c_int, 'NumberAnalysisThreads'),
        (['in', 'optional'], BSTR, 'StiffCase', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetDesignResponseOption',
        (['in', 'out'], POINTER(c_int), 'NumberDesignThreads'),
        (['in', 'out'], POINTER(c_int), 'NumberResponseRecoveryThreads'),
        (
            ['in', 'out'],
            POINTER(c_int),
            'UseMemoryMappedFilesForResponseRecovery',
        ),
        (
            ['in', 'out'],
            POINTER(VARIANT_BOOL),
            'ModelDifferencesOKWhenMergingResults',
        ),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetDesignResponseOption',
        (['in'], c_int, 'NumberDesignThreads'),
        (['in'], c_int, 'NumberResponseRecoveryThreads'),
        (['in'], c_int, 'UseMemoryMappedFilesForResponseRecovery'),
        (['in'], VARIANT_BOOL, 'ModelDifferencesOKWhenMergingResults'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAnalyze implementation
# class cAnalyze_Impl(object):
#     def CreateAnalysisModel(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteResults(self, Name, All):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetActiveDOF(self):
#         '-no docstring-'
#         #return DOF, pRetVal
#
#     def GetCaseStatus(self):
#         '-no docstring-'
#         #return NumberItems, CaseName, Status, pRetVal
#
#     def GetRunCaseFlag(self):
#         '-no docstring-'
#         #return NumberItems, CaseName, Run, pRetVal
#
#     def GetSolverOption(self):
#         '-no docstring-'
#         #return SolverType, Force32BitSolver, StiffCase, pRetVal
#
#     def GetSolverOption_1(self):
#         '-no docstring-'
#         #return SolverType, SolverProcessType, Force32BitSolver, StiffCase, pRetVal
#
#     def ModifyUndeformedGeometry(self, CaseName, SF, Stage, Original):
#         '-no docstring-'
#         #return pRetVal
#
#     def RunAnalysis(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetActiveDOF(self):
#         '-no docstring-'
#         #return DOF, pRetVal
#
#     def SetRunCaseFlag(self, Name, Run, All):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSolverOption(self, SolverType, Force32BitSolver, StiffCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSolverOption_1(self, SolverType, SolverProcessType, Force32BitSolver, StiffCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def ModifyUndeformedGeometryModeShape(self, CaseName, Mode, MaxDispl, Direction, Original):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSolverOption_2(self):
#         '-no docstring-'
#         #return SolverType, SolverProcessType, NumberParallelRuns, StiffCase, pRetVal
#
#     def SetSolverOption_2(self, SolverType, SolverProcessType, NumberParallelRuns, StiffCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def MergeAnalysisResults(self, SourceFileName):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSolverOption_3(self):
#         '-no docstring-'
#         #return SolverType, SolverProcessType, NumberParallelRuns, ResponseFileSizeMaxMB, NumberAnalysisThreads, StiffCase, pRetVal
#
#     def SetSolverOption_3(self, SolverType, SolverProcessType, NumberParallelRuns, ResponseFileSizeMaxMB, NumberAnalysisThreads, StiffCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDesignResponseOption(self):
#         '-no docstring-'
#         #return NumberDesignThreads, NumberResponseRecoveryThreads, UseMemoryMappedFilesForResponseRecovery, ModelDifferencesOKWhenMergingResults, pRetVal
#
#     def SetDesignResponseOption(self, NumberDesignThreads, NumberResponseRecoveryThreads, UseMemoryMappedFilesForResponseRecovery, ModelDifferencesOKWhenMergingResults):
#         '-no docstring-'
#         #return pRetVal
#

cDStAPI_RP2A_WSD2000._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAPI_RP2A_WSD2000 implementation
# class cDStAPI_RP2A_WSD2000_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class Helper(CoClass):
    _reg_clsid_ = GUID('{1B00660D-7299-4CAB-9262-7F1B752BA2BA}')
    _idlflags_ = []
    _typelib_path_ = typelib_path
    _reg_typelib_ = ('{AADDD124-B054-4C6E-A088-711A06245B57}', 1, 0)


class cHelper(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{74928C77-7588-44D4-8783-F3E1975FD49D}')
    _idlflags_ = ['dual', 'oleautomation']


Helper._com_interfaces_ = [cHelper, comtypes.gen._BED7F4EA_1A96_11D2_8F08_00A0C9A6186D_0_2_4._Object]

cSolidObj._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddByCoord',
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'AddByPoint',
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['in', 'optional'], BSTR, 'PropName', 'Default'),
        (['in', 'optional'], BSTR, 'UserName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DeleteLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'DeleteLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'DeleteLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'Component'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'DeleteLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'DeleteLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'DeleteSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetAutoMesh',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MeshType'),
        (['in', 'out'], POINTER(c_int), 'N1'),
        (['in', 'out'], POINTER(c_int), 'N2'),
        (['in', 'out'], POINTER(c_int), 'N3'),
        (['in', 'out'], POINTER(c_double), 'MaxSize1'),
        (['in', 'out'], POINTER(c_double), 'MaxSize2'),
        (['in', 'out'], POINTER(c_double), 'MaxSize3'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnEdge'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'RestraintsOnFace'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetEdgeConstraint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ConstraintExists'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetElm',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NElm'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Elm'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'GetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberGroups'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Groups'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Component'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Advanced'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['in', 'out'], POINTER(c_int), 'AxVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in', 'out'], POINTER(c_int), 'Plane2'),
        (['in', 'out'], POINTER(c_int), 'PlVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetSelected',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'GetSpring',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberSprings'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SimpleSpringType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LinkProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Face'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'SpringLocalOneType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Outward'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecX'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecY'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'VecZ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'IsGlobal', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetAutoMesh',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MeshType'),
        (['in', 'optional'], c_int, 'N1', 2),
        (['in', 'optional'], c_int, 'N2', 2),
        (['in', 'optional'], c_int, 'N3', 2),
        (['in', 'optional'], c_double, 'MaxSize1', 0.0),
        (['in', 'optional'], c_double, 'MaxSize2', 0.0),
        (['in', 'optional'], c_double, 'MaxSize3', 0.0),
        (['in', 'optional'], VARIANT_BOOL, 'RestraintsOnEdge', False),
        (['in', 'optional'], VARIANT_BOOL, 'RestraintsOnFace', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetEdgeConstraint',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'ConstraintExists'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetGroupAssign',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetGUID',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetLoadPorePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'Component'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetLoadSurfacePressure',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_int, 'Face'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'LoadPat'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], VARIANT_BOOL, 'Replace', True),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'A'),
        (['in'], c_double, 'B'),
        (['in'], c_double, 'C'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetLocalAxesAdvanced',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Active'),
        (['in'], c_int, 'AxVectOpt'),
        (['in'], BSTR, 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in'], c_int, 'Plane2'),
        (['in'], c_int, 'PlVectOpt'),
        (['in'], BSTR, 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Temp'),
        (['in', 'optional'], BSTR, 'PatternName', ''),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetProperty',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetSelected',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetSpring',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'S'),
        (['in'], c_int, 'SimpleSpringType'),
        (['in'], BSTR, 'LinkProp'),
        (['in'], c_int, 'Face'),
        (['in'], c_int, 'SpringLocalOneType'),
        (['in'], c_int, 'Dir'),
        (['in'], VARIANT_BOOL, 'Outward'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Vec'),
        (['in'], c_double, 'Ang'),
        (['in'], VARIANT_BOOL, 'Replace'),
        (['in', 'optional'], BSTR, 'CSys', 'Local'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cSolidObj implementation
# class cSolidObj_Impl(object):
#     def AddByCoord(self, PropName, UserName, CSys):
#         '-no docstring-'
#         #return X, Y, Z, Name, pRetVal
#
#     def AddByPoint(self, PropName, UserName):
#         '-no docstring-'
#         #return Point, Name, pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadGravity(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadPorePressure(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadStrain(self, Name, LoadPat, Component, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadSurfacePressure(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteLoadTemperature(self, Name, LoadPat, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteSpring(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAutoMesh(self, Name):
#         '-no docstring-'
#         #return MeshType, N1, N2, N3, MaxSize1, MaxSize2, MaxSize3, RestraintsOnEdge, RestraintsOnFace, pRetVal
#
#     def GetEdgeConstraint(self, Name):
#         '-no docstring-'
#         #return ConstraintExists, pRetVal
#
#     def GetElm(self, Name):
#         '-no docstring-'
#         #return NElm, Elm, pRetVal
#
#     def GetGroupAssign(self, Name):
#         '-no docstring-'
#         #return NumberGroups, Groups, pRetVal
#
#     def GetGUID(self, Name):
#         '-no docstring-'
#         #return GUID, pRetVal
#
#     def GetLoadGravity(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadPorePressure(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLoadStrain(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Component, Value, PatternName, pRetVal
#
#     def GetLoadSurfacePressure(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Face, Value, PatternName, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, SolidName, LoadPat, Value, PatternName, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return A, B, C, Advanced, pRetVal
#
#     def GetLocalAxesAdvanced(self, Name):
#         '-no docstring-'
#         #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetSelected(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetSpring(self, Name):
#         '-no docstring-'
#         #return NumberSprings, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, VecX, VecY, VecZ, CSys, Ang, pRetVal
#
#     def GetTransformationMatrix(self, Name, IsGlobal):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetAutoMesh(self, Name, MeshType, N1, N2, N3, MaxSize1, MaxSize2, MaxSize3, RestraintsOnEdge, RestraintsOnFace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEdgeConstraint(self, Name, ConstraintExists, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroupAssign(self, Name, GroupName, Remove, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGUID(self, Name, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadGravity(self, Name, LoadPat, X, Y, Z, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadPorePressure(self, Name, LoadPat, Value, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadStrain(self, Name, LoadPat, Component, Value, Replace, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadSurfacePressure(self, Name, LoadPat, Face, Value, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoadTemperature(self, Name, LoadPat, Value, PatternName, Replace, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxes(self, Name, A, B, C, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxesAdvanced(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys, ItemType):
#         '-no docstring-'
#         #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
#
#     def SetMatTemp(self, Name, Temp, PatternName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetProperty(self, Name, PropName, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSelected(self, Name, Selected, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSpring(self, Name, MyType, S, SimpleSpringType, LinkProp, Face, SpringLocalOneType, Dir, Outward, Ang, Replace, CSys, ItemType):
#         '-no docstring-'
#         #return Vec, pRetVal
#

cEditArea._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeConnectivity',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Point'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Divide',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MeshType'),
        (['in', 'out'], POINTER(c_int), 'NumberAreas'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'optional'], c_int, 'N1', 2),
        (['in', 'optional'], c_int, 'N2', 2),
        (['in', 'optional'], c_double, 'MaxSize1', 0.0),
        (['in', 'optional'], c_double, 'MaxSize2', 0.0),
        (['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromGrid', False),
        (['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromLine', False),
        (['in', 'optional'], VARIANT_BOOL, 'PointOnEdgeFromPoint', False),
        (['in', 'optional'], VARIANT_BOOL, 'ExtendCookieCutLines', False),
        (['in', 'optional'], c_double, 'Rotation', 0.0),
        (['in', 'optional'], c_double, 'MaxSizeGeneral', 0.0),
        (['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnEdge', False),
        (['in', 'optional'], VARIANT_BOOL, 'LocalAxesOnFace', False),
        (['in', 'optional'], VARIANT_BOOL, 'RestraintsOnEdge', False),
        (['in', 'optional'], VARIANT_BOOL, 'RestraintsOnFace', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ExpandShrink',
        (['in'], c_int, 'OffsetType'),
        (['in'], c_double, 'Offset'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Merge',
        (['in', 'out'], POINTER(c_int), 'NumberAreas'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'PointAdd',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'PointRemove',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cEditArea implementation
# class cEditArea_Impl(object):
#     def ChangeConnectivity(self, Name, NumberPoints):
#         '-no docstring-'
#         #return Point, pRetVal
#
#     def Divide(self, Name, MeshType, N1, N2, MaxSize1, MaxSize2, PointOnEdgeFromGrid, PointOnEdgeFromLine, PointOnEdgeFromPoint, ExtendCookieCutLines, Rotation, MaxSizeGeneral, LocalAxesOnEdge, LocalAxesOnFace, RestraintsOnEdge, RestraintsOnFace):
#         '-no docstring-'
#         #return NumberAreas, AreaName, pRetVal
#
#     def ExpandShrink(self, OffsetType, Offset):
#         '-no docstring-'
#         #return pRetVal
#
#     def Merge(self):
#         '-no docstring-'
#         #return NumberAreas, AreaName, pRetVal
#
#     def PointAdd(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def PointRemove(self):
#         '-no docstring-'
#         #return pRetVal
#

cPropFrame._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['in', 'optional'], eFramePropType, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetAngle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetAutoSelectSteel',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName'),
        (['in', 'out'], POINTER(BSTR), 'AutoStartSection'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetChannel',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetCircle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetCoverPlatedI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'SectName'),
        (['in', 'out'], POINTER(c_double), 'FyTopFlange'),
        (['in', 'out'], POINTER(c_double), 'FyWeb'),
        (['in', 'out'], POINTER(c_double), 'FyBotFlange'),
        (['in', 'out'], POINTER(c_double), 'Tc'),
        (['in', 'out'], POINTER(c_double), 'Bc'),
        (['in', 'out'], POINTER(BSTR), 'MatPropTop'),
        (['in', 'out'], POINTER(c_double), 'Tcb'),
        (['in', 'out'], POINTER(c_double), 'Bcb'),
        (['in', 'out'], POINTER(BSTR), 'MatPropBot'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetDblAngle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Dis'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetDblChannel',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'Dis'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetGeneral',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_double), 'As2'),
        (['in', 'out'], POINTER(c_double), 'As3'),
        (['in', 'out'], POINTER(c_double), 'Torsion'),
        (['in', 'out'], POINTER(c_double), 'I22'),
        (['in', 'out'], POINTER(c_double), 'I33'),
        (['in', 'out'], POINTER(c_double), 'S22'),
        (['in', 'out'], POINTER(c_double), 'S33'),
        (['in', 'out'], POINTER(c_double), 'Z22'),
        (['in', 'out'], POINTER(c_double), 'Z33'),
        (['in', 'out'], POINTER(c_double), 'R22'),
        (['in', 'out'], POINTER(c_double), 'R33'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetISection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'T2b'),
        (['in', 'out'], POINTER(c_double), 'Tfb'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetNameInPropFile',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'NameInFile'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(eFramePropType), 'PropType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'optional'], eFramePropType, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetNonPrismatic',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StartSec'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndSec'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyLength'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI33'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI22'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetPipe',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetPropFileNameList',
        (['in'], BSTR, 'FileName'),
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(eFramePropType)), 'MyPropType'),
        (['in', 'optional'], eFramePropType, 'PropType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetRebarBeam',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatPropLong'),
        (['in', 'out'], POINTER(BSTR), 'MatPropConfine'),
        (['in', 'out'], POINTER(c_double), 'CoverTop'),
        (['in', 'out'], POINTER(c_double), 'CoverBot'),
        (['in', 'out'], POINTER(c_double), 'TopLeftArea'),
        (['in', 'out'], POINTER(c_double), 'TopRightArea'),
        (['in', 'out'], POINTER(c_double), 'BotLeftArea'),
        (['in', 'out'], POINTER(c_double), 'BotRightArea'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetRebarColumn',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatPropLong'),
        (['in', 'out'], POINTER(BSTR), 'MatPropConfine'),
        (['in', 'out'], POINTER(c_int), 'Pattern'),
        (['in', 'out'], POINTER(c_int), 'ConfineType'),
        (['in', 'out'], POINTER(c_double), 'Cover'),
        (['in', 'out'], POINTER(c_int), 'NumberCBars'),
        (['in', 'out'], POINTER(c_int), 'NumberR3Bars'),
        (['in', 'out'], POINTER(c_int), 'NumberR2Bars'),
        (['in', 'out'], POINTER(BSTR), 'RebarSize'),
        (['in', 'out'], POINTER(BSTR), 'TieSize'),
        (['in', 'out'], POINTER(c_double), 'TieSpacingLongit'),
        (['in', 'out'], POINTER(c_int), 'Number2DirTieBars'),
        (['in', 'out'], POINTER(c_int), 'Number3DirTieBars'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ToBeDesigned'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetRectangle',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetSectProps',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_double), 'As2'),
        (['in', 'out'], POINTER(c_double), 'As3'),
        (['in', 'out'], POINTER(c_double), 'Torsion'),
        (['in', 'out'], POINTER(c_double), 'I22'),
        (['in', 'out'], POINTER(c_double), 'I33'),
        (['in', 'out'], POINTER(c_double), 'S22'),
        (['in', 'out'], POINTER(c_double), 'S33'),
        (['in', 'out'], POINTER(c_double), 'Z22'),
        (['in', 'out'], POINTER(c_double), 'Z33'),
        (['in', 'out'], POINTER(c_double), 'R22'),
        (['in', 'out'], POINTER(c_double), 'R33'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetTee',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetTube',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(eFramePropType), 'PropType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'GetTypeRebar',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'ImportProp',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], BSTR, 'FileName'),
        (['in'], BSTR, 'PropName'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29), 'propget'],
        HRESULT,
        'SDShape',
        (['out', 'retval'], POINTER(POINTER(cPropFrameSDShape)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetAngle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetAutoSelectSteel',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName'),
        (['in', 'optional'], BSTR, 'AutoStartSection', 'Median'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetChannel',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetCircle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetCoverPlatedI',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'SectName'),
        (['in'], c_double, 'FyTopFlange'),
        (['in'], c_double, 'FyWeb'),
        (['in'], c_double, 'FyBotFlange'),
        (['in'], c_double, 'Tc'),
        (['in'], c_double, 'Bc'),
        (['in'], BSTR, 'MatPropTop'),
        (['in'], c_double, 'Tcb'),
        (['in'], c_double, 'Bcb'),
        (['in'], BSTR, 'MatPropBot'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetDblAngle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in'], c_double, 'Dis'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetDblChannel',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in'], c_double, 'Dis'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetGeneral',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Area'),
        (['in'], c_double, 'As2'),
        (['in'], c_double, 'As3'),
        (['in'], c_double, 'Torsion'),
        (['in'], c_double, 'I22'),
        (['in'], c_double, 'I33'),
        (['in'], c_double, 'S22'),
        (['in'], c_double, 'S33'),
        (['in'], c_double, 'Z22'),
        (['in'], c_double, 'Z33'),
        (['in'], c_double, 'R22'),
        (['in'], c_double, 'R33'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetISection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in'], c_double, 'T2b'),
        (['in'], c_double, 'Tfb'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetNonPrismatic',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'StartSec'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'EndSec'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'MyLength'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI33'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'EI22'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetPipe',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'Tw'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetRebarBeam',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatPropLong'),
        (['in'], BSTR, 'MatPropConfine'),
        (['in'], c_double, 'CoverTop'),
        (['in'], c_double, 'CoverBot'),
        (['in'], c_double, 'TopLeftArea'),
        (['in'], c_double, 'TopRightArea'),
        (['in'], c_double, 'BotLeftArea'),
        (['in'], c_double, 'BotRightArea'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetRebarColumn',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatPropLong'),
        (['in'], BSTR, 'MatPropConfine'),
        (['in'], c_int, 'Pattern'),
        (['in'], c_int, 'ConfineType'),
        (['in'], c_double, 'Cover'),
        (['in'], c_int, 'NumberCBars'),
        (['in'], c_int, 'NumberR3Bars'),
        (['in'], c_int, 'NumberR2Bars'),
        (['in'], BSTR, 'RebarSize'),
        (['in'], BSTR, 'TieSize'),
        (['in'], c_double, 'TieSpacingLongit'),
        (['in'], c_int, 'Number2DirTieBars'),
        (['in'], c_int, 'Number3DirTieBars'),
        (['in'], VARIANT_BOOL, 'ToBeDesigned'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetRectangle',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetTee',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetTube',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetSDSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ShapeName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(c_int), 'DesignType'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetSDSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in', 'optional'], c_int, 'DesignType', 0),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(88)],
        HRESULT,
        'GetMaterial',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(89)],
        HRESULT,
        'SetMaterial',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(73)],
        HRESULT,
        'GetTrapezoidal',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'T2b'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(74)],
        HRESULT,
        'SetTrapezoidal',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'T2b'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'GetAutoSelectAluminum',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName'),
        (['in', 'out'], POINTER(BSTR), 'AutoStartSection'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'GetAutoSelectColdFormed',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName'),
        (['in', 'out'], POINTER(BSTR), 'AutoStartSection'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'GetColdC',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_double), 'LipDepth'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'GetColdHat',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_double), 'LipDepth'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'GetColdZ',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_double), 'LipDepth'),
        (['in', 'out'], POINTER(c_double), 'LipAngle'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'GetGeneral_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_double), 'As2'),
        (['in', 'out'], POINTER(c_double), 'As3'),
        (['in', 'out'], POINTER(c_double), 'Torsion'),
        (['in', 'out'], POINTER(c_double), 'I22'),
        (['in', 'out'], POINTER(c_double), 'I33'),
        (['in', 'out'], POINTER(c_double), 'I23'),
        (['in', 'out'], POINTER(c_double), 'S22'),
        (['in', 'out'], POINTER(c_double), 'S33'),
        (['in', 'out'], POINTER(c_double), 'Z22'),
        (['in', 'out'], POINTER(c_double), 'Z33'),
        (['in', 'out'], POINTER(c_double), 'R22'),
        (['in', 'out'], POINTER(c_double), 'R33'),
        (['in', 'out'], POINTER(c_double), 'EccV2'),
        (['in', 'out'], POINTER(c_double), 'EccV3'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'GetHybridISection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatPropTopFlange'),
        (['in', 'out'], POINTER(BSTR), 'MatPropWeb'),
        (['in', 'out'], POINTER(BSTR), 'MatPropBotFlange'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Tf'),
        (['in', 'out'], POINTER(c_double), 'Tw'),
        (['in', 'out'], POINTER(c_double), 'T2b'),
        (['in', 'out'], POINTER(c_double), 'Tfb'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'GetHybridUSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'WebMaterial'),
        (['in', 'out'], POINTER(BSTR), 'TopFlangeMaterial'),
        (['in', 'out'], POINTER(BSTR), 'BotFlangeMaterial'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'GetNotionalSize',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'stype'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'GetPrecastI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(71)],
        HRESULT,
        'GetPrecastI_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(58)],
        HRESULT,
        'GetPrecastU',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(59)],
        HRESULT,
        'GetSectProps_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_double), 'As2'),
        (['in', 'out'], POINTER(c_double), 'As3'),
        (['in', 'out'], POINTER(c_double), 'Torsion'),
        (['in', 'out'], POINTER(c_double), 'I22'),
        (['in', 'out'], POINTER(c_double), 'I33'),
        (['in', 'out'], POINTER(c_double), 'I23'),
        (['in', 'out'], POINTER(c_double), 'S22'),
        (['in', 'out'], POINTER(c_double), 'S33'),
        (['in', 'out'], POINTER(c_double), 'Z22'),
        (['in', 'out'], POINTER(c_double), 'Z33'),
        (['in', 'out'], POINTER(c_double), 'R22'),
        (['in', 'out'], POINTER(c_double), 'R33'),
        (['in', 'out'], POINTER(c_double), 'EccV2'),
        (['in', 'out'], POINTER(c_double), 'EccV3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(60)],
        HRESULT,
        'SetAutoSelectAluminum',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName'),
        (['in', 'optional'], BSTR, 'AutoStartSection', 'Median'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(61)],
        HRESULT,
        'SetAutoSelectColdFormed',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SectName'),
        (['in', 'optional'], BSTR, 'AutoStartSection', 'Median'),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(62)],
        HRESULT,
        'SetColdC',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in'], c_double, 'LipDepth'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'SetColdHat',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in'], c_double, 'LipDepth'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'SetColdZ',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in'], c_double, 'LipDepth'),
        (['in'], c_double, 'LipAngle'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'SetGeneral_1',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Area'),
        (['in'], c_double, 'As2'),
        (['in'], c_double, 'As3'),
        (['in'], c_double, 'Torsion'),
        (['in'], c_double, 'I22'),
        (['in'], c_double, 'I33'),
        (['in'], c_double, 'I23'),
        (['in'], c_double, 'S22'),
        (['in'], c_double, 'S33'),
        (['in'], c_double, 'Z22'),
        (['in'], c_double, 'Z33'),
        (['in'], c_double, 'R22'),
        (['in'], c_double, 'R33'),
        (['in'], c_double, 'EccV2'),
        (['in'], c_double, 'EccV3'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66)],
        HRESULT,
        'SetHybridISection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatPropTopFlange'),
        (['in'], BSTR, 'MatPropWeb'),
        (['in'], BSTR, 'MatPropBotFlange'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Tf'),
        (['in'], c_double, 'Tw'),
        (['in'], c_double, 'T2b'),
        (['in'], c_double, 'Tfb'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67)],
        HRESULT,
        'SetHybridUSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'WebMaterial'),
        (['in'], BSTR, 'TopFlangeMaterial'),
        (['in'], BSTR, 'BotFlangeMaterial'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68)],
        HRESULT,
        'SetNotionalSize',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'stype'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69)],
        HRESULT,
        'SetPrecastI',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(72)],
        HRESULT,
        'SetPrecastI_1',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(70)],
        HRESULT,
        'SetPrecastU',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(92)],
        HRESULT,
        'GetColdL',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_double), 'LipDepth'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(93)],
        HRESULT,
        'GetColdI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'T2b'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(94)],
        HRESULT,
        'GetColdT',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(95)],
        HRESULT,
        'GetColdBox',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'T2'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_double), 'Radius'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(96)],
        HRESULT,
        'GetColdPipe',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'T3'),
        (['in', 'out'], POINTER(c_double), 'Thickness'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(97)],
        HRESULT,
        'SetColdL',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in'], c_double, 'LipDepth'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(98)],
        HRESULT,
        'SetColdI',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'T2b'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(99)],
        HRESULT,
        'SetColdT',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(100)],
        HRESULT,
        'SetColdBox',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'T2'),
        (['in'], c_double, 'Thickness'),
        (['in'], c_double, 'Radius'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(101)],
        HRESULT,
        'SetColdPipe',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'T3'),
        (['in'], c_double, 'Thickness'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(102)],
        HRESULT,
        'GetPrecastSuperT',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in', 'out'], POINTER(c_int), 'CornerType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'MaxBrBl'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ClosedFlange'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(103)],
        HRESULT,
        'SetPrecastSuperT',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'B'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'D'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'C'),
        (['in'], c_int, 'CornerType'),
        (['in'], VARIANT_BOOL, 'MaxBrBl'),
        (['in'], VARIANT_BOOL, 'ClosedFlange'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropFrame implementation
# class cPropFrame_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self, PropType):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAngle(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
#
#     def GetAutoSelectSteel(self, Name):
#         '-no docstring-'
#         #return NumberItems, SectName, AutoStartSection, Notes, GUID, pRetVal
#
#     def GetChannel(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
#
#     def GetCircle(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, Color, Notes, GUID, pRetVal
#
#     def GetCoverPlatedI(self, Name):
#         '-no docstring-'
#         #return SectName, FyTopFlange, FyWeb, FyBotFlange, Tc, Bc, MatPropTop, Tcb, Bcb, MatPropBot, Color, Notes, GUID, pRetVal
#
#     def GetDblAngle(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID, pRetVal
#
#     def GetDblChannel(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID, pRetVal
#
#     def GetGeneral(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, Color, Notes, GUID, pRetVal
#
#     def GetISection(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID, pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameInPropFile(self, Name):
#         '-no docstring-'
#         #return NameInFile, FileName, MatProp, PropType, pRetVal
#
#     def GetNameList(self, PropType):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetNonPrismatic(self, Name):
#         '-no docstring-'
#         #return NumberItems, StartSec, EndSec, MyLength, MyType, EI33, EI22, Color, Notes, GUID, pRetVal
#
#     def GetPipe(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, Tw, Color, Notes, GUID, pRetVal
#
#     def GetPropFileNameList(self, FileName, PropType):
#         '-no docstring-'
#         #return NumberNames, MyName, MyPropType, pRetVal
#
#     def GetRebarBeam(self, Name):
#         '-no docstring-'
#         #return MatPropLong, MatPropConfine, CoverTop, CoverBot, TopLeftArea, TopRightArea, BotLeftArea, BotRightArea, pRetVal
#
#     def GetRebarColumn(self, Name):
#         '-no docstring-'
#         #return MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned, pRetVal
#
#     def GetRectangle(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Color, Notes, GUID, pRetVal
#
#     def GetSectProps(self, Name):
#         '-no docstring-'
#         #return Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, pRetVal
#
#     def GetTee(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
#
#     def GetTube(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return PropType, pRetVal
#
#     def GetTypeRebar(self, Name):
#         '-no docstring-'
#         #return MyType, pRetVal
#
#     def ImportProp(self, Name, MatProp, FileName, PropName, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def SDShape(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAngle(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAutoSelectSteel(self, Name, NumberItems, AutoStartSection, Notes, GUID):
#         '-no docstring-'
#         #return SectName, pRetVal
#
#     def SetChannel(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCircle(self, Name, MatProp, T3, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCoverPlatedI(self, Name, SectName, FyTopFlange, FyWeb, FyBotFlange, Tc, Bc, MatPropTop, Tcb, Bcb, MatPropBot, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDblAngle(self, Name, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDblChannel(self, Name, MatProp, T3, T2, Tf, Tw, Dis, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGeneral(self, Name, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, S22, S33, Z22, Z33, R22, R33, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetISection(self, Name, MatProp, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetNonPrismatic(self, Name, NumberItems, Color, Notes, GUID):
#         '-no docstring-'
#         #return StartSec, EndSec, MyLength, MyType, EI33, EI22, pRetVal
#
#     def SetPipe(self, Name, MatProp, T3, Tw, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetRebarBeam(self, Name, MatPropLong, MatPropConfine, CoverTop, CoverBot, TopLeftArea, TopRightArea, BotLeftArea, BotRightArea):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetRebarColumn(self, Name, MatPropLong, MatPropConfine, Pattern, ConfineType, Cover, NumberCBars, NumberR3Bars, NumberR2Bars, RebarSize, TieSize, TieSpacingLongit, Number2DirTieBars, Number3DirTieBars, ToBeDesigned):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetRectangle(self, Name, MatProp, T3, T2, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTee(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTube(self, Name, MatProp, T3, T2, Tf, Tw, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSDSection(self, Name):
#         '-no docstring-'
#         #return MatProp, NumberItems, ShapeName, MyType, DesignType, Color, Notes, GUID, pRetVal
#
#     def SetSDSection(self, Name, MatProp, DesignType, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetMaterial(self, Name):
#         '-no docstring-'
#         #return MatProp, pRetVal
#
#     def SetMaterial(self, Name, MatProp):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetTrapezoidal(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, T2b, Color, Notes, GUID, pRetVal
#
#     def SetTrapezoidal(self, Name, MatProp, T3, T2, T2b, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAutoSelectAluminum(self, Name):
#         '-no docstring-'
#         #return NumberItems, SectName, AutoStartSection, Notes, GUID, pRetVal
#
#     def GetAutoSelectColdFormed(self, Name):
#         '-no docstring-'
#         #return NumberItems, SectName, AutoStartSection, Notes, GUID, pRetVal
#
#     def GetColdC(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID, pRetVal
#
#     def GetColdHat(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID, pRetVal
#
#     def GetColdZ(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Thickness, Radius, LipDepth, LipAngle, Color, Notes, GUID, pRetVal
#
#     def GetGeneral_1(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, I23, S22, S33, Z22, Z33, R22, R33, EccV2, EccV3, Color, Notes, GUID, pRetVal
#
#     def GetHybridISection(self, Name):
#         '-no docstring-'
#         #return MatPropTopFlange, MatPropWeb, MatPropBotFlange, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID, pRetVal
#
#     def GetHybridUSection(self, Name):
#         '-no docstring-'
#         #return WebMaterial, TopFlangeMaterial, BotFlangeMaterial, T, Color, Notes, GUID, pRetVal
#
#     def GetNotionalSize(self, Name):
#         '-no docstring-'
#         #return stype, Value, pRetVal
#
#     def GetPrecastI(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, B, D, Color, Notes, GUID, pRetVal
#
#     def GetPrecastI_1(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, B, D, T, C, Color, Notes, GUID, pRetVal
#
#     def GetPrecastU(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, B, D, Color, Notes, GUID, pRetVal
#
#     def GetSectProps_1(self, Name):
#         '-no docstring-'
#         #return Area, As2, As3, Torsion, I22, I33, I23, S22, S33, Z22, Z33, R22, R33, EccV2, EccV3, pRetVal
#
#     def SetAutoSelectAluminum(self, Name, NumberItems, AutoStartSection, Notes, GUID):
#         '-no docstring-'
#         #return SectName, pRetVal
#
#     def SetAutoSelectColdFormed(self, Name, NumberItems, AutoStartSection, Notes, GUID):
#         '-no docstring-'
#         #return SectName, pRetVal
#
#     def SetColdC(self, Name, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetColdHat(self, Name, MatProp, T3, T2, Thickness, Radius, LipDepth, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetColdZ(self, Name, MatProp, T3, T2, Thickness, Radius, LipDepth, LipAngle, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGeneral_1(self, Name, MatProp, T3, T2, Area, As2, As3, Torsion, I22, I33, I23, S22, S33, Z22, Z33, R22, R33, EccV2, EccV3, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetHybridISection(self, Name, MatPropTopFlange, MatPropWeb, MatPropBotFlange, T3, T2, Tf, Tw, T2b, Tfb, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetHybridUSection(self, Name, WebMaterial, TopFlangeMaterial, BotFlangeMaterial, Color, Notes, GUID):
#         '-no docstring-'
#         #return T, pRetVal
#
#     def SetNotionalSize(self, Name, stype, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPrecastI(self, Name, MatProp, Color, Notes, GUID):
#         '-no docstring-'
#         #return B, D, pRetVal
#
#     def SetPrecastI_1(self, Name, MatProp, Color, Notes, GUID):
#         '-no docstring-'
#         #return B, D, T, C, pRetVal
#
#     def SetPrecastU(self, Name, MatProp, Color, Notes, GUID):
#         '-no docstring-'
#         #return B, D, pRetVal
#
#     def GetColdL(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, Thickness, Radius, LipDepth, Color, Notes, GUID, pRetVal
#
#     def GetColdI(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, T2b, Thickness, Radius, Color, Notes, GUID, pRetVal
#
#     def GetColdT(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID, pRetVal
#
#     def GetColdBox(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID, pRetVal
#
#     def GetColdPipe(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, T3, Thickness, Color, Notes, GUID, pRetVal
#
#     def SetColdL(self, Name, MatProp, T3, Thickness, Radius, LipDepth, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetColdI(self, Name, MatProp, T3, T2, T2b, Thickness, Radius, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetColdT(self, Name, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetColdBox(self, Name, MatProp, T3, T2, Thickness, Radius, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetColdPipe(self, Name, MatProp, T3, Thickness, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetPrecastSuperT(self, Name):
#         '-no docstring-'
#         #return FileName, MatProp, B, D, T, C, CornerType, MaxBrBl, ClosedFlange, Color, Notes, GUID, pRetVal
#
#     def SetPrecastSuperT(self, Name, MatProp, CornerType, MaxBrBl, ClosedFlange, Color, Notes, GUID):
#         '-no docstring-'
#         #return B, D, T, C, pRetVal
#

cDCoSP63133302011._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoSP63133302011 implementation
# class cDCoSP63133302011_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDStBS5950_2000._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStBS5950_2000 implementation
# class cDStBS5950_2000_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cMassSource._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetDefault',
        (['in', 'out'], POINTER(BSTR), 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetMassSource',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'MassFromElements'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'MassFromMasses'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'MassFromLoads'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsDefault'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetDefault',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetMassSource',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'MassFromElements'),
        (['in'], VARIANT_BOOL, 'MassFromMasses'),
        (['in'], VARIANT_BOOL, 'MassFromLoads'),
        (['in'], VARIANT_BOOL, 'IsDefault'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cMassSource implementation
# class cMassSource_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetDefault(self):
#         '-no docstring-'
#         #return Name, pRetVal
#
#     def GetMassSource(self, Name):
#         '-no docstring-'
#         #return MassFromElements, MassFromMasses, MassFromLoads, IsDefault, NumberLoads, LoadPat, SF, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetDefault(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetMassSource(self, Name, MassFromElements, MassFromMasses, MassFromLoads, IsDefault, NumberLoads):
#         '-no docstring-'
#         #return LoadPat, SF, pRetVal
#

cDCoEurocode_2_2004._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoEurocode_2_2004 implementation
# class cDCoEurocode_2_2004_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cAutoWindBridge(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{28F22636-CD8A-4E12-B660-48A09D0F055B}')
    _idlflags_ = ['dual', 'oleautomation']


cAutoWindBridge._methods_ = [
]

################################################################
# code template for cAutoWindBridge implementation
# class cAutoWindBridge_Impl(object):

cCaseExternalResults._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'SetNumberSteps',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'FirstStep'),
        (['in'], c_int, 'LastStep'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseExternalResults implementation
# class cCaseExternalResults_Impl(object):
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNumberSteps(self, Name, FirstStep, LastStep):
#         '-no docstring-'
#         #return pRetVal
#

cSectionCut._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'AddQuad',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetCutInfo',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'GroupName'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['in', 'out'], POINTER(c_int), 'Num'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetLocalAxesAdvancedAnalysis',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Active'),
        (['in', 'out'], POINTER(c_int), 'AxVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in', 'out'], POINTER(c_int), 'Plane2'),
        (['in', 'out'], POINTER(c_int), 'PlVectOpt'),
        (['in', 'out'], POINTER(BSTR), 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLocalAxesAnalysis',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsAdvanced'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLocalAxesAngleDesign',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Angle'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetQuad',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Num'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetResultLocation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'IsDefault'),
        (['in', 'out'], POINTER(c_double), 'X'),
        (['in', 'out'], POINTER(c_double), 'Y'),
        (['in', 'out'], POINTER(c_double), 'Z'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetResultsSide',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Side'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetByGroup',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in'], c_int, 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetByQuad',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'GroupName'),
        (['in'], c_int, 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetLocalAxesAdvancedAnalysis',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Active'),
        (['in'], c_int, 'AxVectOpt'),
        (['in'], BSTR, 'AxCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'AxDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AxPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'AxVect'),
        (['in'], c_int, 'Plane2'),
        (['in'], c_int, 'PlVectOpt'),
        (['in'], BSTR, 'PlCSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'PlDir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PlPt'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PlVect'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetLocalAxesAnalysis',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Z'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'X'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetLocalAxesAngleDesign',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Angle'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetResultLocation',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'IsDefault'),
        (['in', 'optional'], c_double, 'X', 0.0),
        (['in', 'optional'], c_double, 'Y', 0.0),
        (['in', 'optional'], c_double, 'Z', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetResultsSide',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Side'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cSectionCut implementation
# class cSectionCut_Impl(object):
#     def AddQuad(self, Name):
#         '-no docstring-'
#         #return X, Y, Z, pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCutInfo(self, Name):
#         '-no docstring-'
#         #return GroupName, MyType, Num, pRetVal
#
#     def GetLocalAxesAdvancedAnalysis(self, Name):
#         '-no docstring-'
#         #return Active, AxVectOpt, AxCSys, AxDir, AxPt, AxVect, Plane2, PlVectOpt, PlCSys, PlDir, PlPt, PlVect, pRetVal
#
#     def GetLocalAxesAnalysis(self, Name):
#         '-no docstring-'
#         #return Z, Y, X, IsAdvanced, pRetVal
#
#     def GetLocalAxesAngleDesign(self, Name):
#         '-no docstring-'
#         #return Angle, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetQuad(self, Name, Num):
#         '-no docstring-'
#         #return X, Y, Z, pRetVal
#
#     def GetResultLocation(self, Name):
#         '-no docstring-'
#         #return IsDefault, X, Y, Z, pRetVal
#
#     def GetResultsSide(self, Name):
#         '-no docstring-'
#         #return Side, pRetVal
#
#     def SetByGroup(self, Name, GroupName, MyType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetByQuad(self, Name, GroupName, MyType):
#         '-no docstring-'
#         #return X, Y, Z, pRetVal
#
#     def SetLocalAxesAdvancedAnalysis(self, Name, Active, AxVectOpt, AxCSys, Plane2, PlVectOpt, PlCSys):
#         '-no docstring-'
#         #return AxDir, AxPt, AxVect, PlDir, PlPt, PlVect, pRetVal
#
#     def SetLocalAxesAnalysis(self, Name, Z, Y, X):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLocalAxesAngleDesign(self, Name, Angle):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetResultLocation(self, Name, IsDefault, X, Y, Z):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetResultsSide(self, Name, Side):
#         '-no docstring-'
#         #return pRetVal
#


class cDStSP16_13330_2017(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{07EB6367-797E-4ACB-869E-AABB20E5CE25}')
    _idlflags_ = ['dual', 'oleautomation']


cDStSP16_13330_2017._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStSP16_13330_2017 implementation
# class cDStSP16_13330_2017_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cLineElm._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetEndLengthOffset',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Length1'),
        (['in', 'out'], POINTER(c_double), 'Length2'),
        (['in', 'out'], POINTER(c_double), 'RZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetInsertionPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Offset2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLoadDistributed',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RD2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val2'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLoadPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'RelDist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Dist'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoadTemperature',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'MyType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetLocalAxes',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetMaterialOverwrite',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetObj',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Obj'),
        (['in', 'out'], POINTER(c_int), 'ObjType'),
        (['in', 'out'], POINTER(c_double), 'RDI'),
        (['in', 'out'], POINTER(c_double), 'RDJ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Point1'),
        (['in', 'out'], POINTER(BSTR), 'Point2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetProperty',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['in', 'out'], POINTER(c_int), 'ObjType'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Var'),
        (['in', 'out'], POINTER(c_double), 'SVarRelStartLoc'),
        (['in', 'out'], POINTER(c_double), 'SVarTotalLength'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetReleases',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'II'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'JJ'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'StartValue'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'EndValue'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetTCLimits',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LimitCompressionExists'),
        (['in', 'out'], POINTER(c_double), 'LimitCompression'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'LimitTensionExists'),
        (['in', 'out'], POINTER(c_double), 'LimitTension'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetTransformationMatrix',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetLoadDeformation',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetLoadGravity',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetLoadStrain',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'DOF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Val'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PatternName'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetLoadTargetForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LineName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadPat'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'DOF6'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'P'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'V3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'M3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T4'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T5'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'T6'),
        (['in', 'optional'], eItemTypeElm, 'ItemTypeElm', 1),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetMatTemp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Temp'),
        (['in', 'out'], POINTER(BSTR), 'PatternName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetPDeltaForce',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberForces'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PDeltaForce'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Dir'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cLineElm implementation
# class cLineElm_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetEndLengthOffset(self, Name):
#         '-no docstring-'
#         #return Length1, Length2, RZ, pRetVal
#
#     def GetInsertionPoint(self, Name):
#         '-no docstring-'
#         #return Offset1, Offset2, pRetVal
#
#     def GetLoadDistributed(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, MyType, CSys, Dir, RD1, RD2, Dist1, Dist2, Val1, Val2, pRetVal
#
#     def GetLoadPoint(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, MyType, CSys, Dir, RelDist, Dist, Val, pRetVal
#
#     def GetLoadTemperature(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, MyType, Val, PatternName, pRetVal
#
#     def GetLocalAxes(self, Name):
#         '-no docstring-'
#         #return Ang, pRetVal
#
#     def GetMaterialOverwrite(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetObj(self, Name):
#         '-no docstring-'
#         #return Obj, ObjType, RDI, RDJ, pRetVal
#
#     def GetPoints(self, Name):
#         '-no docstring-'
#         #return Point1, Point2, pRetVal
#
#     def GetProperty(self, Name):
#         '-no docstring-'
#         #return PropName, ObjType, Var, SVarRelStartLoc, SVarTotalLength, pRetVal
#
#     def GetReleases(self, Name):
#         '-no docstring-'
#         #return II, JJ, StartValue, EndValue, pRetVal
#
#     def GetTCLimits(self, Name):
#         '-no docstring-'
#         #return LimitCompressionExists, LimitCompression, LimitTensionExists, LimitTension, pRetVal
#
#     def GetTransformationMatrix(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetLoadDeformation(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetLoadGravity(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, CSys, X, Y, Z, pRetVal
#
#     def GetLoadStrain(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, DOF, Val, PatternName, pRetVal
#
#     def GetLoadTargetForce(self, Name, ItemTypeElm):
#         '-no docstring-'
#         #return NumberItems, LineName, LoadPat, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6, P, V2, V3, T, M2, M3, T1, T2, T3, T4, T5, T6, pRetVal
#
#     def GetMatTemp(self, Name):
#         '-no docstring-'
#         #return Temp, PatternName, pRetVal
#
#     def GetPDeltaForce(self, Name):
#         '-no docstring-'
#         #return NumberForces, PDeltaForce, Dir, CSys, pRetVal
#

cDCoACI318_14._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoACI318_14 implementation
# class cDCoACI318_14_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class Library(object):
    """SAP2000 Application Programming Interface (API) v1"""
    name = 'SAP2000v1'
    _reg_typelib_ = ('{AADDD124-B054-4C6E-A088-711A06245B57}', 1, 0)


cHelper._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'CreateObject',
        (['in'], BSTR, 'fullPath'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetObject',
        (['in'], BSTR, 'typeName'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'CreateObjectProgID',
        (['in'], BSTR, 'progID'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetOAPIVersionNumber',
        (['out', 'retval'], POINTER(c_double), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'CreateObjectHost',
        (['in'], BSTR, 'hostName'),
        (['in'], BSTR, 'fullPath'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'CreateObjectHostPort',
        (['in'], BSTR, 'hostName'),
        (['in'], c_int, 'portNumber'),
        (['in'], BSTR, 'fullPath'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'CreateObjectProgIDHost',
        (['in'], BSTR, 'hostName'),
        (['in'], BSTR, 'progID'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'CreateObjectProgIDHostPort',
        (['in'], BSTR, 'hostName'),
        (['in'], c_int, 'portNumber'),
        (['in'], BSTR, 'progID'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetObjectHost',
        (['in'], BSTR, 'hostName'),
        (['in'], BSTR, 'progID'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetObjectHostPort',
        (['in'], BSTR, 'hostName'),
        (['in'], c_int, 'portNumber'),
        (['in'], BSTR, 'progID'),
        (['out', 'retval'], POINTER(POINTER(cOAPI)), 'pRetVal')
    ),
]

################################################################
# code template for cHelper implementation
# class cHelper_Impl(object):
#     def CreateObject(self, fullPath):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetObject(self, typeName):
#         '-no docstring-'
#         #return pRetVal
#
#     def CreateObjectProgID(self, progID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetOAPIVersionNumber(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CreateObjectHost(self, hostName, fullPath):
#         '-no docstring-'
#         #return pRetVal
#
#     def CreateObjectHostPort(self, hostName, portNumber, fullPath):
#         '-no docstring-'
#         #return pRetVal
#
#     def CreateObjectProgIDHost(self, hostName, progID):
#         '-no docstring-'
#         #return pRetVal
#
#     def CreateObjectProgIDHostPort(self, hostName, portNumber, progID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetObjectHost(self, hostName, progID):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetObjectHostPort(self, hostName, portNumber, progID):
#         '-no docstring-'
#         #return pRetVal
#

cDStIndian_IS_800_2007._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStIndian_IS_800_2007 implementation
# class cDStIndian_IS_800_2007_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDCoAS_3600_09._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoAS_3600_09 implementation
# class cDCoAS_3600_09_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDCoACI318_08_IBC2009._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoACI318_08_IBC2009 implementation
# class cDCoACI318_08_IBC2009_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCaseStaticNonlinearMultistep._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StepRange'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'FirstLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'LastLoadStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'StartCaseStep'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ExtrapolateOption'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseStaticNonlinearMultistep implementation
# class cCaseStaticNonlinearMultistep_Impl(object):
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, SF, StepRange, FirstLoadStep, LastLoadStep, StartCaseStep, ExtrapolateOption, pRetVal
#

cGenDispl._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'CountPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Count'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'DeletePoint',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PointName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetPoint',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'U3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'R3'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetPoint',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PointName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetType',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetTypeOAPI',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'MyType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cGenDispl implementation
# class cGenDispl_Impl(object):
#     def Add(self, Name, MyType):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def CountPoint(self, Name):
#         '-no docstring-'
#         #return Count, pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeletePoint(self, Name, PointName):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetPoint(self, Name):
#         '-no docstring-'
#         #return NumberItems, PointName, U1, U2, U3, R1, R2, R3, pRetVal
#
#     def GetTypeOAPI(self, Name):
#         '-no docstring-'
#         #return MyType, pRetVal
#
#     def SetPoint(self, Name, PointName):
#         '-no docstring-'
#         #return SF, pRetVal
#
#     def SetType(self, Name, MyType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTypeOAPI(self, Name, MyType):
#         '-no docstring-'
#         #return pRetVal
#

cDCoBS8110_97._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoBS8110_97 implementation
# class cDCoBS8110_97_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDAlAA_2015(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{B61B8DAA-D900-472C-8E3C-1812D3593053}')
    _idlflags_ = ['dual', 'oleautomation']


cDAlAA_2015._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDAlAA_2015 implementation
# class cDAlAA_2015_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDCoSingapore_CP_65_99._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoSingapore_CP_65_99 implementation
# class cDCoSingapore_CP_65_99_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cCaseDirectHistoryLinear._methods_ = [
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['in', 'out'], POINTER(c_double), 'DampA'),
        (['in', 'out'], POINTER(c_double), 'DampB'),
        (['in', 'out'], POINTER(c_double), 'DampF1'),
        (['in', 'out'], POINTER(c_double), 'DampF2'),
        (['in', 'out'], POINTER(c_double), 'DampD1'),
        (['in', 'out'], POINTER(c_double), 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetTimeIntegration',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'IntegrationType'),
        (['in', 'out'], POINTER(c_double), 'Alpha'),
        (['in', 'out'], POINTER(c_double), 'Beta'),
        (['in', 'out'], POINTER(c_double), 'Gamma'),
        (['in', 'out'], POINTER(c_double), 'Theta'),
        (['in', 'out'], POINTER(c_double), 'M'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NStep'),
        (['in', 'out'], POINTER(c_double), 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetDampProportional',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'DampType'),
        (['in'], c_double, 'DampA'),
        (['in'], c_double, 'DampB'),
        (['in'], c_double, 'DampF1'),
        (['in'], c_double, 'DampF2'),
        (['in'], c_double, 'DampD1'),
        (['in'], c_double, 'DampD2'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Tf'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'At'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetTimeIntegration',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'IntegrationType'),
        (['in'], c_double, 'Alpha'),
        (['in'], c_double, 'Beta'),
        (['in'], c_double, 'Gamma'),
        (['in'], c_double, 'Theta'),
        (['in', 'optional'], c_double, 'M', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetTimeStep',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NStep'),
        (['in'], c_double, 'Dt'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseDirectHistoryLinear implementation
# class cCaseDirectHistoryLinear_Impl(object):
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def GetDampProportional(self, Name):
#         '-no docstring-'
#         #return DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetTimeIntegration(self, Name):
#         '-no docstring-'
#         #return IntegrationType, Alpha, Beta, Gamma, Theta, M, pRetVal
#
#     def GetTimeStep(self, Name):
#         '-no docstring-'
#         #return NStep, Dt, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampProportional(self, Name, DampType, DampA, DampB, DampF1, DampF2, DampD1, DampD2):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, Func, SF, Tf, At, CSys, Ang, pRetVal
#
#     def SetTimeIntegration(self, Name, IntegrationType, Alpha, Beta, Gamma, Theta, M):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetTimeStep(self, Name, NStep, Dt):
#         '-no docstring-'
#         #return pRetVal
#

cCaseStaticLinear._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCaseStaticLinear implementation
# class cCaseStaticLinear_Impl(object):
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, SF, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, SF, pRetVal
#

cCasePowerSpectralDensity._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'HysConMassCoeff'),
        (['in', 'out'], POINTER(c_double), 'HysConStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'HysIntFreqUnits'),
        (['in', 'out'], POINTER(c_int), 'HysIntNumFreqs'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetDampType',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'DampType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetFreqData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'FreqFirst'),
        (['in', 'out'], POINTER(c_double), 'FreqLast'),
        (['in', 'out'], POINTER(c_int), 'FreqNumIncs'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModal'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddModalDev'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'FreqAddSpecified'),
        (['in', 'out'], POINTER(BSTR), 'ModalCase'),
        (['in', 'out'], POINTER(c_int), 'FreqNumModalDev'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev'),
        (['in', 'out'], POINTER(c_int), 'FreqNumSpecified'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLoads',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetCase',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetDampConstant',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'HysConMassCoeff'),
        (['in'], c_double, 'HysConStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetDampInterpolated',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'HysIntFreqUnits'),
        (['in'], c_int, 'HysIntNumFreqs'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntFreq'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntMassCoeff'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'HysIntStiffCoeff'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetFreqData',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'FreqFirst'),
        (['in'], c_double, 'FreqLast'),
        (['in'], c_int, 'FreqNumIncs'),
        (['in'], VARIANT_BOOL, 'FreqAddModal'),
        (['in'], VARIANT_BOOL, 'FreqAddModalDev'),
        (['in'], VARIANT_BOOL, 'FreqAddSpecified'),
        (['in'], BSTR, 'ModalCase'),
        (['in'], c_int, 'FreqNumModalDev'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqModalDev'),
        (['in'], c_int, 'FreqNumSpecified'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'FreqSpecified'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetInitialCase',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'InitialCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetLoads',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberLoads'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Func'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'SF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'PhaseAngle'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'CSys'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ang'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cCasePowerSpectralDensity implementation
# class cCasePowerSpectralDensity_Impl(object):
#     def GetDampConstant(self, Name):
#         '-no docstring-'
#         #return HysConMassCoeff, HysConStiffCoeff, pRetVal
#
#     def GetDampInterpolated(self, Name):
#         '-no docstring-'
#         #return HysIntFreqUnits, HysIntNumFreqs, HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
#
#     def GetDampType(self, Name):
#         '-no docstring-'
#         #return DampType, pRetVal
#
#     def GetFreqData(self, Name):
#         '-no docstring-'
#         #return FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqModalDev, FreqNumSpecified, FreqSpecified, pRetVal
#
#     def GetInitialCase(self, Name):
#         '-no docstring-'
#         #return InitialCase, pRetVal
#
#     def GetLoads(self, Name):
#         '-no docstring-'
#         #return NumberLoads, LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
#
#     def SetCase(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampConstant(self, Name, HysConMassCoeff, HysConStiffCoeff):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDampInterpolated(self, Name, HysIntFreqUnits, HysIntNumFreqs):
#         '-no docstring-'
#         #return HysIntFreq, HysIntMassCoeff, HysIntStiffCoeff, pRetVal
#
#     def SetFreqData(self, Name, FreqFirst, FreqLast, FreqNumIncs, FreqAddModal, FreqAddModalDev, FreqAddSpecified, ModalCase, FreqNumModalDev, FreqNumSpecified):
#         '-no docstring-'
#         #return FreqModalDev, FreqSpecified, pRetVal
#
#     def SetInitialCase(self, Name, InitialCase):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLoads(self, Name, NumberLoads):
#         '-no docstring-'
#         #return LoadType, LoadName, Func, SF, PhaseAngle, CSys, Ang, pRetVal
#

cDCoTS_500_2000._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoTS_500_2000 implementation
# class cDCoTS_500_2000_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDStAPI_RP2A_WSD2014._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAPI_RP2A_WSD2014 implementation
# class cDStAPI_RP2A_WSD2014_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cEditGeneral._methods_ = [
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Move',
        (['in'], c_double, 'DX'),
        (['in'], c_double, 'DY'),
        (['in'], c_double, 'DZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ExtrudeFrameToAreaLinear',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'DX'),
        (['in'], c_double, 'DY'),
        (['in'], c_double, 'DZ'),
        (['in'], c_int, 'NumberAreas'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ExtrudeFrameToAreaRadial',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_int, 'RotateAxis'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in'], c_double, 'IncrementAng'),
        (['in'], c_double, 'TotalRise'),
        (['in'], c_int, 'NumberAreas'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'AreaName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ExtrudePointToFrameLinear',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'DX'),
        (['in'], c_double, 'DY'),
        (['in'], c_double, 'DZ'),
        (['in'], c_int, 'NumberFrames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'ExtrudePointToFrameRadial',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_int, 'RotateAxis'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in'], c_double, 'IncrementAng'),
        (['in'], c_double, 'TotalRise'),
        (['in'], c_int, 'NumberFrames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'ExtrudeAreaToSolidLinearNormal',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_int, 'NPlus3'),
        (['in'], c_double, 'TPlus3'),
        (['in'], c_int, 'NMinus3'),
        (['in'], c_double, 'TMinus3'),
        (['in', 'out'], POINTER(c_int), 'NumberSolids'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'ExtrudeAreaToSolidLinearUser',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_double, 'DX'),
        (['in'], c_double, 'DY'),
        (['in'], c_double, 'DZ'),
        (['in'], c_int, 'Number'),
        (['in', 'out'], POINTER(c_int), 'NumberSolids'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'ExtrudeAreaToSolidRadial',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], c_int, 'RotateAxis'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in'], c_double, 'IncrementAng'),
        (['in'], c_double, 'TotalRise'),
        (['in'], c_int, 'Number'),
        (['in', 'out'], POINTER(c_int), 'NumberSolids'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'SolidName'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'ReplicateLinear',
        (['in'], c_double, 'DX'),
        (['in'], c_double, 'DY'),
        (['in'], c_double, 'DZ'),
        (['in'], c_int, 'Number'),
        (['in', 'out'], POINTER(c_int), 'NumberObjects'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'ReplicateMirror',
        (['in'], c_int, 'Plane'),
        (['in'], c_double, 'X1'),
        (['in'], c_double, 'Y1'),
        (['in'], c_double, 'Z1'),
        (['in'], c_double, 'X2'),
        (['in'], c_double, 'Y2'),
        (['in'], c_double, 'Z2'),
        (['in'], c_double, 'X3'),
        (['in'], c_double, 'Y3'),
        (['in'], c_double, 'Z3'),
        (['in', 'out'], POINTER(c_int), 'NumberObjects'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'ReplicateRadial',
        (['in'], c_int, 'RotateAxis'),
        (['in'], c_double, 'X1'),
        (['in'], c_double, 'Y1'),
        (['in'], c_double, 'Z1'),
        (['in'], c_double, 'X2'),
        (['in'], c_double, 'Y2'),
        (['in'], c_double, 'Z2'),
        (['in'], c_int, 'Number'),
        (['in'], c_double, 'Ang'),
        (['in', 'out'], POINTER(c_int), 'NumberObjects'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'optional'], VARIANT_BOOL, 'Remove', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cEditGeneral implementation
# class cEditGeneral_Impl(object):
#     def Move(self, DX, DY, DZ):
#         '-no docstring-'
#         #return pRetVal
#
#     def ExtrudeFrameToAreaLinear(self, Name, PropName, DX, DY, DZ, NumberAreas, Remove):
#         '-no docstring-'
#         #return AreaName, pRetVal
#
#     def ExtrudeFrameToAreaRadial(self, Name, PropName, RotateAxis, X, Y, Z, IncrementAng, TotalRise, NumberAreas, Remove):
#         '-no docstring-'
#         #return AreaName, pRetVal
#
#     def ExtrudePointToFrameLinear(self, Name, PropName, DX, DY, DZ, NumberFrames):
#         '-no docstring-'
#         #return FrameName, pRetVal
#
#     def ExtrudePointToFrameRadial(self, Name, PropName, RotateAxis, X, Y, Z, IncrementAng, TotalRise, NumberFrames):
#         '-no docstring-'
#         #return FrameName, pRetVal
#
#     def ExtrudeAreaToSolidLinearNormal(self, Name, PropName, NPlus3, TPlus3, NMinus3, TMinus3, Remove):
#         '-no docstring-'
#         #return NumberSolids, SolidName, pRetVal
#
#     def ExtrudeAreaToSolidLinearUser(self, Name, PropName, DX, DY, DZ, Number, Remove):
#         '-no docstring-'
#         #return NumberSolids, SolidName, pRetVal
#
#     def ExtrudeAreaToSolidRadial(self, Name, PropName, RotateAxis, X, Y, Z, IncrementAng, TotalRise, Number, Remove):
#         '-no docstring-'
#         #return NumberSolids, SolidName, pRetVal
#
#     def ReplicateLinear(self, DX, DY, DZ, Number, Remove):
#         '-no docstring-'
#         #return NumberObjects, ObjectName, ObjectType, pRetVal
#
#     def ReplicateMirror(self, Plane, X1, Y1, Z1, X2, Y2, Z2, X3, Y3, Z3, Remove):
#         '-no docstring-'
#         #return NumberObjects, ObjectName, ObjectType, pRetVal
#
#     def ReplicateRadial(self, RotateAxis, X1, Y1, Z1, X2, Y2, Z2, Number, Ang, Remove):
#         '-no docstring-'
#         #return NumberObjects, ObjectName, ObjectType, pRetVal
#

cDStAISC_LRFD93._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAISC_LRFD93 implementation
# class cDStAISC_LRFD93_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDStAISC360_16._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStAISC360_16 implementation
# class cDStAISC360_16_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cFile._methods_ = [
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'NewBlank',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'OpenFile',
        (['in'], BSTR, 'FileName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Save',
        (['in', 'optional'], BSTR, 'FileName', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetFilePath',
        (['in', 'out'], POINTER(BSTR), 'FilePath'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'New2DFrame',
        (['in'], e2DFrameType, 'TempType'),
        (['in'], c_int, 'NumberStorys'),
        (['in'], c_double, 'StoryHeight'),
        (['in'], c_int, 'NumberBays'),
        (['in'], c_double, 'BayWidth'),
        (['in', 'optional'], VARIANT_BOOL, 'Restraint', True),
        (['in', 'optional'], BSTR, 'Beam', 'Default'),
        (['in', 'optional'], BSTR, 'Column', 'Default'),
        (['in', 'optional'], BSTR, 'Brace', 'Default'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'New3DFrame',
        (['in'], e3DFrameType, 'TempType'),
        (['in'], c_int, 'NumberStorys'),
        (['in'], c_double, 'StoryHeight'),
        (['in'], c_int, 'NumberBaysX'),
        (['in'], c_double, 'BayWidthX'),
        (['in'], c_int, 'NumberBaysY'),
        (['in'], c_double, 'BayWidthY'),
        (['in', 'optional'], VARIANT_BOOL, 'Restraint', True),
        (['in', 'optional'], BSTR, 'Beam', 'Default'),
        (['in', 'optional'], BSTR, 'Column', 'Default'),
        (['in', 'optional'], BSTR, 'Area', 'Default'),
        (['in', 'optional'], c_int, 'NumberXDivisions', 4),
        (['in', 'optional'], c_int, 'NumberYDivisions', 4),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'NewBeam',
        (['in'], c_int, 'NumberSpans'),
        (['in'], c_double, 'SpanLength'),
        (['in', 'optional'], VARIANT_BOOL, 'Restraint', True),
        (['in', 'optional'], BSTR, 'Beam', 'Default'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'NewSolidBlock',
        (['in'], c_double, 'XWidth'),
        (['in'], c_double, 'YWidth'),
        (['in'], c_double, 'Height'),
        (['in', 'optional'], VARIANT_BOOL, 'Restraint', True),
        (['in', 'optional'], BSTR, 'Solid', 'Default'),
        (['in', 'optional'], c_int, 'NumberXDivisions', 5),
        (['in', 'optional'], c_int, 'NumberYDivisions', 8),
        (['in', 'optional'], c_int, 'NumberZDivisions', 10),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'NewWall',
        (['in'], c_int, 'NumberXDivisions'),
        (['in'], c_double, 'DivisionWidthX'),
        (['in'], c_int, 'NumberZDivisions'),
        (['in'], c_double, 'DivisionWidthZ'),
        (['in', 'optional'], VARIANT_BOOL, 'Restraint', True),
        (['in', 'optional'], BSTR, 'Area', 'Default'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cFile implementation
# class cFile_Impl(object):
#     def NewBlank(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def OpenFile(self, FileName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Save(self, FileName):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetFilePath(self):
#         '-no docstring-'
#         #return FilePath, pRetVal
#
#     def New2DFrame(self, TempType, NumberStorys, StoryHeight, NumberBays, BayWidth, Restraint, Beam, Column, Brace):
#         '-no docstring-'
#         #return pRetVal
#
#     def New3DFrame(self, TempType, NumberStorys, StoryHeight, NumberBaysX, BayWidthX, NumberBaysY, BayWidthY, Restraint, Beam, Column, Area, NumberXDivisions, NumberYDivisions):
#         '-no docstring-'
#         #return pRetVal
#
#     def NewBeam(self, NumberSpans, SpanLength, Restraint, Beam):
#         '-no docstring-'
#         #return pRetVal
#
#     def NewSolidBlock(self, XWidth, YWidth, Height, Restraint, Solid, NumberXDivisions, NumberYDivisions, NumberZDivisions):
#         '-no docstring-'
#         #return pRetVal
#
#     def NewWall(self, NumberXDivisions, DivisionWidthX, NumberZDivisions, DivisionWidthZ, Restraint, Area):
#         '-no docstring-'
#         #return pRetVal
#

cPropTendon._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetProp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_int), 'ModelingOption'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetProp',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_int, 'ModelingOption'),
        (['in'], c_double, 'Area'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropTendon implementation
# class cPropTendon_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetProp(self, Name):
#         '-no docstring-'
#         #return MatProp, ModelingOption, Area, Color, Notes, GUID, pRetVal
#
#     def SetProp(self, Name, MatProp, ModelingOption, Area, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#

cDConcShellEurocode_2_2004._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDConcShellEurocode_2_2004 implementation
# class cDConcShellEurocode_2_2004_Impl(object):
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDStChinese_2010._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStChinese_2010 implementation
# class cDStChinese_2010_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cGenRefLine._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ConvertLineToBLL',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], c_double, 'FirstStation', 0.0),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], c_double, 'OffsetX', 0.0),
        (['in', 'optional'], c_double, 'OffsetY', 0.0),
        (['in', 'optional'], c_double, 'OffsetZ', 0.0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetLine',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'DiscLength'),
        (['in', 'out'], POINTER(c_double), 'DiscAngle'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Visible'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLineElevPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetLinePlanPoints',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetLine',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'DiscLength'),
        (['in'], c_double, 'DiscAngle'),
        (['in', 'optional'], BSTR, 'CSys', 'Global'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], VARIANT_BOOL, 'Visible', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetLineElevPoints',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'S'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Z'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetLinePlanPoints',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CurveType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value1'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value3'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'X'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Y'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cGenRefLine implementation
# class cGenRefLine_Impl(object):
#     def ConvertLineToBLL(self, Name, FirstStation, CSys, OffsetX, OffsetY, OffsetZ):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLine(self, Name):
#         '-no docstring-'
#         #return DiscLength, DiscAngle, Color, Visible, pRetVal
#
#     def GetLineElevPoints(self, Name, CSys):
#         '-no docstring-'
#         #return NumberPoints, CurveType, Value1, Value2, Value3, S, Z, pRetVal
#
#     def GetLinePlanPoints(self, Name, CSys):
#         '-no docstring-'
#         #return NumberPoints, CurveType, Value1, Value2, Value3, X, Y, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def SetLine(self, Name, DiscLength, DiscAngle, CSys, Color, Visible):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetLineElevPoints(self, Name, NumberPoints):
#         '-no docstring-'
#         #return CurveType, Value1, Value2, Value3, S, Z, pRetVal
#
#     def SetLinePlanPoints(self, Name, NumberPoints):
#         '-no docstring-'
#         #return CurveType, Value1, Value2, Value3, X, Y, pRetVal
#

cPropCable._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetProp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'Area'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'SetModifiers',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'SetProp',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'Area'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropCable implementation
# class cPropCable_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetProp(self, Name):
#         '-no docstring-'
#         #return MatProp, Area, Color, Notes, GUID, pRetVal
#
#     def SetModifiers(self, Name):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetProp(self, Name, MatProp, Area, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#

cAnalysisResultsSetup._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'DeselectAllCasesAndCombosForOutput',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetCaseSelectedForOutput',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetComboSelectedForOutput',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetOptionBaseReactLoc',
        (['in', 'out'], POINTER(c_double), 'GX'),
        (['in', 'out'], POINTER(c_double), 'GY'),
        (['in', 'out'], POINTER(c_double), 'GZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetOptionBucklingMode',
        (['in', 'out'], POINTER(c_int), 'BuckModeStart'),
        (['in', 'out'], POINTER(c_int), 'BuckModeEnd'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'BuckModeAll'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetOptionDirectHist',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetOptionModalHist',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetOptionModeShape',
        (['in', 'out'], POINTER(c_int), 'ModeShapeStart'),
        (['in', 'out'], POINTER(c_int), 'ModeShapeEnd'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ModeShapesAll'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetOptionMultiStepStatic',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetOptionMultiValuedCombo',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetOptionNLStatic',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetCaseSelectedForOutput',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Selected', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetComboSelectedForOutput',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], VARIANT_BOOL, 'Selected', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetOptionBaseReactLoc',
        (['in'], c_double, 'GX'),
        (['in'], c_double, 'GY'),
        (['in'], c_double, 'GZ'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetOptionBucklingMode',
        (['in'], c_int, 'BuckModeStart'),
        (['in'], c_int, 'BuckModeEnd'),
        (['in', 'optional'], VARIANT_BOOL, 'BuckModeAll', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetOptionDirectHist',
        (['in'], c_int, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'SetOptionModalHist',
        (['in'], c_int, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'SetOptionModeShape',
        (['in'], c_int, 'ModeShapeStart'),
        (['in'], c_int, 'ModeShapeEnd'),
        (['in', 'optional'], VARIANT_BOOL, 'ModeShapesAll', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'SetOptionMultiStepStatic',
        (['in'], c_int, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'SetOptionMultiValuedCombo',
        (['in'], c_int, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetOptionNLStatic',
        (['in'], c_int, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetOptionPSD',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetOptionSteadyState',
        (['in', 'out'], POINTER(c_int), 'Value'),
        (['in', 'out'], POINTER(c_int), 'SteadyStateOption'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetSectionCutSelectedForOutput',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'SelectAllSectionCutsForOutput',
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetOptionPSD',
        (['in'], c_int, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetOptionSteadyState',
        (['in'], c_int, 'Value'),
        (['in'], c_int, 'SteadyStateOption'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetSectionCutSelectedForOutput',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cAnalysisResultsSetup implementation
# class cAnalysisResultsSetup_Impl(object):
#     def DeselectAllCasesAndCombosForOutput(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCaseSelectedForOutput(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetComboSelectedForOutput(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def GetOptionBaseReactLoc(self):
#         '-no docstring-'
#         #return GX, GY, GZ, pRetVal
#
#     def GetOptionBucklingMode(self):
#         '-no docstring-'
#         #return BuckModeStart, BuckModeEnd, BuckModeAll, pRetVal
#
#     def GetOptionDirectHist(self):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetOptionModalHist(self):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetOptionModeShape(self):
#         '-no docstring-'
#         #return ModeShapeStart, ModeShapeEnd, ModeShapesAll, pRetVal
#
#     def GetOptionMultiStepStatic(self):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetOptionMultiValuedCombo(self):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetOptionNLStatic(self):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetCaseSelectedForOutput(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboSelectedForOutput(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionBaseReactLoc(self, GX, GY, GZ):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionBucklingMode(self, BuckModeStart, BuckModeEnd, BuckModeAll):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionDirectHist(self, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionModalHist(self, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionModeShape(self, ModeShapeStart, ModeShapeEnd, ModeShapesAll):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionMultiStepStatic(self, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionMultiValuedCombo(self, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionNLStatic(self, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetOptionPSD(self):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def GetOptionSteadyState(self):
#         '-no docstring-'
#         #return Value, SteadyStateOption, pRetVal
#
#     def GetSectionCutSelectedForOutput(self, Name):
#         '-no docstring-'
#         #return Selected, pRetVal
#
#     def SelectAllSectionCutsForOutput(self, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionPSD(self, Value):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetOptionSteadyState(self, Value, SteadyStateOption):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSectionCutSelectedForOutput(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#

cPropSolid._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetProp',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'MatProp'),
        (['in', 'out'], POINTER(c_double), 'A'),
        (['in', 'out'], POINTER(c_double), 'B'),
        (['in', 'out'], POINTER(c_double), 'C'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'Incompatible'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(BSTR), 'Notes'),
        (['in', 'out'], POINTER(BSTR), 'GUID'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'SetProp',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'MatProp'),
        (['in'], c_double, 'A'),
        (['in'], c_double, 'B'),
        (['in'], c_double, 'C'),
        (['in'], VARIANT_BOOL, 'Incompatible'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], BSTR, 'Notes', ''),
        (['in', 'optional'], BSTR, 'GUID', ''),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cPropSolid implementation
# class cPropSolid_Impl(object):
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetProp(self, Name):
#         '-no docstring-'
#         #return MatProp, A, B, C, Incompatible, Color, Notes, GUID, pRetVal
#
#     def SetProp(self, Name, MatProp, A, B, C, Incompatible, Color, Notes, GUID):
#         '-no docstring-'
#         #return pRetVal
#


class cDStCanadian_S16_14(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{44C7E45C-4F49-4272-AE3E-56B532AA6E74}')
    _idlflags_ = ['dual', 'oleautomation']


cDStCanadian_S16_14._methods_ = [
]

################################################################
# code template for cDStCanadian_S16_14 implementation
# class cDStCanadian_S16_14_Impl(object):


class cDAlAA_2020(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{E04F11BF-0F74-4BD6-B7EB-75B2B118B926}')
    _idlflags_ = ['dual', 'oleautomation']


cDesignAluminum._methods_ = [
    COMMETHOD(
        [dispid(1), 'propget'],
        HRESULT,
        'AA_ASD_2000',
        (['out', 'retval'], POINTER(POINTER(cDAlAA_ASD_2000)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2), 'propget'],
        HRESULT,
        'AA_LRFD_2000',
        (['out', 'retval'], POINTER(POINTER(cDAlAA_LRFD_2000)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23), 'propget'],
        HRESULT,
        'AA_2015',
        (['out', 'retval'], POINTER(POINTER(cDAlAA_2015)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24), 'propget'],
        HRESULT,
        'AA_2020',
        (['out', 'retval'], POINTER(POINTER(cDAlAA_2020)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25), 'propget'],
        HRESULT,
        'Eurocode_9_2007',
        (['out', 'retval'], POINTER(POINTER(cDAlEurocode_9_2007)), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'DeleteResults',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetCode',
        (['in', 'out'], POINTER(BSTR), 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetComboAutoGenerate',
        (['in', 'out'], POINTER(VARIANT_BOOL), 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetComboDeflection',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetComboStrength',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'PropName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetGroup',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetResultsAvailable',
        (['out', 'retval'], POINTER(VARIANT_BOOL), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetSummaryResults',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'FrameName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Ratio'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'RatioType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Location'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ComboName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ErrorSummary'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'WarningSummary'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'ResetOverwrites',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'SetAutoSelectNull',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetCode',
        (['in'], BSTR, 'CodeName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'SetComboAutoGenerate',
        (['in'], VARIANT_BOOL, 'AutoGenerate'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'SetComboDeflection',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'SetComboStrength',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'SetDesignSection',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'PropName'),
        (['in'], VARIANT_BOOL, 'LastAnalysis'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'SetGroup',
        (['in'], BSTR, 'Name'),
        (['in'], VARIANT_BOOL, 'Selected'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'StartDesign',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'VerifyPassed',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(c_int), 'N1'),
        (['in', 'out'], POINTER(c_int), 'N2'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'VerifySections',
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDesignAluminum implementation
# class cDesignAluminum_Impl(object):
#     @property
#     def AA_ASD_2000(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AA_LRFD_2000(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AA_2015(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def AA_2020(self):
#         '-no docstring-'
#         #return pRetVal
#
#     @property
#     def Eurocode_9_2007(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def DeleteResults(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetCode(self):
#         '-no docstring-'
#         #return CodeName, pRetVal
#
#     def GetComboAutoGenerate(self):
#         '-no docstring-'
#         #return AutoGenerate, pRetVal
#
#     def GetComboDeflection(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetComboStrength(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetDesignSection(self, Name):
#         '-no docstring-'
#         #return PropName, pRetVal
#
#     def GetGroup(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#
#     def GetResultsAvailable(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetSummaryResults(self, Name, ItemType):
#         '-no docstring-'
#         #return NumberItems, FrameName, Ratio, RatioType, Location, ComboName, ErrorSummary, WarningSummary, pRetVal
#
#     def ResetOverwrites(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAutoSelectNull(self, Name, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCode(self, CodeName):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboAutoGenerate(self, AutoGenerate):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboDeflection(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetComboStrength(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetDesignSection(self, Name, PropName, LastAnalysis, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetGroup(self, Name, Selected):
#         '-no docstring-'
#         #return pRetVal
#
#     def StartDesign(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def VerifyPassed(self):
#         '-no docstring-'
#         #return NumberItems, N1, N2, MyName, pRetVal
#
#     def VerifySections(self):
#         '-no docstring-'
#         #return NumberItems, MyName, pRetVal
#

cDCoACI318_19._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoACI318_19 implementation
# class cDCoACI318_19_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDStNewZealand_NZS3404_97._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStNewZealand_NZS3404_97 implementation
# class cDStNewZealand_NZS3404_97_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cScheduler._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Add',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetLoadCaseList',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberLoadCases'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyLoadCase'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetScheduleData',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberTasks'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetScheduleParameters',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'Unloading'),
        (['in', 'out'], POINTER(BSTR), 'GeoNonLin'),
        (['in', 'out'], POINTER(c_int), 'MaxTotal'),
        (['in', 'out'], POINTER(c_int), 'MaxNull'),
        (['in', 'out'], POINTER(c_int), 'MaxIterCS'),
        (['in', 'out'], POINTER(c_int), 'MaxIterNR'),
        (['in', 'out'], POINTER(c_double), 'ItConvTol'),
        (['in', 'out'], POINTER(BSTR), 'UseEvStep'),
        (['in', 'out'], POINTER(c_double), 'EvLumpTol'),
        (['in', 'out'], POINTER(c_int), 'LSPerIter'),
        (['in', 'out'], POINTER(c_double), 'LSTol'),
        (['in', 'out'], POINTER(c_double), 'LSStepFact'),
        (['in', 'out'], POINTER(BSTR), 'StageSave'),
        (['in', 'out'], POINTER(c_int), 'StageMinIns'),
        (['in', 'out'], POINTER(c_int), 'StageMinTD'),
        (['in', 'out'], POINTER(BSTR), 'TimeDepMat'),
        (['in', 'out'], POINTER(c_int), 'TFMaxIter'),
        (['in', 'out'], POINTER(c_double), 'TFTol'),
        (['in', 'out'], POINTER(c_double), 'TFAccelFact'),
        (['in', 'out'], POINTER(BSTR), 'TFNoStop'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'SetScheduleData',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberTasks'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetScheduleParameters',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'Unloading'),
        (['in'], BSTR, 'GeoNonLin'),
        (['in'], c_int, 'MaxTotal'),
        (['in'], c_int, 'MaxNull'),
        (['in'], c_int, 'MaxIterCS'),
        (['in'], c_int, 'MaxIterNR'),
        (['in'], c_double, 'ItConvTol'),
        (['in'], BSTR, 'UseEvStep'),
        (['in'], c_double, 'EvLumpTol'),
        (['in'], c_int, 'LSPerIter'),
        (['in'], c_double, 'LSTol'),
        (['in'], c_double, 'LSStepFact'),
        (['in'], BSTR, 'StageSave'),
        (['in'], c_int, 'StageMinIns'),
        (['in'], c_int, 'StageMinTD'),
        (['in'], BSTR, 'TimeDepMat'),
        (['in'], c_int, 'TFMaxIter'),
        (['in'], c_double, 'TFTol'),
        (['in'], c_double, 'TFAccelFact'),
        (['in'], BSTR, 'TFNoStop'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetScheduleData_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberTasks'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'SetScheduleData_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberTasks'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Expanded'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'IndentLevel'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'TaskName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Duration'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'CompletionDate'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Dependencies'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'operation'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'IncludeSW'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Details'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Age'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'LoadName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'LoadSF'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'Solve'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(VARIANT_BOOL)), 'SaveStiffness'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'OutputID'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ItemName'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'Notes'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cScheduler implementation
# class cScheduler_Impl(object):
#     def Add(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetLoadCaseList(self, Name):
#         '-no docstring-'
#         #return NumberLoadCases, MyLoadCase, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetScheduleData(self, Name):
#         '-no docstring-'
#         #return NumberTasks, Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
#
#     def GetScheduleParameters(self, Name):
#         '-no docstring-'
#         #return Unloading, GeoNonLin, MaxTotal, MaxNull, MaxIterCS, MaxIterNR, ItConvTol, UseEvStep, EvLumpTol, LSPerIter, LSTol, LSStepFact, StageSave, StageMinIns, StageMinTD, TimeDepMat, TFMaxIter, TFTol, TFAccelFact, TFNoStop, pRetVal
#
#     def SetScheduleData(self, Name, NumberTasks):
#         '-no docstring-'
#         #return Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
#
#     def SetScheduleParameters(self, Name, Unloading, GeoNonLin, MaxTotal, MaxNull, MaxIterCS, MaxIterNR, ItConvTol, UseEvStep, EvLumpTol, LSPerIter, LSTol, LSStepFact, StageSave, StageMinIns, StageMinTD, TimeDepMat, TFMaxIter, TFTol, TFAccelFact, TFNoStop):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetScheduleData_1(self, Name):
#         '-no docstring-'
#         #return NumberTasks, Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
#
#     def SetScheduleData_1(self, Name, NumberTasks):
#         '-no docstring-'
#         #return Expanded, IndentLevel, TaskName, Duration, CompletionDate, Dependencies, operation, IncludeSW, ObjectType, ObjectName, Details, Age, LoadType, LoadName, LoadSF, Solve, SaveStiffness, OutputID, ItemType, ItemName, Notes, pRetVal
#

cDCoChinese_2010._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDCoChinese_2010 implementation
# class cDCoChinese_2010_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cFunctionRS._methods_ = [
    COMMETHOD(
        [dispid(57)],
        HRESULT,
        'GetNTC2008',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ParamsOption'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(c_int), 'Island'),
        (['in', 'out'], POINTER(c_int), 'LimitState'),
        (['in', 'out'], POINTER(c_int), 'UsageClass'),
        (['in', 'out'], POINTER(c_double), 'NomLife'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'F0'),
        (['in', 'out'], POINTER(c_double), 'Tcs'),
        (['in', 'out'], POINTER(c_int), 'SpecType'),
        (['in', 'out'], POINTER(c_int), 'SoilType'),
        (['in', 'out'], POINTER(c_int), 'Topography'),
        (['in', 'out'], POINTER(c_double), 'hRatio'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(58)],
        HRESULT,
        'SetNTC2008',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ParamsOption'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], c_int, 'Island'),
        (['in'], c_int, 'LimitState'),
        (['in'], c_int, 'UsageClass'),
        (['in'], c_double, 'NomLife'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'F0'),
        (['in'], c_double, 'Tcs'),
        (['in'], c_int, 'SpecType'),
        (['in'], c_int, 'SoilType'),
        (['in'], c_int, 'Topography'),
        (['in'], c_double, 'hRatio'),
        (['in'], c_double, 'Damping'),
        (['in'], c_double, 'q'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'GetAS11702007',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'AS2007SiteClass'),
        (['in', 'out'], POINTER(c_double), 'AS2007Kp'),
        (['in', 'out'], POINTER(c_double), 'AS2007Z'),
        (['in', 'out'], POINTER(c_double), 'AS2007Sp'),
        (['in', 'out'], POINTER(c_double), 'AS2007Mu'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'GetBOCA96',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'BOCA96Aa'),
        (['in', 'out'], POINTER(c_double), 'BOCA96Av'),
        (['in', 'out'], POINTER(c_double), 'BOCA96S'),
        (['in', 'out'], POINTER(c_double), 'BOCA96R'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetChinese2010',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax'),
        (['in', 'out'], POINTER(c_int), 'JGJ32002SI'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002Tg'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002PTDF'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(63)],
        HRESULT,
        'GetCJJ1662011',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Direction'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'Tg'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetEuroCode8',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'EuroCode8Ag'),
        (['in', 'out'], POINTER(c_int), 'EuroCode8S'),
        (['in', 'out'], POINTER(c_double), 'EuroCode8N'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'GetEurocode82004',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'EURO2004GroundType'),
        (['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Ag'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Beta'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Q'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(11)],
        HRESULT,
        'GetEurocode82004_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'EURO2004Country'),
        (['in', 'out'], POINTER(c_int), 'EURO2004Direction'),
        (['in', 'out'], POINTER(c_int), 'EURO2004SpectrumType'),
        (['in', 'out'], POINTER(c_int), 'EURO2004GroundType'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Ag'),
        (['in', 'out'], POINTER(c_double), 'EURO2004S'),
        (['in', 'out'], POINTER(c_double), 'EURO2004AvgOverAg'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Tb'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Tc'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Td'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Beta'),
        (['in', 'out'], POINTER(c_double), 'EURO2004Q'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(12)],
        HRESULT,
        'GetFromFile',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(BSTR), 'FileName'),
        (['in', 'out'], POINTER(c_int), 'HeadLines'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['in', 'out'], POINTER(c_int), 'ValueType'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(13)],
        HRESULT,
        'GetIBC2003',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(14)],
        HRESULT,
        'GetIBC2006',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'IBC2006Option'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(BSTR), 'ZipCode'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Tl'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(51)],
        HRESULT,
        'GetIBC2009',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'IBC2009Option'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(BSTR), 'ZipCode'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Tl'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(52)],
        HRESULT,
        'GetIBC2012',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'IBC2012Option'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(BSTR), 'ZipCode'),
        (['in', 'out'], POINTER(c_double), 'Ss'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'Tl'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(15)],
        HRESULT,
        'GetIS18932002',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'INZ'),
        (['in', 'out'], POINTER(c_int), 'INS'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(16)],
        HRESULT,
        'GetItalian3274',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'ItalAg'),
        (['in', 'out'], POINTER(c_int), 'ItalSoilType'),
        (['in', 'out'], POINTER(c_double), 'ItalQ'),
        (['in', 'out'], POINTER(c_double), 'ItalLevel'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(61)],
        HRESULT,
        'GetJTGB022013',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Direction'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'Tg'),
        (['in', 'out'], POINTER(c_double), 'Ci'),
        (['in', 'out'], POINTER(c_double), 'Cs'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(73)],
        HRESULT,
        'GetJTGT2231012020',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'Tg'),
        (['in', 'out'], POINTER(c_double), 'Ci'),
        (['in', 'out'], POINTER(c_double), 'Cs'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(17)],
        HRESULT,
        'GetNBCC2005',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'PGA'),
        (['in', 'out'], POINTER(c_double), 'S02'),
        (['in', 'out'], POINTER(c_double), 'S05'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'S2'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(65)],
        HRESULT,
        'GetNBCC2010',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'PGA'),
        (['in', 'out'], POINTER(c_double), 'S02'),
        (['in', 'out'], POINTER(c_double), 'S05'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'S2'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'Fa'),
        (['in', 'out'], POINTER(c_double), 'Fv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(66)],
        HRESULT,
        'GetNBCC2015',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'PGA'),
        (['in', 'out'], POINTER(c_double), 'S02'),
        (['in', 'out'], POINTER(c_double), 'S05'),
        (['in', 'out'], POINTER(c_double), 'S1'),
        (['in', 'out'], POINTER(c_double), 'S2'),
        (['in', 'out'], POINTER(c_double), 'S5'),
        (['in', 'out'], POINTER(c_double), 'S10'),
        (['in', 'out'], POINTER(c_int), 'SiteClass'),
        (['in', 'out'], POINTER(c_double), 'F02'),
        (['in', 'out'], POINTER(c_double), 'F05'),
        (['in', 'out'], POINTER(c_double), 'F1'),
        (['in', 'out'], POINTER(c_double), 'F2'),
        (['in', 'out'], POINTER(c_double), 'F5'),
        (['in', 'out'], POINTER(c_double), 'F10'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(18)],
        HRESULT,
        'GetNBCC95',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'Zvr'),
        (['in', 'out'], POINTER(c_int), 'Za'),
        (['in', 'out'], POINTER(c_int), 'Zv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(20)],
        HRESULT,
        'GetNEHRP97',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97Ss'),
        (['in', 'out'], POINTER(c_double), 'NEHRP97S1'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(21)],
        HRESULT,
        'GetNZS11702004',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NZS2004SiteClass'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Z'),
        (['in', 'out'], POINTER(c_double), 'NZS2004R'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Dist'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(71)],
        HRESULT,
        'GetNZS11702004_1',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NZS2004SpectrumType'),
        (['in', 'out'], POINTER(c_int), 'NZS2004SiteClass'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Z'),
        (['in', 'out'], POINTER(c_double), 'NZS2004R'),
        (['in', 'out'], POINTER(c_double), 'NZS2004Dist'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NZS2004ConsiderTSite'),
        (['in', 'out'], POINTER(c_double), 'NZS2004TSite'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(22)],
        HRESULT,
        'GetNZS42031992',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'NZS4203SF'),
        (['in', 'out'], POINTER(c_int), 'NZS4203S'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(59)],
        HRESULT,
        'GetSP14133302014',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Direction'),
        (['in', 'out'], POINTER(c_int), 'Seismicity'),
        (['in', 'out'], POINTER(c_int), 'SoilCat'),
        (['in', 'out'], POINTER(c_double), 'K0Factor'),
        (['in', 'out'], POINTER(c_double), 'K1Factor'),
        (['in', 'out'], POINTER(c_double), 'KPsiFactor'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'NonlinearSoil'),
        (['in', 'out'], POINTER(c_double), 'ASoil'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(23)],
        HRESULT,
        'GetUBC94',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'UBC94Z'),
        (['in', 'out'], POINTER(c_int), 'UBC94S'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(24)],
        HRESULT,
        'GetUBC97',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'UBC97Ca'),
        (['in', 'out'], POINTER(c_double), 'UBC97Cv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(25)],
        HRESULT,
        'GetUser',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(28)],
        HRESULT,
        'SetAS11702007',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'AS2007SiteClass'),
        (['in'], c_double, 'AS2007Kp'),
        (['in'], c_double, 'AS2007Z'),
        (['in'], c_double, 'AS2007Sp'),
        (['in'], c_double, 'AS2007Mu'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(29)],
        HRESULT,
        'SetBOCA96',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'BOCA96Aa'),
        (['in'], c_double, 'BOCA96Av'),
        (['in'], c_double, 'BOCA96S'),
        (['in'], c_double, 'BOCA96R'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(30)],
        HRESULT,
        'SetChinese2002',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'JGJ32002AlphaMax'),
        (['in'], c_int, 'JGJ32002SI'),
        (['in'], c_double, 'JGJ32002Tg'),
        (['in'], c_double, 'JGJ32002PTDF'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(31)],
        HRESULT,
        'SetChinese2010',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'JGJ32002AlphaMax'),
        (['in'], c_int, 'JGJ32002SI'),
        (['in'], c_double, 'JGJ32002Tg'),
        (['in'], c_double, 'JGJ32002PTDF'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(64)],
        HRESULT,
        'SetCJJ1662011',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Direction'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'Tg'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(34)],
        HRESULT,
        'SetEuroCode8',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'EuroCode8Ag'),
        (['in'], c_int, 'EuroCode8S'),
        (['in'], c_double, 'EuroCode8N'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(35)],
        HRESULT,
        'SetEurocode82004',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'EURO2004GroundType'),
        (['in'], c_int, 'EURO2004SpectrumType'),
        (['in'], c_double, 'EURO2004Ag'),
        (['in'], c_double, 'EURO2004Beta'),
        (['in'], c_double, 'EURO2004Q'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(36)],
        HRESULT,
        'SetEurocode82004_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'EURO2004Country'),
        (['in'], c_int, 'EURO2004Direction'),
        (['in'], c_int, 'EURO2004SpectrumType'),
        (['in'], c_int, 'EURO2004GroundType'),
        (['in'], c_double, 'EURO2004Ag'),
        (['in'], c_double, 'EURO2004S'),
        (['in'], c_double, 'EURO2004AvgOverAg'),
        (['in'], c_double, 'EURO2004Tb'),
        (['in'], c_double, 'EURO2004Tc'),
        (['in'], c_double, 'EURO2004Td'),
        (['in'], c_double, 'EURO2004Beta'),
        (['in'], c_double, 'EURO2004Q'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(37)],
        HRESULT,
        'SetFromFile',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'FileName'),
        (['in'], c_int, 'HeadLines'),
        (['in'], c_double, 'DampRatio'),
        (['in', 'optional'], c_int, 'ValueType', 2),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(38)],
        HRESULT,
        'SetIBC2003',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(39)],
        HRESULT,
        'SetIBC2006',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'IBC2006Option'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], BSTR, 'ZipCode'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Tl'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(53)],
        HRESULT,
        'SetIBC2009',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'IBC2009Option'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], BSTR, 'ZipCode'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Tl'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(54)],
        HRESULT,
        'SetIBC2012',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'IBC2012Option'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], BSTR, 'ZipCode'),
        (['in'], c_double, 'Ss'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'Tl'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(40)],
        HRESULT,
        'SetIS18932002',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'INZ'),
        (['in'], c_int, 'INS'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(41)],
        HRESULT,
        'SetItalian3274',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'ItalAg'),
        (['in'], c_int, 'ItalSoilType'),
        (['in'], c_double, 'ItalQ'),
        (['in'], c_double, 'ItalLevel'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(62)],
        HRESULT,
        'SetJTGB022013',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Direction'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'Tg'),
        (['in'], c_double, 'Ci'),
        (['in'], c_double, 'Cs'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(74)],
        HRESULT,
        'SetJTGT2231012020',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'Tg'),
        (['in'], c_double, 'Ci'),
        (['in'], c_double, 'Cs'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(42)],
        HRESULT,
        'SetNBCC2005',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'PGA'),
        (['in'], c_double, 'S02'),
        (['in'], c_double, 'S05'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'S2'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(67)],
        HRESULT,
        'SetNBCC2010',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'PGA'),
        (['in'], c_double, 'S02'),
        (['in'], c_double, 'S05'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'S2'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'Fa'),
        (['in'], c_double, 'Fv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(68)],
        HRESULT,
        'SetNBCC2015',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'PGA'),
        (['in'], c_double, 'S02'),
        (['in'], c_double, 'S05'),
        (['in'], c_double, 'S1'),
        (['in'], c_double, 'S2'),
        (['in'], c_double, 'S5'),
        (['in'], c_double, 'S10'),
        (['in'], c_int, 'SiteClass'),
        (['in'], c_double, 'F02'),
        (['in'], c_double, 'F05'),
        (['in'], c_double, 'F1'),
        (['in'], c_double, 'F2'),
        (['in'], c_double, 'F5'),
        (['in'], c_double, 'F10'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(43)],
        HRESULT,
        'SetNBCC95',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'Zvr'),
        (['in'], c_int, 'Za'),
        (['in'], c_int, 'Zv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(45)],
        HRESULT,
        'SetNEHRP97',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'NEHRP97Ss'),
        (['in'], c_double, 'NEHRP97S1'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(46)],
        HRESULT,
        'SetNZS11702004',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NZS2004SiteClass'),
        (['in'], c_double, 'NZS2004Z'),
        (['in'], c_double, 'NZS2004R'),
        (['in'], c_double, 'NZS2004Dist'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(72)],
        HRESULT,
        'SetNZS11702004_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NZS2004SpectrumType'),
        (['in'], c_int, 'NZS2004SiteClass'),
        (['in'], c_double, 'NZS2004Z'),
        (['in'], c_double, 'NZS2004R'),
        (['in'], c_double, 'NZS2004Dist'),
        (['in'], VARIANT_BOOL, 'NZS2004ConsiderTSite'),
        (['in'], c_double, 'NZS2004TSite'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(47)],
        HRESULT,
        'SetNZS42031992',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'NZS4203SF'),
        (['in'], c_int, 'NZS4203S'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(60)],
        HRESULT,
        'SetSP14133302014',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Direction'),
        (['in'], c_int, 'Seismicity'),
        (['in'], c_int, 'SoilCat'),
        (['in'], c_double, 'K0Factor'),
        (['in'], c_double, 'K1Factor'),
        (['in'], c_double, 'KPsiFactor'),
        (['in'], VARIANT_BOOL, 'NonlinearSoil'),
        (['in'], c_double, 'ASoil'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(48)],
        HRESULT,
        'SetUBC94',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'UBC94Z'),
        (['in'], c_int, 'UBC94S'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(49)],
        HRESULT,
        'SetUBC97',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'UBC97Ca'),
        (['in'], c_double, 'UBC97Cv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(50)],
        HRESULT,
        'SetUser',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Period'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_double)), 'Value'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetAASHTO2006',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2006A'),
        (['in', 'out'], POINTER(c_int), 'AASHTO2006SoilProfileType'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetAASHTO2007',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'AASHTO2007Option'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007Latitude'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007Longitude'),
        (['in', 'out'], POINTER(BSTR), 'AASHTO2007ZipCode'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007Ss'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007S1'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007PGA'),
        (['in', 'out'], POINTER(c_int), 'AASHTO2007SiteClass'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007Fa'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007Fv'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2007FPGA'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(55)],
        HRESULT,
        'GetAASHTO2012',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'AASHTO2012Option'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012Latitude'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012Longitude'),
        (['in', 'out'], POINTER(BSTR), 'AASHTO2012ZipCode'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012Ss'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012S1'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012PGA'),
        (['in', 'out'], POINTER(c_int), 'AASHTO2012SiteClass'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012Fa'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012Fv'),
        (['in', 'out'], POINTER(c_double), 'AASHTO2012FPGA'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetChinese2002',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002AlphaMax'),
        (['in', 'out'], POINTER(c_int), 'JGJ32002SI'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002Tg'),
        (['in', 'out'], POINTER(c_double), 'JGJ32002PTDF'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(7)],
        HRESULT,
        'GetChineseGB501112006',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'GB501112006A'),
        (['in', 'out'], POINTER(c_int), 'GB501112006SI'),
        (['in', 'out'], POINTER(c_double), 'GB501112006Tg'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(8)],
        HRESULT,
        'GetChineseJTGTB02012008',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_double), 'JTGTB02012008A'),
        (['in', 'out'], POINTER(c_int), 'JTGTB02012008SI'),
        (['in', 'out'], POINTER(c_double), 'JTGTB02012008Tg'),
        (['in', 'out'], POINTER(c_double), 'JTGTB02012008Ci'),
        (['in', 'out'], POINTER(c_double), 'JTGTB02012008Cs'),
        (['in', 'out'], POINTER(c_double), 'JTGTB02012008Dir'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(19)],
        HRESULT,
        'GetNCHRP2007',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NCHRP2007Option'),
        (['in', 'out'], POINTER(c_double), 'NCHRP2007Latitude'),
        (['in', 'out'], POINTER(c_double), 'NCHRP2007Longitude'),
        (['in', 'out'], POINTER(BSTR), 'NCHRP2007ZipCode'),
        (['in', 'out'], POINTER(c_double), 'NCHRP2007SS'),
        (['in', 'out'], POINTER(c_double), 'NCHRP2007S1'),
        (['in', 'out'], POINTER(c_int), 'NCHRP2007SiteClass'),
        (['in', 'out'], POINTER(c_double), 'NCHRP2007Fa'),
        (['in', 'out'], POINTER(c_double), 'NCHRP2007Fv'),
        (['in', 'out'], POINTER(c_double), 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(26)],
        HRESULT,
        'SetAASHTO2006',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'AASHTO2006A'),
        (['in'], c_int, 'AASHTO2006SoilProfileType'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(27)],
        HRESULT,
        'SetAASHTO2007',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'AASHTO2007Option'),
        (['in'], c_double, 'AASHTO2007Latitude'),
        (['in'], c_double, 'AASHTO2007Longitude'),
        (['in'], BSTR, 'AASHTO2007ZipCode'),
        (['in'], c_double, 'AASHTO2007Ss'),
        (['in'], c_double, 'AASHTO2007S1'),
        (['in'], c_double, 'AASHTO2007PGA'),
        (['in'], c_int, 'AASHTO2007SiteClass'),
        (['in'], c_double, 'AASHTO2007Fa'),
        (['in'], c_double, 'AASHTO2007Fv'),
        (['in'], c_double, 'AASHTO2007FPGA'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(56)],
        HRESULT,
        'SetAASHTO2012',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'AASHTO2012Option'),
        (['in'], c_double, 'AASHTO2012Latitude'),
        (['in'], c_double, 'AASHTO2012Longitude'),
        (['in'], BSTR, 'AASHTO2012ZipCode'),
        (['in'], c_double, 'AASHTO2012Ss'),
        (['in'], c_double, 'AASHTO2012S1'),
        (['in'], c_double, 'AASHTO2012PGA'),
        (['in'], c_int, 'AASHTO2012SiteClass'),
        (['in'], c_double, 'AASHTO2012Fa'),
        (['in'], c_double, 'AASHTO2012Fv'),
        (['in'], c_double, 'AASHTO2012FPGA'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(32)],
        HRESULT,
        'SetChineseGB501112006',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'GB501112006A'),
        (['in'], c_int, 'GB501112006SI'),
        (['in'], c_double, 'GB501112006Tg'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(33)],
        HRESULT,
        'SetChineseJTGTB02012008',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'JTGTB02012008A'),
        (['in'], c_int, 'JTGTB02012008SI'),
        (['in'], c_double, 'JTGTB02012008Tg'),
        (['in'], c_double, 'JTGTB02012008Ci'),
        (['in'], c_double, 'JTGTB02012008Cs'),
        (['in'], c_double, 'JTGTB02012008Dir'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(44)],
        HRESULT,
        'SetNCHRP2007',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'NCHRP2007Option'),
        (['in'], c_double, 'NCHRP2007Latitude'),
        (['in'], c_double, 'NCHRP2007Longitude'),
        (['in'], BSTR, 'NCHRP2007ZipCode'),
        (['in'], c_double, 'NCHRP2007SS'),
        (['in'], c_double, 'NCHRP2007S1'),
        (['in'], c_int, 'NCHRP2007SiteClass'),
        (['in'], c_double, 'NCHRP2007Fa'),
        (['in'], c_double, 'NCHRP2007Fv'),
        (['in'], c_double, 'DampRatio'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(69)],
        HRESULT,
        'GetNTC2018',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'ParamsOption'),
        (['in', 'out'], POINTER(c_double), 'Latitude'),
        (['in', 'out'], POINTER(c_double), 'Longitude'),
        (['in', 'out'], POINTER(c_int), 'Island'),
        (['in', 'out'], POINTER(c_int), 'LimitState'),
        (['in', 'out'], POINTER(c_int), 'UsageClass'),
        (['in', 'out'], POINTER(c_double), 'NomLife'),
        (['in', 'out'], POINTER(c_double), 'PeakAccel'),
        (['in', 'out'], POINTER(c_double), 'F0'),
        (['in', 'out'], POINTER(c_double), 'Tcs'),
        (['in', 'out'], POINTER(c_int), 'SpecType'),
        (['in', 'out'], POINTER(c_int), 'SoilType'),
        (['in', 'out'], POINTER(c_int), 'Topography'),
        (['in', 'out'], POINTER(c_double), 'hRatio'),
        (['in', 'out'], POINTER(c_double), 'Damping'),
        (['in', 'out'], POINTER(c_double), 'q'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(70)],
        HRESULT,
        'SetNTC2018',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'ParamsOption'),
        (['in'], c_double, 'Latitude'),
        (['in'], c_double, 'Longitude'),
        (['in'], c_int, 'Island'),
        (['in'], c_int, 'LimitState'),
        (['in'], c_int, 'UsageClass'),
        (['in'], c_double, 'NomLife'),
        (['in'], c_double, 'PeakAccel'),
        (['in'], c_double, 'F0'),
        (['in'], c_double, 'Tcs'),
        (['in'], c_int, 'SpecType'),
        (['in'], c_int, 'SoilType'),
        (['in'], c_int, 'Topography'),
        (['in'], c_double, 'hRatio'),
        (['in'], c_double, 'Damping'),
        (['in'], c_double, 'q'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cFunctionRS implementation
# class cFunctionRS_Impl(object):
#     def GetNTC2008(self, Name):
#         '-no docstring-'
#         #return ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, pRetVal
#
#     def SetNTC2008(self, Name, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAS11702007(self, Name):
#         '-no docstring-'
#         #return AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu, DampRatio, pRetVal
#
#     def GetBOCA96(self, Name):
#         '-no docstring-'
#         #return BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R, DampRatio, pRetVal
#
#     def GetChinese2010(self, Name):
#         '-no docstring-'
#         #return JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio, pRetVal
#
#     def GetCJJ1662011(self, Name):
#         '-no docstring-'
#         #return Direction, PeakAccel, Tg, DampRatio, pRetVal
#
#     def GetEuroCode8(self, Name):
#         '-no docstring-'
#         #return EuroCode8Ag, EuroCode8S, EuroCode8N, DampRatio, pRetVal
#
#     def GetEurocode82004(self, Name):
#         '-no docstring-'
#         #return EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, DampRatio, pRetVal
#
#     def GetEurocode82004_1(self, Name):
#         '-no docstring-'
#         #return EURO2004Country, EURO2004Direction, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004AvgOverAg, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, DampRatio, pRetVal
#
#     def GetFromFile(self, Name):
#         '-no docstring-'
#         #return FileName, HeadLines, DampRatio, ValueType, pRetVal
#
#     def GetIBC2003(self, Name):
#         '-no docstring-'
#         #return Ss, S1, DampRatio, pRetVal
#
#     def GetIBC2006(self, Name):
#         '-no docstring-'
#         #return IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio, pRetVal
#
#     def GetIBC2009(self, Name):
#         '-no docstring-'
#         #return IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio, pRetVal
#
#     def GetIBC2012(self, Name):
#         '-no docstring-'
#         #return IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio, pRetVal
#
#     def GetIS18932002(self, Name):
#         '-no docstring-'
#         #return INZ, INS, DampRatio, pRetVal
#
#     def GetItalian3274(self, Name):
#         '-no docstring-'
#         #return ItalAg, ItalSoilType, ItalQ, ItalLevel, DampRatio, pRetVal
#
#     def GetJTGB022013(self, Name):
#         '-no docstring-'
#         #return Direction, PeakAccel, Tg, Ci, Cs, DampRatio, pRetVal
#
#     def GetJTGT2231012020(self, Name):
#         '-no docstring-'
#         #return PeakAccel, Tg, Ci, Cs, DampRatio, pRetVal
#
#     def GetNBCC2005(self, Name):
#         '-no docstring-'
#         #return PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio, pRetVal
#
#     def GetNBCC2010(self, Name):
#         '-no docstring-'
#         #return PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio, pRetVal
#
#     def GetNBCC2015(self, Name):
#         '-no docstring-'
#         #return PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, DampRatio, pRetVal
#
#     def GetNBCC95(self, Name):
#         '-no docstring-'
#         #return Zvr, Za, Zv, DampRatio, pRetVal
#
#     def GetNEHRP97(self, Name):
#         '-no docstring-'
#         #return NEHRP97Ss, NEHRP97S1, DampRatio, pRetVal
#
#     def GetNZS11702004(self, Name):
#         '-no docstring-'
#         #return NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, DampRatio, pRetVal
#
#     def GetNZS11702004_1(self, Name):
#         '-no docstring-'
#         #return NZS2004SpectrumType, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004ConsiderTSite, NZS2004TSite, DampRatio, pRetVal
#
#     def GetNZS42031992(self, Name):
#         '-no docstring-'
#         #return NZS4203SF, NZS4203S, DampRatio, pRetVal
#
#     def GetSP14133302014(self, Name):
#         '-no docstring-'
#         #return Direction, Seismicity, SoilCat, K0Factor, K1Factor, KPsiFactor, NonlinearSoil, ASoil, DampRatio, pRetVal
#
#     def GetUBC94(self, Name):
#         '-no docstring-'
#         #return UBC94Z, UBC94S, DampRatio, pRetVal
#
#     def GetUBC97(self, Name):
#         '-no docstring-'
#         #return UBC97Ca, UBC97Cv, DampRatio, pRetVal
#
#     def GetUser(self, Name):
#         '-no docstring-'
#         #return NumberItems, Period, Value, DampRatio, pRetVal
#
#     def SetAS11702007(self, Name, AS2007SiteClass, AS2007Kp, AS2007Z, AS2007Sp, AS2007Mu, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetBOCA96(self, Name, BOCA96Aa, BOCA96Av, BOCA96S, BOCA96R, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2002(self, Name, JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChinese2010(self, Name, JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetCJJ1662011(self, Name, Direction, PeakAccel, Tg, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEuroCode8(self, Name, EuroCode8Ag, EuroCode8S, EuroCode8N, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEurocode82004(self, Name, EURO2004GroundType, EURO2004SpectrumType, EURO2004Ag, EURO2004Beta, EURO2004Q, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetEurocode82004_1(self, Name, EURO2004Country, EURO2004Direction, EURO2004SpectrumType, EURO2004GroundType, EURO2004Ag, EURO2004S, EURO2004AvgOverAg, EURO2004Tb, EURO2004Tc, EURO2004Td, EURO2004Beta, EURO2004Q, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetFromFile(self, Name, FileName, HeadLines, DampRatio, ValueType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIBC2003(self, Name, Ss, S1, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIBC2006(self, Name, IBC2006Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIBC2009(self, Name, IBC2009Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIBC2012(self, Name, IBC2012Option, Latitude, Longitude, ZipCode, Ss, S1, Tl, SiteClass, Fa, Fv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetIS18932002(self, Name, INZ, INS, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetItalian3274(self, Name, ItalAg, ItalSoilType, ItalQ, ItalLevel, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetJTGB022013(self, Name, Direction, PeakAccel, Tg, Ci, Cs, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetJTGT2231012020(self, Name, PeakAccel, Tg, Ci, Cs, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2005(self, Name, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2010(self, Name, PGA, S02, S05, S1, S2, SiteClass, Fa, Fv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC2015(self, Name, PGA, S02, S05, S1, S2, S5, S10, SiteClass, F02, F05, F1, F2, F5, F10, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNBCC95(self, Name, Zvr, Za, Zv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNEHRP97(self, Name, NEHRP97Ss, NEHRP97S1, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNZS11702004(self, Name, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNZS11702004_1(self, Name, NZS2004SpectrumType, NZS2004SiteClass, NZS2004Z, NZS2004R, NZS2004Dist, NZS2004ConsiderTSite, NZS2004TSite, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNZS42031992(self, Name, NZS4203SF, NZS4203S, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetSP14133302014(self, Name, Direction, Seismicity, SoilCat, K0Factor, K1Factor, KPsiFactor, NonlinearSoil, ASoil, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC94(self, Name, UBC94Z, UBC94S, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUBC97(self, Name, UBC97Ca, UBC97Cv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetUser(self, Name, NumberItems, DampRatio):
#         '-no docstring-'
#         #return Period, Value, pRetVal
#
#     def GetAASHTO2006(self, Name):
#         '-no docstring-'
#         #return AASHTO2006A, AASHTO2006SoilProfileType, DampRatio, pRetVal
#
#     def GetAASHTO2007(self, Name):
#         '-no docstring-'
#         #return AASHTO2007Option, AASHTO2007Latitude, AASHTO2007Longitude, AASHTO2007ZipCode, AASHTO2007Ss, AASHTO2007S1, AASHTO2007PGA, AASHTO2007SiteClass, AASHTO2007Fa, AASHTO2007Fv, AASHTO2007FPGA, DampRatio, pRetVal
#
#     def GetAASHTO2012(self, Name):
#         '-no docstring-'
#         #return AASHTO2012Option, AASHTO2012Latitude, AASHTO2012Longitude, AASHTO2012ZipCode, AASHTO2012Ss, AASHTO2012S1, AASHTO2012PGA, AASHTO2012SiteClass, AASHTO2012Fa, AASHTO2012Fv, AASHTO2012FPGA, DampRatio, pRetVal
#
#     def GetChinese2002(self, Name):
#         '-no docstring-'
#         #return JGJ32002AlphaMax, JGJ32002SI, JGJ32002Tg, JGJ32002PTDF, DampRatio, pRetVal
#
#     def GetChineseGB501112006(self, Name):
#         '-no docstring-'
#         #return GB501112006A, GB501112006SI, GB501112006Tg, DampRatio, pRetVal
#
#     def GetChineseJTGTB02012008(self, Name):
#         '-no docstring-'
#         #return JTGTB02012008A, JTGTB02012008SI, JTGTB02012008Tg, JTGTB02012008Ci, JTGTB02012008Cs, JTGTB02012008Dir, DampRatio, pRetVal
#
#     def GetNCHRP2007(self, Name):
#         '-no docstring-'
#         #return NCHRP2007Option, NCHRP2007Latitude, NCHRP2007Longitude, NCHRP2007ZipCode, NCHRP2007SS, NCHRP2007S1, NCHRP2007SiteClass, NCHRP2007Fa, NCHRP2007Fv, DampRatio, pRetVal
#
#     def SetAASHTO2006(self, Name, AASHTO2006A, AASHTO2006SoilProfileType, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAASHTO2007(self, Name, AASHTO2007Option, AASHTO2007Latitude, AASHTO2007Longitude, AASHTO2007ZipCode, AASHTO2007Ss, AASHTO2007S1, AASHTO2007PGA, AASHTO2007SiteClass, AASHTO2007Fa, AASHTO2007Fv, AASHTO2007FPGA, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetAASHTO2012(self, Name, AASHTO2012Option, AASHTO2012Latitude, AASHTO2012Longitude, AASHTO2012ZipCode, AASHTO2012Ss, AASHTO2012S1, AASHTO2012PGA, AASHTO2012SiteClass, AASHTO2012Fa, AASHTO2012Fv, AASHTO2012FPGA, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChineseGB501112006(self, Name, GB501112006A, GB501112006SI, GB501112006Tg, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetChineseJTGTB02012008(self, Name, JTGTB02012008A, JTGTB02012008SI, JTGTB02012008Tg, JTGTB02012008Ci, JTGTB02012008Cs, JTGTB02012008Dir, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetNCHRP2007(self, Name, NCHRP2007Option, NCHRP2007Latitude, NCHRP2007Longitude, NCHRP2007ZipCode, NCHRP2007SS, NCHRP2007S1, NCHRP2007SiteClass, NCHRP2007Fa, NCHRP2007Fv, DampRatio):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetNTC2018(self, Name):
#         '-no docstring-'
#         #return ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q, pRetVal
#
#     def SetNTC2018(self, Name, ParamsOption, Latitude, Longitude, Island, LimitState, UsageClass, NomLife, PeakAccel, F0, Tcs, SpecType, SoilType, Topography, hRatio, Damping, q):
#         '-no docstring-'
#         #return pRetVal
#

cEditPoint._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'Align',
        (['in'], c_int, 'MyType'),
        (['in'], c_double, 'Ordinate'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'ChangeCoordinates',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'ChangeCoordinates_1',
        (['in'], BSTR, 'Name'),
        (['in'], c_double, 'X'),
        (['in'], c_double, 'Y'),
        (['in'], c_double, 'Z'),
        (['in', 'optional'], VARIANT_BOOL, 'NoRefresh', False),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Connect',
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'Disconnect',
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'Merge',
        (['in'], c_double, 'MergeTol'),
        (['in', 'out'], POINTER(c_int), 'NumberPoints'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'PointName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cEditPoint implementation
# class cEditPoint_Impl(object):
#     def Align(self, MyType, Ordinate):
#         '-no docstring-'
#         #return NumberPoints, PointName, pRetVal
#
#     def ChangeCoordinates(self, Name, X, Y, Z):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeCoordinates_1(self, Name, X, Y, Z, NoRefresh):
#         '-no docstring-'
#         #return pRetVal
#
#     def Connect(self):
#         '-no docstring-'
#         #return NumberPoints, PointName, pRetVal
#
#     def Disconnect(self):
#         '-no docstring-'
#         #return NumberPoints, PointName, pRetVal
#
#     def Merge(self, MergeTol):
#         '-no docstring-'
#         #return NumberPoints, PointName, pRetVal
#

cGroup._methods_ = [
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'Count',
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'Delete',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(5)],
        HRESULT,
        'GetAssignments',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'NumberItems'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(c_int)), 'ObjectType'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'ObjectName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(6)],
        HRESULT,
        'GetNameList',
        (['in', 'out'], POINTER(c_int), 'NumberNames'),
        (['in', 'out'], POINTER(_midlSAFEARRAY(BSTR)), 'MyName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(9)],
        HRESULT,
        'GetGroup',
        (['in'], BSTR, 'Name'),
        (['in', 'out'], POINTER(c_int), 'Color'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSelection'),
        (
            ['in', 'out'],
            POINTER(VARIANT_BOOL),
            'SpecifiedForSectionCutDefinition',
        ),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForSteelDesign'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForConcreteDesign'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAluminumDesign'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForColdFormedDesign'),
        (
            ['in', 'out'],
            POINTER(VARIANT_BOOL),
            'SpecifiedForStaticNLActiveStage',
        ),
        (
            ['in', 'out'],
            POINTER(VARIANT_BOOL),
            'SpecifiedForBridgeResponseOutput',
        ),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoSeismicOutput'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForAutoWindOutput'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'SpecifiedForMassAndWeight'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(10)],
        HRESULT,
        'SetGroup',
        (['in'], BSTR, 'Name'),
        (['in', 'optional'], c_int, 'Color', -1),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSelection', True),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'SpecifiedForSectionCutDefinition',
            True
        ),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForSteelDesign', True),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForConcreteDesign', True),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAluminumDesign', True),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForColdFormedDesign', True),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'SpecifiedForStaticNLActiveStage',
            True
        ),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'SpecifiedForBridgeResponseOutput',
            True
        ),
        (
            ['in', 'optional'],
            VARIANT_BOOL,
            'SpecifiedForAutoSeismicOutput',
            False
        ),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForAutoWindOutput', False),
        (['in', 'optional'], VARIANT_BOOL, 'SpecifiedForMassAndWeight', True),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'ChangeName',
        (['in'], BSTR, 'Name'),
        (['in'], BSTR, 'NewName'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'Clear',
        (['in'], BSTR, 'Name'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cGroup implementation
# class cGroup_Impl(object):
#     def Count(self):
#         '-no docstring-'
#         #return pRetVal
#
#     def Delete(self, Name):
#         '-no docstring-'
#         #return pRetVal
#
#     def GetAssignments(self, Name):
#         '-no docstring-'
#         #return NumberItems, ObjectType, ObjectName, pRetVal
#
#     def GetNameList(self):
#         '-no docstring-'
#         #return NumberNames, MyName, pRetVal
#
#     def GetGroup(self, Name):
#         '-no docstring-'
#         #return Color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForColdFormedDesign, SpecifiedForStaticNLActiveStage, SpecifiedForBridgeResponseOutput, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight, pRetVal
#
#     def SetGroup(self, Name, Color, SpecifiedForSelection, SpecifiedForSectionCutDefinition, SpecifiedForSteelDesign, SpecifiedForConcreteDesign, SpecifiedForAluminumDesign, SpecifiedForColdFormedDesign, SpecifiedForStaticNLActiveStage, SpecifiedForBridgeResponseOutput, SpecifiedForAutoSeismicOutput, SpecifiedForAutoWindOutput, SpecifiedForMassAndWeight):
#         '-no docstring-'
#         #return pRetVal
#
#     def ChangeName(self, Name, NewName):
#         '-no docstring-'
#         #return pRetVal
#
#     def Clear(self, Name):
#         '-no docstring-'
#         #return pRetVal
#

cDStCanadian_S16_09._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDStCanadian_S16_09 implementation
# class cDStCanadian_S16_09_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#

cDAlAA_2020._methods_ = [
    COMMETHOD(
        [dispid(1)],
        HRESULT,
        'GetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['in', 'out'], POINTER(VARIANT_BOOL), 'ProgDet'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(2)],
        HRESULT,
        'GetPreference',
        (['in'], c_int, 'Item'),
        (['in', 'out'], POINTER(c_double), 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(3)],
        HRESULT,
        'SetOverwrite',
        (['in'], BSTR, 'Name'),
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['in', 'optional'], eItemType, 'ItemType', 0),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
    COMMETHOD(
        [dispid(4)],
        HRESULT,
        'SetPreference',
        (['in'], c_int, 'Item'),
        (['in'], c_double, 'Value'),
        (['out', 'retval'], POINTER(c_int), 'pRetVal')
    ),
]

################################################################
# code template for cDAlAA_2020 implementation
# class cDAlAA_2020_Impl(object):
#     def GetOverwrite(self, Name, Item):
#         '-no docstring-'
#         #return Value, ProgDet, pRetVal
#
#     def GetPreference(self, Item):
#         '-no docstring-'
#         #return Value, pRetVal
#
#     def SetOverwrite(self, Name, Item, Value, ItemType):
#         '-no docstring-'
#         #return pRetVal
#
#     def SetPreference(self, Item, Value):
#         '-no docstring-'
#         #return pRetVal
#


class cDStCanadian_S16_19(comtypes.gen._00020430_0000_0000_C000_000000000046_0_2_0.IDispatch):
    _case_insensitive_ = True
    _iid_ = GUID('{F79A9BEF-7064-44F8-8E47-DB3A75B8ED5D}')
    _idlflags_ = ['dual', 'oleautomation']


cDStCanadian_S16_19._methods_ = [
]

################################################################
# code template for cDStCanadian_S16_19 implementation
# class cDStCanadian_S16_19_Impl(object):

__all__ = [
    'eLength',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope',
    'eDesignActionType_ShortTermComposite',
    'eBridgeResponseDesignRating_Rating_Service_Flexure_Rating',
    'eLength_mm', 'eObjType_Frame', 'cExternalAnalysisResults',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment',
    'eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance',
    'eUnits', 'eTemplateType_Cylinder', 'cSchedulerCallBack',
    'eNamedSetType', 'cPointElm', 'cPropLink',
    'eBridgeResponseDisplLoc_Left_Web_Top',
    'eTemplateType_PortalFrame', 'eTemplateType_BracedFrame',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment',
    'cCaseStaticNonlinear',
    'eLoadPatternType_HorizontalEarthPressure',
    'eLinkPropType_MultilinearElastic', 'eTemperature_F',
    'eBridgeTendonCategory_BottomSpan',
    'eBridgeResponseStress_S11_Longitudinal_Top_URight_Right',
    'eMatTypeSteel_EN100252_S355',
    'eMatTypeConcrete_Indian_M25_NormalWeight', 'cAreaObj',
    'eUnits_kgf_cm_C', 'Helper',
    'eBridgeResponseStress_S11_Longitudinal_Bot_Left',
    'cAutoSeastate',
    'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left',
    'cCaseStaticLinear', 'eLoadCaseType_Modal',
    'eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear',
    'eForce_N', 'eMatTypeSteel',
    'eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB',
    'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center',
    'eNamedSetType_RunBridgeDesignSuperstructure',
    'eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface',
    'eLoadPatternType_DeadManufacture', 'eBridgeResponseStress',
    'eMatTypeSteel_Indian_Fe345', 'eBridgeTendonCategory_General',
    'eMatTypeAluminum_SubType_6063_T6', 'eMatTypeConcrete',
    'eUnits_kgf_m_C', 'eFramePropType_PCCGirderI', 'cOAPI',
    'eBridgeCodeAASHTO_AASHTO_LRFD_2007', 'cDesignForces',
    'eMatTypeSteel_EN100252_S275', 'eLoadPatternType_Construction',
    'eConstraintAxis', 'eBridgeCodeAASHTO_AASHTO_LRFD_2017',
    'eLoadCaseType_PowerSpectralDensity', 'eCNameType_LoadCase',
    'eBridgeTendonCategory',
    'eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total',
    'eFramePropType_Concrete_L', 'eBridgeCodeInterims_Interim_2011',
    'cAutoWindBridge', 'eMatTypeConcrete_FC3000_NormalWeight',
    'eTemplateType_Clear', 'cDCoMexican_RCDF_2004',
    'e3DFrameType_OpenFrame', 'eBridgeResponsePart', 'cHelper',
    'cLineElm', 'eLoadPatternType_MoveFatigue', 'eMatTypeColdFormed',
    'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left',
    'eWallPierRebarLayerType_Confinement_EndZoneI',
    'eLoadPatternType_LiveLoadSurcharge', 'eFramePropType_Channel',
    'eBridgeCodeAASHTO_AASHTO_LRFD_2020',
    'eBridgeResponsePart_All_Beams',
    'eBridgeObjectFoundationPart_Footing', 'eFramePropType_Circle',
    'eItemType_Group', 'eDesignActionType_Other',
    'eNamedSetType_NamedDisplay', 'eLoadCaseType_NonlinearStatic',
    'eBridgeObjectUserPointType',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left',
    'cCaseExternalResults',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab',
    'cFunctionPSD', 'eBridgeCodeInterims_Interim_2012',
    'cDCoIndian_IS_456_2000', 'cDCoKCI_1999', 'cCaseMovingLoad',
    'eLoadPatternType_Other', 'eBridgeObjectBentPart_Bearing',
    'eTemplateType_Dome', 'eForce_kip', 'cDCoACI318_19',
    'eLoadPatternType_WindOnLiveLoad', 'eFramePropType_Cold_Pipe',
    'eBridgeResponseDisplLoc_Web', 'eLoadPatternType_LockedInForces',
    'eUnits_Ton_cm_C',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope',
    'eFramePropType_BuiltupUHybrid',
    'eMatTypeConcrete_EN_C35_NormalWeight',
    'e2DFrameType_EccentricBraced', 'eLoadCaseType_NonlinearDynamic',
    'eNamedSetType_RunBridgeDesignSeismic',
    'eTemplateType_Staircases', 'eMatTypeTendon_ASTM_A416Gr270',
    'eBridgeResponseForce_Axial_Force_P',
    'eLoadPatternType_Shrinkage', 'eLinkPropType_Damper', 'eForce_kN',
    'eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio',
    'eBridgeResponseStress_S11_Longitudinal_Top_Center',
    'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center',
    'eBridgeTendonCategory_Continuity',
    'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left',
    'eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio',
    'eSuperObjectClass_BridgeFoundation', 'cDCoChinese_2002',
    'eItemType_Objects', 'eMatTypeRebar_Indian_HYSD500',
    'cDCoItalianNTC2008C', 'eFramePropType_SteelRod',
    'eMatTypeRebar_Indian_HYSD550', 'eBridgeResponsePart_Slab',
    'eMatTypeSteel_Chinese_Q355',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam',
    'eBridgeResponsePart_Entire_Bridge_Section',
    'eBridgeResponsePart_All_Slabs', 'eLoadPatternType_EuroLm4',
    'eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio',
    'cSapModel', 'eLoadPatternType_WaterloadPressure',
    'cDStChinese_2002', 'eMatType_Masonry',
    'eMatTypeTendon_ASTM_A416Gr250', 'eTemperature_NotApplicable',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center',
    'cPluginCallback', 'eLoadPatternType_SnowHighAltitude',
    'eNamedSetType_BridgeSeismicReport',
    'eMatTypeAluminum_SubType_6061_T6', 'eHingeLocationType',
    'eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr',
    'eTemplateType_Frame3D', 'cFunctionRS',
    'eBridgeResponseDesignRating_S11_Longitudinal_Top_Left',
    'eBridgeObjectFoundationPart_FoundationSpring',
    'eMatTypeConcrete_FC4000_NormalWeight', 'eFramePropType_I',
    'cSolidElm', 'eBridgeCodeInterims_Interim_2015', 'eUnits_lb_in_F',
    'eLinkPropType_Isolator2', 'eLinkPropType_PlasticWen',
    'eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface',
    'eTemplateType_SlopedTruss', 'eTemplateType_Floor',
    'eUnits_Ton_m_C',
    'eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope',
    'eHingeLocationType_RelativeDistance',
    'eMatTypeRebar_Chinese_HRB335', 'cLoadPatterns',
    'eFramePropType_T', 'eMatTypeConcrete_Chinese_C40_NormalWeight',
    'eLinkPropType_Linear',
    'eBridgeResponseStress_S11_Longitudinal_Top_Left',
    'eMatTypeRebar_Indian_Mild250', 'cDAlEurocode_9_2007',
    'cDCoSP63133302011',
    'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope',
    'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center',
    'cDesignAluminum',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL',
    'eWallSpandrelRebarLayerType_Diagonal_Each',
    'eBridgeResponseDesignRating_Design_Principal_Stress_Envelope',
    'cDAlAA_LRFD_2000',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion',
    'eBridgeResponseStress_S11_Longitudinal_Top_URight_Left',
    'eFramePropType_Pipe', 'cDStAPI_RP2A_WSD2014', 'cDCdAISI_16',
    'eBridgeObjectBentPart', 'eDesignActionType_Staged', 'cEditSolid',
    'eUnits_N_cm_C',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg',
    'eBridgeResponseDesignRating_Rating_Service',
    'eConstraintType_Diaphragm', 'eMatTypeAluminum_SubType_5052_H34',
    'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right',
    'cCaseStaticLinearMultistep', 'eLoadPatternType_SeaState',
    'eFramePropType_Variable', 'cView', 'eLoadPatternType_DeadWater',
    'eFramePropType_Bridge', 'eLoadPatternType_PassiveEarthPressure',
    'cAutoWind', 'eLoadCaseType_ResponseSpectrum', 'eForce_kgf',
    'eTemplateType',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right',
    'cAutoSeismic', 'eMatType_Rebar', 'eFramePropType_ConcreteBox',
    'eHingeLocationType_OffsetFromJEnd', 'cPropFrame', 'cFunctionSS',
    'eLoadPatternType_QuakeVerticalOnly',
    'eTemplateType_CableBridges', 'eBridgeObjectBentPart_CapBeam',
    'eFramePropType_BuiltupIHybrid',
    'eLoadPatternType_EarthSurcharge', 'cDStAPI_RP2A_LRFD97',
    'eReturnCode_Deprecated', 'cCaseModalRitz',
    'eMatCoupledType_None', 'eTemplateType_Shells',
    'cDStChinese_2010', 'cNamedAssign', 'cModifierFrame',
    'cDStASCE_10_97',
    'eBridgeResponseDesignRating_Rating_Strength_Shear_Rating',
    'cDCoHong_Kong_CP_2013', 'eBridgeObjectBentPart_Wall',
    'cDCoACI318_08_IBC2009', 'cDConcShellEurocode_2_2004',
    'eLoadPatternType_EuroLm3',
    'eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope',
    'eUnits_kN_cm_C', 'eItemTypeElm_Element', 'eCNameType_LoadCombo',
    'cCasePowerSpectralDensity', 'cDCoNZS_3101_2006',
    'cDStAustralian_AS4100_98', 'cPropTendon', 'cDesignColdFormed',
    'eBridgeCodeAASHTO',
    'eBridgeResponseDisplDOF_Vertical_Displacement',
    'eBridgeCodeAASHTO_AASHTO_LRFD_2014',
    'eReturnCode_TableDoesNotExist', 'eMatType',
    'eMatTypeConcrete_FC6000_NormalWeight',
    'eLinkPropType_DamperBilinear', 'cDAlAA_2015',
    'cDStIndian_IS_800_2007', 'eNamedSetType_PlotFunctionTraces',
    'cDStAPI_RP2A_WSD2000', 'eLoadPatternType_TemperatureGradient',
    'eFramePropType', 'eItemType', 'cSectionCut',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area',
    'eLoadPatternType_PatternAuto',
    'eLinkPropType_DamperFrictionSpring', 'eForce',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL',
    'eMatTypeConcrete_Indian_M35_NormalWeight', 'eMatType_ColdFormed',
    'eMatTypeConcrete_FC6000_LightWeight', 'eObjType', 'cPropSolid',
    'eMatTypeConcrete_EN_C40_NormalWeight',
    'eMatTypeRebar_Indian_HYSD415', 'cEditGeneral',
    'eLoadPatternType_Bouyancy',
    'eMatTypeConcrete_EN_C12_NormalWeight',
    'eMatTypeConcrete_EN_C90_NormalWeight',
    'eBridgeSegmentType_Segment', 'cDAlAA_2020',
    'eFramePropType_Rectangular', 'eBridgeObjectType_Segmental',
    'cDStSP16_13330_2017', 'eMatTypeConcrete_EN_C50_NormalWeight',
    'eFramePropType_ConcreteCross',
    'eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top',
    'eTemplateType_VerticalTruss', 'eBridgeSegmentType_Closure',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right',
    'e2DFrameType',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right',
    'eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths',
    'cDStNorsok_N0042013', 'eTemplateType_SolidModels',
    'eLinkPropType_Isolator4', 'eLoadPatternType_Prestress',
    'eMatTypeConcrete_EN_C80_NormalWeight',
    'eBridgeObjectUserPointType_SegmentalTendon', 'cCaseModalEigen',
    'eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg',
    'cCaseDirectHistoryNonlinear', 'eLoadPatternType_EuroLm2',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope',
    'eLoadPatternType_Settlement', 'cDCdEuroCold06',
    'eLoadPatternType_ReduceLive', 'eTemplateType_SpaceFrame',
    'eMatTypeSteel_Chinese_Q235', 'cConstraint',
    'eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos',
    'cTendonObj', 'cDStCanadian_S16_09',
    'eMatTypeSteel_ASTM_A500GrB_Fy42', 'eWallPierRebarLayerType',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center',
    'eBridgeResponseStress_S11_Lateral_Bending_Bot',
    'eDesignActionType_NonComposite',
    'eBridgeObjectUserPointType_General', 'cDStItalianNTC2018S',
    'eLoadPatternType_Snow', 'eFramePropType_FilledTube',
    'eBridgeResponseDisplDOF',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right',
    'cCaseSteadyState',
    'eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio',
    'cLoadCases',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange',
    'eTemplateType_Grid', 'eMatTypeRebar_ASTM_A615Gr40',
    'eTemplateType_PerimeterFrame',
    'eWallSpandrelRebarLayerType_Vertical_Ties_Distributed',
    'eReturnCode_NotApplicable', 'eLoadPatternType_Rooflive',
    'eMatTypeSteel_Chinese_Q345',
    'eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB',
    'eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F',
    'eReturnCode_UnspecifiedError', 'eFramePropType_Box',
    'eBridgeResponseStress_S11_Longitudinal_Bot_Right',
    'eBridgeResponseDesignRating_S11_Longitudinal_Top_Right',
    'cDCoCSA_A23_3_14', 'eMatCoupledType',
    'eMatTypeConcrete_EN_C20_NormalWeight', 'cDStItalianNTC2008S',
    'eFramePropType_ConcretePipe', 'eNamedSetType_TableGroupSuperset',
    'eConstraintType_Plate', 'eLoadPatternType_Dead',
    'eUnits_Ton_mm_C', 'eLoadPatternType_Quake',
    'eMatTypeRebar_ASTM_A706', '_StartService',
    'eBridgeResponseDesignRating_Rating_Flexure',
    'eLoadPatternType_Wind', 'eUnits_N_mm_C', 'cReleaseFrame',
    'eNamedSetType_RunMemberRating', 'eTemperature_C',
    'eLoadPatternType_Hyperstatic', 'e3DFrameType',
    'eLoadPatternType_EuroLm1Freq', 'cScheduler', 'cAnalyze',
    'eBridgeResponseStress_S11_Longitudinal_Top_URight_Center',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab',
    'eLoadCaseType_LinearStaticMultiStep', 'eConstraintAxis_AutoAxis',
    'eFramePropType_Cold_Hat', 'eBridgeResponseDisplLoc_Left_Web',
    'cDStAISC360_16', 'eFramePropType_Cold_C', 'cDCdAISI_LRFD96',
    'eBridgeResponsePart_Web', 'eLoadPatternType_MoveFatiguePermit',
    'eObjType_Solid', 'eMatCoupledType_VonMisesPlasticity',
    'eLoadPatternType_PedestrianLLReduced',
    'eMatTypeSteel_EN100252_S450',
    'eMatTypeConcrete_EN_C55_NormalWeight',
    'eBridgeTendonCategory_TopSpan', 'eTemplateType_PipesAndPlates',
    'eLoadPatternType_Friction', 'eLoadPatternType_EuroLm1Char',
    'eBridgeResponseStress_S11_Longitudinal_Bot_Center',
    'eLoadPatternType_Temperature', 'eFramePropType_ConcreteTee',
    'eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL',
    'cDesignConcreteShell', 'cFile',
    'eMatTypeConcrete_Indian_M60_NormalWeight',
    'eLinkPropType_MultilinearPlastic',
    'eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F',
    'eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr',
    'eForce_NotApplicable', 'eNamedSetType_RunAnalysis', 'cPointObj',
    'cGenDispl',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab',
    'eBridgeSegmentType', 'eLoadCaseType_ExternalResults',
    'eLoadPatternType_DeadWearing',
    'eLinkPropType_DamperLinearExponential',
    'eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left',
    'eLoadPatternType_StreamFlow',
    'eMatTypeConcrete_Chinese_C20_NormalWeight', 'cDStAISC360_10',
    'eFramePropType_DblAngle', 'cGenRefLine',
    'eBridgeResponseStress_S11_Longitudinal_Top_Right',
    'eSuperObjectClass', 'eBridgeResponseForce', 'cModifierArea',
    'eBridgeResponseStress_S11_Lateral_Bending_Top_URight',
    'eMatTypeRebar_Chinese_HPB235', 'eUnits_kN_m_C',
    'eLoadCaseType_LinearDynamic',
    'eLoadCaseType_NonlinearStaticMultiStep', 'eFramePropType_Cold_I',
    'eLoadPatternType_PedestrianLL', 'eFramePropType_Angle',
    'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope',
    'eSuperObjectClass_Foundation',
    'eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range',
    'e3DFrameType_BeamSlab', 'eReturnCode_NoError',
    'eConstraintAxis_Y', 'eBridgeCodeAASHTO_AASHTO_STD_2002',
    'cDCoCSA_A23_3_04', 'eSuperObjectClass_SuperObject',
    'eObjType_Point', 'cNamedSet',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center',
    'eNamedSetType_BridgeCalculationReport', 'cDCoACI318_14',
    'eTemplateType_ShearWall', 'eBridgeResponsePart_All_Girders',
    'eBridgeResponseDisplLoc_Right_Web_Top',
    'eReturnCode_TableIsObsolete',
    'eBridgeObjectFoundationPart_PileCap',
    'eMatTypeConcrete_Indian_M45_NormalWeight',
    'eConstraintType_Beam', 'eWallPierRebarLayerType_Diagonal_Each',
    'eMatTypeConcrete_EN_C45_NormalWeight',
    'eTemplateType_EccentricFrame',
    'eMatTypeColdFormed_ASTM_A653SQGr50',
    'eMatTypeRebar_ASTM_A615Gr60', 'cEditArea',
    'eTemplateType_Truss3D', 'eMatType_Concrete',
    'eLoadPatternType_MoveTrain', 'cAnalysisResults',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos',
    'cPlaneElm', 'eLoadPatternType_Move',
    'eBridgeResponseDisplLoc_Right_Web_Bottom', 'cPropMaterialTD',
    'eLoadPatternType_Live', 'eConstraintType_Line',
    'eConstraintAxis_X', 'cDCoAS_3600_09', 'eLength_inch',
    'eBridgeResponseStress_S11_Longitudinal_Bot_Envelope',
    'eNamedSetType_JointTHResponseSpectra', 'cPropCable',
    'eBridgeSegmentConstructionMethod_CastInPlace',
    'eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL',
    'eConstraintType',
    'eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab',
    'eFramePropType_Cold_2C', 'eFramePropType_Trapezoidal',
    'eBridgeResponseDisplLoc', 'eLoadPatternType_ActiveEarthPressure',
    'cFunction', 'cAreaElm', 'cCaseHyperStatic', 'eBridgeObjectType',
    'eLoadPatternType_Wave', 'cDStAISC_ASD89', 'cDesignSteel',
    'cDesignResults', 'eItemTypeElm_SelectionElm',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos',
    'eFramePropType_CoreBrace_BRB', 'cCableObj',
    'eFramePropType_SteelPlate', 'eMatType_Steel',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab',
    'cDCoTS_500_2000', 'eMatTypeSteel_ASTM_A992_Fy50',
    'eBridgeResponseStress_S11_Longitudinal_Top_Envelope',
    'eFramePropType_FilledPipe',
    'eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL',
    'eReturnCode_NotImplemented', 'eBridgeObjectBentPart_Column',
    'eUnits_N_m_C',
    'eBridgeResponseForce_Moment_About_Vertical_Axis_M2',
    'eLoadPatternType_EarthHydrostatic', 'cModifierCable',
    'eLoadPatternType_VesselCollision',
    'eBridgeResponseDisplLoc_Web_Top', 'eItemType_SelectedObjects',
    'cPropArea', 'eBridgeResponseDisplDOF_Longitudinal_Rotation',
    'eBridgeSegmentType_PierTable', 'eMatTypeRebar_Chinese_HRB400',
    'eConstraintType_Body', 'cCaseStaticNonlinearMultistep',
    'cEditPoint', 'eMatTypeConcrete_EN_C16_NormalWeight',
    'eBridgeResponseDisplLoc_Left_Web_Bottom', 'eUnits_kip_ft_F',
    'eLength_m', 'eFramePropType_General',
    'eTemplateType_StorageStructures', 'cAnalysisResultsSetup',
    'cDesignConcrete', 'eConstraintAxis_Z',
    'eLoadCaseType_StagedConstruction',
    'eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot',
    'eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3',
    'eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3',
    'eMatTypeConcrete_EN_C30_NormalWeight',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left',
    'eMatTypeSteel_ASTM_A53GrB', 'e3DFrameType_PerimeterFrame',
    'eNamedSetType_PushoverCurve', 'eBridgeResponsePart_Beam',
    'eBridgeResponseForce_Shear_Vertical_V2', 'eLinkPropType',
    'eTemplateType_UndergoundConcrete', 'cLinkElm',
    'eLoadPatternType_Permit',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left',
    'eItemTypeElm', 'eMatTypeConcrete_FC3000_LightWeight',
    'eFramePropType_Cold_Box',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab',
    'eNamedSetType_TableSet', 'eBridgeResponsePart_Girder',
    'eMatType_Aluminum', 'eTemplateType_Advanced',
    'eBridgeResponseForce_Torsion_T',
    'eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating',
    'eTemplateType_BridgeWizard', 'eMatTypeSteel_ASTM_A913Gr50',
    'cMassSource',
    'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right',
    'eMatTypeConcrete_EN_C60_NormalWeight',
    'eLoadPatternType_VehicleCollision', 'eLength_cm',
    'cDCoCSA_A23_3_19', 'eLoadCaseType_MovingLoad',
    'eMatTypeConcrete_Indian_M30_NormalWeight',
    'cCaseModalHistoryLinear',
    'eBridgeSegmentConstructionMethod_Precast', 'cDCdAISI_ASD96',
    'eLoadPatternType_Creep', 'cFrameObj',
    'eWallPierRebarLayerType_Confinement_EndZoneJ', 'cEditFrame',
    'eMatType_Tendon', 'cPropRebar',
    'eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot',
    'eLoadPatternType_Impact',
    'eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope',
    'eBridgeResponseDisplLoc_Web_Bottom', 'eFramePropType_Joist',
    'eBridgeResponsePart_Entire_Section_Plus_All_Girders',
    'eMatTypeConcrete_FC5000_NormalWeight', 'eCNameType',
    'eMatTypeConcrete_Indian_M50_NormalWeight', 'eMatTypeAluminum',
    'eLoadPatternType_Notional',
    'eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance',
    'eMatTypeConcrete_Indian_M40_NormalWeight',
    'eNamedSetType_VirtualWork', 'eNamedSetType_UpdateBridgeObject',
    'eWallSpandrelRebarLayerType_Horizontal_Bottom_Total',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left',
    'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left',
    'cDAlAA_ASD_2000', 'cCaseDirectHistoryLinear',
    'eBridgeObjectType_General', 'eLoadPatternType_DownDrag',
    'eLoadPatternType_VerticalEarthPressure', 'cDStEurocode_3_2005',
    'cDStCanadian_S16_14', 'eMatTypeConcrete_FC5000_LightWeight',
    'cDCoACI318_11',
    'eBridgeResponseDesignRating_S11_Longitudinal_Top_Center',
    'eMatTypeConcrete_Indian_M20_NormalWeight',
    'eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top',
    'eLoadPatternType_MoveDeflection', 'eMatTypeRebar_ASTM_A615Gr75',
    'eTemplateType_SpaceTruss', 'eLoadPatternType',
    'cDCoEurocode_2_2004', 'eForce_lb',
    'eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft',
    'cCaseResponseSpectrum', 'eBridgeObjectFoundationPart_Pile',
    'eLoadCaseType_LinearHistory', 'cCombo',
    'eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2',
    'eNamedSetType_All', 'eTemperature', 'eFramePropType_DbChannel',
    'eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio',
    'eConstraintType_Weld', 'eBridgeResponseDesignRating',
    'eFramePropType_PCCGirderU', 'eWallSpandrelRebarLayerType',
    'eMatTypeSteel_Indian_Fe250', 'eConstraintType_Local',
    'eTemplateType_Bridge', 'eLinkPropType_Gap',
    'eConstraintType_Equal', 'cPattern', 'eMatType_NoDesign',
    'eLinkPropType_Isolator1', 'eReturnCode',
    'eLoadPatternType_QuakeDrift', 'eBridgeCodeInterims_Interim_2014',
    'eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2',
    'eDesignActionType',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear',
    'cDStAISC_LRFD93', 'eLinkPropType_Hook',
    'eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right',
    'eForce_tonf',
    'eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface',
    'e3DFrameType_FlatPlate',
    'eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating',
    'cPropFrameSDShape',
    'eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg',
    'eFramePropType_PCCGirderSuperT', 'eMatTypeSteel_ASTM_A572Gr50',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center',
    'cDStChinese_2018',
    'eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right',
    'eUnits_kgf_mm_C', 'eMatTypeTendon',
    'eBridgeCodeInterims_NoInterims', 'eLoadCaseType_LinearStatic',
    'eFramePropType_SD',
    'eWallSpandrelRebarLayerType_Horizontal_Top_Total',
    'eBridgeCodeAASHTO_AASHTO_LRFD_2012', 'eMatTypeSteel_ASTM_A36',
    'eFramePropType_Cold_Z', 'cPropMaterial', 'eMatTypeRebar',
    'cNamedDisplay', 'cDCoSingapore_CP_65_99',
    'cDStNewZealand_NZS3404_97', 'eLoadCaseType',
    'eNamedSetType_RunBridgeDesignSubstructure',
    'eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width',
    'cCaseBuckling', 'eHingeLocationType_OffsetFromIEnd',
    'eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total',
    'eMatTypeConcrete_Indian_M55_NormalWeight',
    'eBridgeTendonCategory_Cantilever', 'cGroup', 'cDCoChinese_2010',
    'eMatTypeColdFormed_ASTM_A653SQGr33', 'eLoadCaseType_SteadyState',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center',
    'eUnits_lb_ft_F', 'cSelect', 'eFramePropType_EncasedRectangle',
    'eBridgeResponseForce_Moment_About_Horizontal_Axis_M3',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left',
    'cDStCanadian_S16_19', 'eLoadPatternType_SuperDead',
    'eFramePropType_Cold_T',
    'eMatTypeConcrete_Chinese_C30_NormalWeight', 'cOptions',
    'cFunctionTH', 'eBridgeCodeInterims',
    'cCaseStaticNonlinearStaged',
    'eNamedSetType_RunBridgeRatingSuperstructure',
    'eFramePropType_Cold_L', 'eFramePropType_EncasedCircle',
    'StartService', 'eMatCoupledType_ModifiedDarwinPecknoldConcrete',
    'eBridgeResponseDisplDOF_Transverse_Displacement',
    'eFramePropType_BuiltupICoverplate', 'cCoordSys',
    'eUnits_kN_mm_C', 'eItemTypeElm_GroupElm', 'eUnits_kip_in_F',
    'eBridgeSegmentType_Rigid', 'e2DFrameType_ConcentricBraced',
    'eLoadPatternType_Braking', 'eMatTypeSteel_EN100252_S235',
    'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner',
    'eObjType_Area', 'eMatTypeConcrete_EN_C25_NormalWeight',
    'eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center',
    'eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis',
    'eTemplateType_Frame2D', 'eLoadPatternType_Ice',
    'e2DFrameType_PortalFrame',
    'eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner',
    'eBridgeResponseForce_Shear_Horizontal_V3', 'cDStSP16_13330_2011',
    'eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right',
    'eLoadCaseType_Buckling', 'eLoadPatternType_PrestressTransfer',
    'cLinkObj', 'eBridgeResponseDisplLoc_Slab_Center',
    'cDStAISC360_05_IBC2006', 'cSolidObj', 'cDCoBS8110_97',
    'eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation',
    'eBridgeResponseStress_S11_Lateral_Bending_Top',
    'eDesignActionType_LongTermComposite',
    'eMatTypeConcrete_EN_C70_NormalWeight', 'eItemTypeElm_ObjectElm',
    'eFramePropType_Auto', 'eTemplateType_Barrel',
    'eLoadPatternType_PatternLive',
    'eBridgeResponseDesignRating_Rating_Shear',
    'cCaseModalHistoryNonlinear',
    'eMatTypeConcrete_FC4000_LightWeight',
    'eLoadPatternType_Centrifugal', 'eLoadCaseType_NonlinearHistory',
    'eBridgeCodeInterims_Interim_2013',
    'eBridgeResponseDisplLoc_Right_Web', 'eLength_micron',
    'eLength_ft', 'eFramePropType_BucklingRestrainedBrace',
    'eLinkPropType_Isolator3', 'eBridgeResponsePart_All_Webs',
    'eFramePropType_Cold_2L', 'cDStBS5950_2000',
    'eConstraintType_Rod', 'cDatabaseTables',
    'eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center',
    'eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width',
    'eBridgeSegmentConstructionMethod', 'eTemplateType_Truss2D',
    'eTemplateType_Beam', 'eMatTypeSteel_ASTM_A500GrB_Fy46',
    'eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope',
    'eMatTypeConcrete_Indian_M15_NormalWeight',
    'eNamedSetType_BridgeSuperstructureResponse',
    'eLoadCaseType_HyperStatic', 'eLength_NotApplicable',
    'eBridgeResponseDisplDOF_Longitudinal_Displacement',
    'eBridgeObjectFoundationPart',
    'eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area',
    'eSuperObjectClass_None'
]

_check_version('1.1.14', 1661031527.618205)

